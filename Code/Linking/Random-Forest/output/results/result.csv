id_istance,predicted linking,correct linking
0,"    private void otaPerformActivation() {
if (DBG) log(""otaPerformActivation()..."");
if (!mInteractive) {
//comment
Log.w(LOG_TAG, ""otaPerformActivation: not interactive!"");
return;
}

if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
//comment
Intent newIntent = new Intent(Intent.ACTION_CALL);
newIntent.setData(Uri.fromParts(Constants.SCHEME_TEL, OTASP_NUMBER, null));

//comment
mApplication.callController.placeCall(newIntent);

//comment
otaShowListeningScreen();
mInCallScreen.requestUpdateScreen();
}
return;
}","    private void otaPerformActivation() {
if (DBG) log(""otaPerformActivation()..."");
if (!mInteractive) {
//comment
Log.w(LOG_TAG, ""otaPerformActivation: not interactive!"");
return;
}

if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
//comment
<start>Intent newIntent = new Intent(Intent.ACTION_CALL);
newIntent.setData(Uri.fromParts(Constants.SCHEME_TEL, OTASP_NUMBER, null));<end>

//comment
mApplication.callController.placeCall(newIntent);

//comment
otaShowListeningScreen();
mInCallScreen.requestUpdateScreen();
}
return;
}"
4,"    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
final Bundle accountExtras = account.getExtras();
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}","    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
final Bundle accountExtras = account.getExtras();
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
<start>final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);<end>
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}"
5,"private static void updateCdmaCallStateOnNewOutgoingCall(PhoneGlobals app) {
if (app.cdmaPhoneCallState.getCurrentCallState() ==
<start>CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);<end>
} else {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE);
}
}","private static void updateCdmaCallStateOnNewOutgoingCall(PhoneGlobals app) {
<start>if (app.cdmaPhoneCallState.getCurrentCallState() ==
CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {<end>
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE);
}
}"
8,"    private void onProfileClicked(LocalBluetoothProfile profile, CheckBoxPreference profilePref) {
BluetoothDevice device = mCachedDevice.getDevice();

int status = profile.getConnectionStatus(device);
boolean isConnected =
status == BluetoothProfile.STATE_CONNECTED;

if (isConnected) {
askDisconnect(getActivity(), profile);
} else {
if (profile.isPreferred(device)) {
//comment
profile.setPreferred(device, false);
<start>refreshProfilePreference(profilePref, profile);
} else {
profile.setPreferred(device, true);
mCachedDevice.connectProfile(profile);<end>
}
}
}","    private void onProfileClicked(LocalBluetoothProfile profile, CheckBoxPreference profilePref) {
BluetoothDevice device = mCachedDevice.getDevice();

int status = profile.getConnectionStatus(device);
boolean isConnected =
status == BluetoothProfile.STATE_CONNECTED;

if (isConnected) {
askDisconnect(getActivity(), profile);
} else {
<start>if (profile.isPreferred(device)) {
//comment
profile.setPreferred(device, false);
refreshProfilePreference(profilePref, profile);
} else {<end>
profile.setPreferred(device, true);
mCachedDevice.connectProfile(profile);
}
}
}"
9,"public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
<start>mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);<end>
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}

//comment
mRowInfos.addAll(bucket);
count += bucket.size();
}
day++;
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}","public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
<start>RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);<end>
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}

//comment
mRowInfos.addAll(bucket);
count += bucket.size();
}
day++;
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}"
12,"        private void onDataLoaded() {
Preconditions.checkNotNull(mMailbox);

//comment
<start>final ActionBar actionBar = getActivity().getActionBar();
final String mailboxName = mMailbox.mDisplayName;<end>
if (actionBar != null) {
actionBar.setTitle(mailboxName);
actionBar.setSubtitle(getString(R.string.mailbox_settings_activity_title));
} else {
getActivity().setTitle(
getString(R.string.mailbox_settings_activity_title_with_mailbox,
mailboxName));
}

MailboxSettings.setupLookbackPreferenceOptions(getActivity(), mSyncLookbackPref,
mMaxLookback, true);
}","        private void onDataLoaded() {
Preconditions.checkNotNull(mMailbox);

//comment
<start>final ActionBar actionBar = getActivity().getActionBar();
final String mailboxName = mMailbox.mDisplayName;<end>
if (actionBar != null) {
<start>actionBar.setTitle(mailboxName);<end>
actionBar.setSubtitle(getString(R.string.mailbox_settings_activity_title));
} else {
getActivity().setTitle(
getString(R.string.mailbox_settings_activity_title_with_mailbox,
mailboxName));
}

MailboxSettings.setupLookbackPreferenceOptions(getActivity(), mSyncLookbackPref,
mMaxLookback, true);
}"
15,"public static void setupOtaspCall(Intent intent) {
if (DBG) log(""setupOtaspCall(): preparing for OTASP call to "" + intent);
PhoneGlobals app = PhoneGlobals.getInstance();

if (app.otaUtils != null) {
//comment
//comment
Log.i(LOG_TAG, ""setupOtaspCall: ""
+ ""OtaUtils already exists; replacing with new instance..."");
}

//comment
app.otaUtils = new OtaUtils(app.getApplicationContext(), true );
if (DBG) log(""- created OtaUtils: "" + app.otaUtils);

//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

app.otaUtils.setCdmaOtaInCallScreenUiState(
OtaUtils.CdmaOtaInCallScreenUiState.State.NORMAL);

//comment
//comment
app.inCallUiState.inCallScreenMode = InCallUiState.InCallScreenMode.OTA_NORMAL;

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
<start>if (app.cdmaOtaProvisionData != null) {
app.cdmaOtaProvisionData.isOtaCallCommitted = false;
}<end>
}","public static void setupOtaspCall(Intent intent) {
if (DBG) log(""setupOtaspCall(): preparing for OTASP call to "" + intent);
PhoneGlobals app = PhoneGlobals.getInstance();

if (app.otaUtils != null) {
//comment
//comment
Log.i(LOG_TAG, ""setupOtaspCall: ""
+ ""OtaUtils already exists; replacing with new instance..."");
}

//comment
app.otaUtils = new OtaUtils(app.getApplicationContext(), true );
if (DBG) log(""- created OtaUtils: "" + app.otaUtils);

//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

app.otaUtils.setCdmaOtaInCallScreenUiState(
OtaUtils.CdmaOtaInCallScreenUiState.State.NORMAL);

//comment
//comment
app.inCallUiState.inCallScreenMode = InCallUiState.InCallScreenMode.OTA_NORMAL;

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
<start>if (app.cdmaOtaProvisionData != null) {
app.cdmaOtaProvisionData.isOtaCallCommitted = false;
}<end>
}"
18,"    @VisibleForTesting
public boolean waitForWriteToCompleteForTesting(long maxWaitMillis) {
final long start = SystemClock.uptimeMillis();
final long end = start + maxWaitMillis;
synchronized (mWriteScheduleLock) {
while (mWriteScheduled || mWriteInProgress) {
final long now = SystemClock.uptimeMillis();
if (now >= end) {
//comment
<start>return false;<end>
}
try {
mWriteScheduleLock.wait(now - start + maxWaitMillis);
} catch (InterruptedException e) {
//comment
break;
}
}
}
return true;
}","    @VisibleForTesting
public boolean waitForWriteToCompleteForTesting(long maxWaitMillis) {
final long start = SystemClock.uptimeMillis();
final long end = start + maxWaitMillis;
synchronized (mWriteScheduleLock) {
while (mWriteScheduled || mWriteInProgress) {
final long now = SystemClock.uptimeMillis();
<start>if (now >= end) {
//comment
return false;
}<end>
try {
mWriteScheduleLock.wait(now - start + maxWaitMillis);
} catch (InterruptedException e) {
//comment
break;
}
}
}
return true;
}"
20,"private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
<start>final Intent convIntent = new Intent(context, ConversationList.class);<end>
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}","private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
<start>final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);<end>

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}"
23,"    private boolean handlePossibleVerticalSwipe(MotionEvent event) {
if (mGestureDirectionLocked) {
return mPossibleVerticalSwipe;
}
float deltaX = Math.abs(mStartX - event.getX());
float deltaY = Math.abs(mStartY - event.getY());
<start>float distance = (deltaX * deltaX) + (deltaY * deltaY);<end>
//comment
//comment
if (distance > (mTouchSlop * mTouchSlop)) {
<start>if (deltaX > deltaY) {
mPossibleVerticalSwipe = false;
}
mGestureDirectionLocked = true;<end>
}
return mPossibleVerticalSwipe;
}","    private boolean handlePossibleVerticalSwipe(MotionEvent event) {
if (mGestureDirectionLocked) {
return mPossibleVerticalSwipe;
}
float deltaX = Math.abs(mStartX - event.getX());
float deltaY = Math.abs(mStartY - event.getY());
float distance = (deltaX * deltaX) + (deltaY * deltaY);
//comment
//comment
<start>if (distance > (mTouchSlop * mTouchSlop)) {
if (deltaX > deltaY) {
mPossibleVerticalSwipe = false;
}
mGestureDirectionLocked = true;
}<end>
return mPossibleVerticalSwipe;
}"
25,"    @Override
public void onFieldChanged(String column, String value) {
if (!isFieldChanged(column, value)) {
return;
}

//comment
saveValue(column, value);

//comment
<start>notifyEditorListener();<end>
}","    @Override
public void onFieldChanged(String column, String value) {
if (!isFieldChanged(column, value)) {
return;
}

//comment
saveValue(column, value);

//comment
<start>notifyEditorListener();<end>
}"
27,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

BluetoothDevice device;
if (savedInstanceState != null) {
device = savedInstanceState.getParcelable(EXTRA_DEVICE);
} else {
Bundle args = getArguments();
device = args.getParcelable(EXTRA_DEVICE);
}

addPreferencesFromResource(R.xml.bluetooth_device_advanced);
getPreferenceScreen().setOrderingAsAdded(false);
mProfileContainer = (PreferenceGroup) findPreference(KEY_PROFILE_CONTAINER);
mDeviceNamePref = (EditTextPreference) findPreference(KEY_RENAME_DEVICE);

if (device == null) {
Log.w(TAG, ""Activity started without a remote Bluetooth device"");
finish();
return;
}
mRenameDeviceNamePref = new RenameEditTextPreference();
mManager = LocalBluetoothManager.getInstance(getActivity());
CachedBluetoothDeviceManager deviceManager =
mManager.getCachedDeviceManager();
mProfileManager = mManager.getProfileManager();
mCachedDevice = deviceManager.findDevice(device);
if (mCachedDevice == null) {
Log.w(TAG, ""Device not found, cannot connect to it"");
finish();
return;
}

String deviceName = mCachedDevice.getName();
mDeviceNamePref.setSummary(deviceName);
mDeviceNamePref.setText(deviceName);
mDeviceNamePref.setOnPreferenceChangeListener(this);

//comment
<start>addPreferencesForProfiles();<end>
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

BluetoothDevice device;
if (savedInstanceState != null) {
device = savedInstanceState.getParcelable(EXTRA_DEVICE);
} else {
Bundle args = getArguments();
device = args.getParcelable(EXTRA_DEVICE);
}

addPreferencesFromResource(R.xml.bluetooth_device_advanced);
getPreferenceScreen().setOrderingAsAdded(false);
mProfileContainer = (PreferenceGroup) findPreference(KEY_PROFILE_CONTAINER);
mDeviceNamePref = (EditTextPreference) findPreference(KEY_RENAME_DEVICE);

if (device == null) {
Log.w(TAG, ""Activity started without a remote Bluetooth device"");
finish();
return;
}
mRenameDeviceNamePref = new RenameEditTextPreference();
mManager = LocalBluetoothManager.getInstance(getActivity());
CachedBluetoothDeviceManager deviceManager =
mManager.getCachedDeviceManager();
mProfileManager = mManager.getProfileManager();
mCachedDevice = deviceManager.findDevice(device);
if (mCachedDevice == null) {
Log.w(TAG, ""Device not found, cannot connect to it"");
finish();
return;
}

String deviceName = mCachedDevice.getName();
mDeviceNamePref.setSummary(deviceName);
mDeviceNamePref.setText(deviceName);
mDeviceNamePref.setOnPreferenceChangeListener(this);

//comment
<start>addPreferencesForProfiles();<end>
}"
28,"private static void updateCdmaCallStateOnNewOutgoingCall(PhoneGlobals app) {
if (app.cdmaPhoneCallState.getCurrentCallState() ==
<start>CdmaPhoneCallState.PhoneCallState.IDLE) {<end>
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE);<end>
}
}","private static void updateCdmaCallStateOnNewOutgoingCall(PhoneGlobals app) {
<start>if (app.cdmaPhoneCallState.getCurrentCallState() ==
CdmaPhoneCallState.PhoneCallState.IDLE) {<end>
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
<start>} else {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE);
}<end>
}"
29,"public void logCall(Connection c, int callLogType) {
final String number = c.getAddress();
final long date = c.getCreateTime();
final long duration = c.getDurationMillis();
final Phone phone = c.getCall().getPhone();

final CallerInfo ci = getCallerInfoFromConnection(c);
final String logNumber = getLogNumber(c, ci);

if (DBG) {
log(""- onDisconnect(): logNumber set to:"" + PhoneUtils.toLogSafePhoneNumber(logNumber) +
"", number set to: "" + PhoneUtils.toLogSafePhoneNumber(number));
}

//comment
//comment
//comment

//comment
final int presentation = getPresentation(c, ci);

final boolean isOtaspNumber = TelephonyCapabilities.supportsOtasp(phone)
&& phone.isOtaSpNumber(number);

//comment
if (!isOtaspNumber) {
<start>logCall(ci, logNumber, presentation, callLogType, date, duration);<end>
}
}","public void logCall(Connection c, int callLogType) {
final String number = c.getAddress();
final long date = c.getCreateTime();
final long duration = c.getDurationMillis();
final Phone phone = c.getCall().getPhone();

final CallerInfo ci = getCallerInfoFromConnection(c);
final String logNumber = getLogNumber(c, ci);

if (DBG) {
log(""- onDisconnect(): logNumber set to:"" + PhoneUtils.toLogSafePhoneNumber(logNumber) +
"", number set to: "" + PhoneUtils.toLogSafePhoneNumber(number));
}

//comment
//comment
//comment

//comment
final int presentation = getPresentation(c, ci);

final boolean isOtaspNumber = TelephonyCapabilities.supportsOtasp(phone)
&& phone.isOtaSpNumber(number);

//comment
<start>if (!isOtaspNumber) {<end>
logCall(ci, logNumber, presentation, callLogType, date, duration);
}
}"
32,"private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
int id = (int) header.id;

//comment
if (target.get(i) == header) {
//comment
//comment
if (mFirstHeader == null &&
HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
<start>mFirstHeader = header;<end>
}
mHeaderIndexMap.put(id, i);
i++;
}
}
}","private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
int id = (int) header.id;

//comment
<start>if (target.get(i) == header) {<end>
//comment
//comment
if (mFirstHeader == null &&
HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
mFirstHeader = header;
}
mHeaderIndexMap.put(id, i);
<start>i++;<end>
}
}
}"
33,"    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
updateAndReportActiveLocked();
}","    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
<start>updateAndReportActiveLocked();<end>
}"
36,"    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
<start>mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {<end>
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
<start>} else if (mShiftKeyState.isChording()) {<end>
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
<start>mShiftKeyState.onRelease();<end>
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}","    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
<start>if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;<end>
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
} else if (mShiftKeyState.isChording()) {
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}"
37,"private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);
//comment
//comment
}

if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;
}

<start>if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}
}<end>

return revokePermissionAndAppOp(packageName, permission, context);
}","private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);
//comment
//comment
}

if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;
}

if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
<start>if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}<end>
}

return revokePermissionAndAppOp(packageName, permission, context);
}"
39,"     static void downloadFinished(final Context context, final Intent intent) {
//comment
final long fileId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, NOT_AN_ID);
PrivateLog.log(""Download finished with id "" + fileId);
Utils.l(""DownloadFinished with id"", fileId);
if (NOT_AN_ID == fileId) return;

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
final CompletedDownloadInfo downloadInfo = getCompletedDownloadInfo(manager, fileId);

final ArrayList<DownloadRecord> recordList =
getDownloadRecordsForCompletedDownloadInfo(context, downloadInfo);
if (null == recordList) return;
Utils.l(""Received result for download "", fileId);

//comment
//comment
//comment
//comment

<start>for (final DownloadRecord record : recordList) {
//comment
boolean downloadSuccessful = false;
try {
if (downloadInfo.wasSuccessful()) {
downloadSuccessful = handleDownloadedFile(context, record, manager, fileId);
}
} finally {
if (record.isMetadata()) {
publishUpdateMetadataCompleted(context, downloadSuccessful);
} else {
final SQLiteDatabase db = MetadataDbHelper.getDb(context, record.mClientId);
publishUpdateWordListCompleted(context, downloadSuccessful, fileId,
db, record.mAttributes, record.mClientId);
}
}
}
//comment
manager.remove(fileId);<end>
}","     static void downloadFinished(final Context context, final Intent intent) {
//comment
final long fileId = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, NOT_AN_ID);
PrivateLog.log(""Download finished with id "" + fileId);
Utils.l(""DownloadFinished with id"", fileId);
if (NOT_AN_ID == fileId) return;

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
final CompletedDownloadInfo downloadInfo = getCompletedDownloadInfo(manager, fileId);

final ArrayList<DownloadRecord> recordList =
getDownloadRecordsForCompletedDownloadInfo(context, downloadInfo);
if (null == recordList) return;
Utils.l(""Received result for download "", fileId);

//comment
//comment
//comment
//comment

for (final DownloadRecord record : recordList) {
//comment
boolean downloadSuccessful = false;
try {
if (downloadInfo.wasSuccessful()) {
downloadSuccessful = handleDownloadedFile(context, record, manager, fileId);
}
} finally {
if (record.isMetadata()) {
publishUpdateMetadataCompleted(context, downloadSuccessful);
} else {
final SQLiteDatabase db = MetadataDbHelper.getDb(context, record.mClientId);
publishUpdateWordListCompleted(context, downloadSuccessful, fileId,
db, record.mAttributes, record.mClientId);
}
}
}
//comment
<start>manager.remove(fileId);<end>
}"
42,"private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
<start>final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);<end>

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}","private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
<start>final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);<end>

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}"
44,"@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
//comment
final Resources res = getActivity().getResources();
final LayoutInflater dialogInflater = (LayoutInflater)getActivity()
.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
final String callingActivity = getArguments().getString(
VCardCommonArguments.ARG_CALLING_ACTIVITY);

//comment
final ArrayAdapter<AdapterEntry> adapter = new ArrayAdapter<AdapterEntry>(getActivity(),
R.layout.select_dialog_item) {
@Override
public View getView(int position, View convertView, ViewGroup parent) {
final View result = convertView != null ? convertView :
dialogInflater.inflate(R.layout.select_dialog_item, parent, false);

final TextView text = (TextView) result.findViewById(R.id.primary_text);
final View secondaryText = result.findViewById(R.id.secondary_text);
secondaryText.setVisibility(View.GONE);

text.setText(getItem(position).mLabel);
return result;
}
};

if (res.getBoolean(R.bool.config_allow_export)) {
adapter.add(new AdapterEntry(getString(R.string.export_to_vcf_file),
R.string.export_to_vcf_file));
}
if (res.getBoolean(R.bool.config_allow_share_contacts)) {
if (mExportMode == EXPORT_MODE_FAVORITES) {
//comment
adapter.add(new AdapterEntry(getString(R.string.share_favorite_contacts),
R.string.share_contacts));
} else {
//comment
//comment
adapter.add(new AdapterEntry(getString(R.string.share_contacts),
R.string.share_contacts));
}
}

final DialogInterface.OnClickListener clickListener =
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
boolean dismissDialog;
final int resId = adapter.getItem(which).mChoiceResourceId;
if (resId == R.string.export_to_vcf_file) {
dismissDialog = true;
final Intent exportIntent = new Intent(
getActivity(), ExportVCardActivity.class);
exportIntent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
callingActivity);
getActivity().startActivity(exportIntent);
} else if (resId == R.string.share_contacts) {
dismissDialog = true;
if (mExportMode == EXPORT_MODE_FAVORITES) {
doShareFavoriteContacts();
} else {
final Intent exportIntent = new Intent(
getActivity(), ShareVCardActivity.class);
exportIntent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
callingActivity);
getActivity().startActivity(exportIntent);
}
} else {
dismissDialog = true;
Log.e(TAG, ""Unexpected resource: ""
+ getActivity().getResources().getResourceEntryName(resId));
}
if (dismissDialog) {
dialog.dismiss();
}
}
};
final TextView title = (TextView) View.inflate(getActivity(), R.layout.dialog_title, null);
title.setText(R.string.dialog_export);
return new AlertDialog.Builder(getActivity())
.setCustomTitle(title)
.setSingleChoiceItems(adapter, -1, clickListener)
.create();
}","@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
//comment
final Resources res = getActivity().getResources();
final LayoutInflater dialogInflater = (LayoutInflater)getActivity()
.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
final String callingActivity = getArguments().getString(
VCardCommonArguments.ARG_CALLING_ACTIVITY);

//comment
final ArrayAdapter<AdapterEntry> adapter = new ArrayAdapter<AdapterEntry>(getActivity(),
R.layout.select_dialog_item) {
@Override
public View getView(int position, View convertView, ViewGroup parent) {
final View result = convertView != null ? convertView :
dialogInflater.inflate(R.layout.select_dialog_item, parent, false);

final TextView text = (TextView) result.findViewById(R.id.primary_text);
final View secondaryText = result.findViewById(R.id.secondary_text);
secondaryText.setVisibility(View.GONE);

text.setText(getItem(position).mLabel);
return result;
}
};

if (res.getBoolean(R.bool.config_allow_export)) {
adapter.add(new AdapterEntry(getString(R.string.export_to_vcf_file),
R.string.export_to_vcf_file));
}
if (res.getBoolean(R.bool.config_allow_share_contacts)) {
if (mExportMode == EXPORT_MODE_FAVORITES) {
//comment
<start>adapter.add(new AdapterEntry(getString(R.string.share_favorite_contacts),
R.string.share_contacts));<end>
} else {
//comment
//comment
adapter.add(new AdapterEntry(getString(R.string.share_contacts),
R.string.share_contacts));
}
}

final DialogInterface.OnClickListener clickListener =
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
boolean dismissDialog;
final int resId = adapter.getItem(which).mChoiceResourceId;
if (resId == R.string.export_to_vcf_file) {
dismissDialog = true;
final Intent exportIntent = new Intent(
getActivity(), ExportVCardActivity.class);
exportIntent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
callingActivity);
getActivity().startActivity(exportIntent);
} else if (resId == R.string.share_contacts) {
dismissDialog = true;
if (mExportMode == EXPORT_MODE_FAVORITES) {
doShareFavoriteContacts();
} else {
final Intent exportIntent = new Intent(
getActivity(), ShareVCardActivity.class);
exportIntent.putExtra(VCardCommonArguments.ARG_CALLING_ACTIVITY,
callingActivity);
getActivity().startActivity(exportIntent);
}
} else {
dismissDialog = true;
Log.e(TAG, ""Unexpected resource: ""
+ getActivity().getResources().getResourceEntryName(resId));
}
if (dismissDialog) {
dialog.dismiss();
}
}
};
final TextView title = (TextView) View.inflate(getActivity(), R.layout.dialog_title, null);
title.setText(R.string.dialog_export);
return new AlertDialog.Builder(getActivity())
.setCustomTitle(title)
.setSingleChoiceItems(adapter, -1, clickListener)
.create();
}"
48,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
<start>if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}<end>

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
<start>if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}<end>

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}"
49,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);<end>

//comment
//comment
//comment
<start>btPhone = app.getBluetoothPhoneService();<end>
if (btPhone != null) {
<start>try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}<end>
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
<start>btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}<end>
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
50,"public void persistChanges(boolean mayKillBecauseOfAppOpsChange, String revokeReason) {
int uid = mPackageInfo.applicationInfo.uid;

int numPermissions = mPermissions.size();
boolean shouldKillApp = false;

for (int i = 0; i < numPermissions; i++) {
Permission permission = mPermissions.valueAt(i);

if (!permission.isSystemFixed()) {
if (permission.isGranted()) {
mPackageManager.grantRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle);
} else {
boolean isCurrentlyGranted = mContext.checkPermission(permission.getName(), -1,
uid) == PERMISSION_GRANTED;

if (isCurrentlyGranted) {
if (revokeReason == null) {
mPackageManager.revokeRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle);
} else {
mPackageManager.revokeRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle, revokeReason);
}
}
}
}

int flags = (permission.isUserSet() ? PackageManager.FLAG_PERMISSION_USER_SET : 0)
| (permission.isUserFixed() ? PackageManager.FLAG_PERMISSION_USER_FIXED : 0)
| (permission.isRevokedCompat()
? PackageManager.FLAG_PERMISSION_REVOKED_COMPAT : 0)
| (permission.isPolicyFixed() ? PackageManager.FLAG_PERMISSION_POLICY_FIXED : 0)
| (permission.isReviewRequired()
? PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED : 0)
| (permission.isOneTime() ? PackageManager.FLAG_PERMISSION_ONE_TIME : 0);

mPackageManager.updatePermissionFlags(permission.getName(),
mPackageInfo.packageName,
PackageManager.FLAG_PERMISSION_USER_SET
| PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_REVOKED_COMPAT
| PackageManager.FLAG_PERMISSION_POLICY_FIXED
| (permission.isReviewRequired()
? 0 : PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED)
| PackageManager.FLAG_PERMISSION_ONE_TIME
| PackageManager.FLAG_PERMISSION_AUTO_REVOKED,
flags, mUserHandle);

if (permission.affectsAppOp()) {
if (!permission.isSystemFixed()) {
//comment
//comment
//comment
if (permission.isAppOpAllowed()) {
<start>shouldKillApp |= allowAppOp(permission, uid);
} else {
shouldKillApp |= disallowAppOp(permission, uid);<end>
}
}
}
}

if (mayKillBecauseOfAppOpsChange && shouldKillApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}

if (mTriggerLocationAccessCheckOnPersist) {
new LocationAccessCheck(mContext, null).checkLocationAccessSoon();
mTriggerLocationAccessCheckOnPersist = false;
}

String packageName = mPackageInfo.packageName;
if (isOneTime() && areRuntimePermissionsGranted()) {
mContext.getSystemService(PermissionManager.class)
.startOneTimePermissionSession(packageName,
Utils.getOneTimePermissionsTimeout(),
ONE_TIME_PACKAGE_IMPORTANCE_LEVEL_TO_RESET_TIMER,
ONE_TIME_PACKAGE_IMPORTANCE_LEVEL_TO_KEEP_SESSION_ALIVE);
} else if (!Utils.hasOneTimePermissions(mContext, packageName)) {
mContext.getSystemService(PermissionManager.class)
.stopOneTimePermissionSession(packageName);
}
}","public void persistChanges(boolean mayKillBecauseOfAppOpsChange, String revokeReason) {
int uid = mPackageInfo.applicationInfo.uid;

int numPermissions = mPermissions.size();
boolean shouldKillApp = false;

for (int i = 0; i < numPermissions; i++) {
Permission permission = mPermissions.valueAt(i);

if (!permission.isSystemFixed()) {
if (permission.isGranted()) {
mPackageManager.grantRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle);
} else {
boolean isCurrentlyGranted = mContext.checkPermission(permission.getName(), -1,
uid) == PERMISSION_GRANTED;

if (isCurrentlyGranted) {
if (revokeReason == null) {
mPackageManager.revokeRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle);
} else {
mPackageManager.revokeRuntimePermission(mPackageInfo.packageName,
permission.getName(), mUserHandle, revokeReason);
}
}
}
}

int flags = (permission.isUserSet() ? PackageManager.FLAG_PERMISSION_USER_SET : 0)
| (permission.isUserFixed() ? PackageManager.FLAG_PERMISSION_USER_FIXED : 0)
| (permission.isRevokedCompat()
? PackageManager.FLAG_PERMISSION_REVOKED_COMPAT : 0)
| (permission.isPolicyFixed() ? PackageManager.FLAG_PERMISSION_POLICY_FIXED : 0)
| (permission.isReviewRequired()
? PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED : 0)
| (permission.isOneTime() ? PackageManager.FLAG_PERMISSION_ONE_TIME : 0);

mPackageManager.updatePermissionFlags(permission.getName(),
mPackageInfo.packageName,
PackageManager.FLAG_PERMISSION_USER_SET
| PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_REVOKED_COMPAT
| PackageManager.FLAG_PERMISSION_POLICY_FIXED
| (permission.isReviewRequired()
? 0 : PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED)
| PackageManager.FLAG_PERMISSION_ONE_TIME
| PackageManager.FLAG_PERMISSION_AUTO_REVOKED,
flags, mUserHandle);

if (permission.affectsAppOp()) {
if (!permission.isSystemFixed()) {
//comment
//comment
//comment
<start>if (permission.isAppOpAllowed()) {
shouldKillApp |= allowAppOp(permission, uid);
} else {
shouldKillApp |= disallowAppOp(permission, uid);
}<end>
}
}
}

if (mayKillBecauseOfAppOpsChange && shouldKillApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}

if (mTriggerLocationAccessCheckOnPersist) {
new LocationAccessCheck(mContext, null).checkLocationAccessSoon();
mTriggerLocationAccessCheckOnPersist = false;
}

String packageName = mPackageInfo.packageName;
if (isOneTime() && areRuntimePermissionsGranted()) {
mContext.getSystemService(PermissionManager.class)
.startOneTimePermissionSession(packageName,
Utils.getOneTimePermissionsTimeout(),
ONE_TIME_PACKAGE_IMPORTANCE_LEVEL_TO_RESET_TIMER,
ONE_TIME_PACKAGE_IMPORTANCE_LEVEL_TO_KEEP_SESSION_ALIVE);
} else if (!Utils.hasOneTimePermissions(mContext, packageName)) {
mContext.getSystemService(PermissionManager.class)
.stopOneTimePermissionSession(packageName);
}
}"
51,"public static int calculateMinimumAlpha(@ColorInt int foreground, @ColorInt int background,
float minContrastRatio) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}

//comment
<start>int testForeground = setAlphaComponent(foreground, 255);
double testRatio = calculateContrast(testForeground, background);<end>
if (testRatio < minContrastRatio) {
//comment
return -1;
}

//comment
int numIterations = 0;
int minAlpha = 0;
int maxAlpha = 255;

while (numIterations <= MIN_ALPHA_SEARCH_MAX_ITERATIONS &&
(maxAlpha - minAlpha) > MIN_ALPHA_SEARCH_PRECISION) {
final int testAlpha = (minAlpha + maxAlpha) / 2;

testForeground = setAlphaComponent(foreground, testAlpha);
testRatio = calculateContrast(testForeground, background);

if (testRatio < minContrastRatio) {
minAlpha = testAlpha;
} else {
maxAlpha = testAlpha;
}

numIterations++;
}

//comment
return maxAlpha;
}","public static int calculateMinimumAlpha(@ColorInt int foreground, @ColorInt int background,
float minContrastRatio) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}

//comment
<start>int testForeground = setAlphaComponent(foreground, 255);
double testRatio = calculateContrast(testForeground, background);
if (testRatio < minContrastRatio) {<end>
//comment
return -1;
}

//comment
int numIterations = 0;
int minAlpha = 0;
int maxAlpha = 255;

while (numIterations <= MIN_ALPHA_SEARCH_MAX_ITERATIONS &&
(maxAlpha - minAlpha) > MIN_ALPHA_SEARCH_PRECISION) {
final int testAlpha = (minAlpha + maxAlpha) / 2;

testForeground = setAlphaComponent(foreground, testAlpha);
testRatio = calculateContrast(testForeground, background);

if (testRatio < minContrastRatio) {
minAlpha = testAlpha;
} else {
maxAlpha = testAlpha;
}

numIterations++;
}

//comment
return maxAlpha;
}"
52,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
<start>if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}<end>
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
<start>if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;<end>
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
54,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
<start>app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);<end>

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
<start>app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);<end>

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
56,"    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
<start>PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);<end>
}","    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
<start>PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);<end>
}"
57,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
<start>mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);<end>
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
<start>mTextIn.setText("""", BufferType.EDITABLE);<end>
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
59,"void restore(@NonNull Context context, @NonNull PackageInfo pkgInfo) {
AppPermissions appPerms = new AppPermissions(context, pkgInfo, false, true, null);

//comment
//comment
<start>int numPerms = mPermissionsToRestore.size();
for (int i = 0; i < numPerms; i++) {
mPermissionsToRestore.get(i).restore(appPerms, false);
}
for (int i = 0; i < numPerms; i++) {
mPermissionsToRestore.get(i).restore(appPerms, true);
}<end>

int numGroups = appPerms.getPermissionGroups().size();
for (int i = 0; i < numGroups; i++) {
AppPermissionGroup group = appPerms.getPermissionGroups().get(i);

//comment
if (group.areRuntimePermissionsGranted()) {
group.setUserFixed(false);
}

AppPermissionGroup bgGroup = group.getBackgroundPermissions();
if (bgGroup != null) {
//comment
if (bgGroup.areRuntimePermissionsGranted()) {
bgGroup.setUserFixed(false);
}
}
}

appPerms.persistChanges(true);
}","void restore(@NonNull Context context, @NonNull PackageInfo pkgInfo) {
AppPermissions appPerms = new AppPermissions(context, pkgInfo, false, true, null);

//comment
//comment
<start>int numPerms = mPermissionsToRestore.size();
for (int i = 0; i < numPerms; i++) {
mPermissionsToRestore.get(i).restore(appPerms, false);
}
for (int i = 0; i < numPerms; i++) {
mPermissionsToRestore.get(i).restore(appPerms, true);
}<end>

int numGroups = appPerms.getPermissionGroups().size();
for (int i = 0; i < numGroups; i++) {
AppPermissionGroup group = appPerms.getPermissionGroups().get(i);

//comment
if (group.areRuntimePermissionsGranted()) {
group.setUserFixed(false);
}

AppPermissionGroup bgGroup = group.getBackgroundPermissions();
if (bgGroup != null) {
//comment
if (bgGroup.areRuntimePermissionsGranted()) {
bgGroup.setUserFixed(false);
}
}
}

appPerms.persistChanges(true);
}"
61,"    private static void updateClientsWithMetadataUri(final Context context,
final boolean updateNow, final String metadataUri) {
PrivateLog.log(""Update for metadata URI "" + Utils.s(metadataUri));
//comment
//comment
//comment
final String disambiguator = ""#"" + System.currentTimeMillis()
+ com.android.inputmethod.latin.Utils.getVersionName(context) + "".json"";
final Request metadataRequest = new Request(Uri.parse(metadataUri + disambiguator));
Utils.l(""Request ="", metadataRequest);

final Resources res = context.getResources();
//comment
if (!updateNow) {
<start>final boolean allowedOverMetered = res.getBoolean(R.bool.allow_over_metered);<end>
//comment
if (DownloadManagerCompatUtils.hasSetAllowedOverMetered()) {
DownloadManagerCompatUtils.setAllowedOverMetered(metadataRequest,
allowedOverMetered);
} else if (!allowedOverMetered) {
metadataRequest.setAllowedNetworkTypes(Request.NETWORK_WIFI);
}
metadataRequest.setAllowedOverRoaming(res.getBoolean(R.bool.allow_over_roaming));
}
final boolean notificationVisible = updateNow
? res.getBoolean(R.bool.display_notification_for_user_requested_update)
: res.getBoolean(R.bool.display_notification_for_auto_update);

metadataRequest.setTitle(res.getString(R.string.download_description));
metadataRequest.setNotificationVisibility(notificationVisible
? Request.VISIBILITY_VISIBLE : Request.VISIBILITY_HIDDEN);
metadataRequest.setVisibleInDownloadsUi(
res.getBoolean(R.bool.metadata_downloads_visible_in_download_UI));

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
if (null == manager) {
//comment
//comment
return;
}
cancelUpdateWithDownloadManager(context, metadataUri, manager);
final long downloadId;
synchronized (sSharedIdProtector) {
downloadId = manager.enqueue(metadataRequest);
Utils.l(""Metadata download requested with id"", downloadId);
//comment
//comment
//comment
//comment
//comment
writeMetadataDownloadId(context, metadataUri, downloadId);
}
PrivateLog.log(""Requested download with id "" + downloadId);
}","    private static void updateClientsWithMetadataUri(final Context context,
final boolean updateNow, final String metadataUri) {
PrivateLog.log(""Update for metadata URI "" + Utils.s(metadataUri));
//comment
//comment
//comment
final String disambiguator = ""#"" + System.currentTimeMillis()
+ com.android.inputmethod.latin.Utils.getVersionName(context) + "".json"";
final Request metadataRequest = new Request(Uri.parse(metadataUri + disambiguator));
Utils.l(""Request ="", metadataRequest);

final Resources res = context.getResources();
//comment
<start>if (!updateNow) {<end>
final boolean allowedOverMetered = res.getBoolean(R.bool.allow_over_metered);
//comment
<start>if (DownloadManagerCompatUtils.hasSetAllowedOverMetered()) {
DownloadManagerCompatUtils.setAllowedOverMetered(metadataRequest,
allowedOverMetered);
} else if (!allowedOverMetered) {
metadataRequest.setAllowedNetworkTypes(Request.NETWORK_WIFI);
}
metadataRequest.setAllowedOverRoaming(res.getBoolean(R.bool.allow_over_roaming));
}<end>
final boolean notificationVisible = updateNow
? res.getBoolean(R.bool.display_notification_for_user_requested_update)
: res.getBoolean(R.bool.display_notification_for_auto_update);

metadataRequest.setTitle(res.getString(R.string.download_description));
metadataRequest.setNotificationVisibility(notificationVisible
? Request.VISIBILITY_VISIBLE : Request.VISIBILITY_HIDDEN);
metadataRequest.setVisibleInDownloadsUi(
res.getBoolean(R.bool.metadata_downloads_visible_in_download_UI));

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
if (null == manager) {
//comment
//comment
return;
}
cancelUpdateWithDownloadManager(context, metadataUri, manager);
final long downloadId;
synchronized (sSharedIdProtector) {
downloadId = manager.enqueue(metadataRequest);
Utils.l(""Metadata download requested with id"", downloadId);
//comment
//comment
//comment
//comment
//comment
writeMetadataDownloadId(context, metadataUri, downloadId);
}
PrivateLog.log(""Requested download with id "" + downloadId);
}"
63,"    private void startMonitorSubscriptionChange(SubscriptionManager mgr) {
if (mgr == null) {
return;
}
//comment
mSubscriptionsChangedListener = new OnSubscriptionsChangedListener(
Looper.getMainLooper()) {
@Override
public void onSubscriptionsChanged() {
SubscriptionManager mgr = getSubscriptionManager();
if (isSubscriptionRemainActive(mgr, mSubId)) {
<start>return;<end>
}
//comment
Log.w(TAG, ""subId "" + mSubId + "" no longer active."");
stopMonitorSubscriptionChange(mgr);
<start>mActivity.finish();<end>
}
};
mgr.addOnSubscriptionsChangedListener(
mActivity.getMainExecutor(), mSubscriptionsChangedListener);
}","    private void startMonitorSubscriptionChange(SubscriptionManager mgr) {
if (mgr == null) {
return;
}
//comment
mSubscriptionsChangedListener = new OnSubscriptionsChangedListener(
Looper.getMainLooper()) {
@Override
public void onSubscriptionsChanged() {
<start>SubscriptionManager mgr = getSubscriptionManager();
if (isSubscriptionRemainActive(mgr, mSubId)) {
return;
}<end>
//comment
Log.w(TAG, ""subId "" + mSubId + "" no longer active."");
<start>stopMonitorSubscriptionChange(mgr);
mActivity.finish();<end>
}
};
mgr.addOnSubscriptionsChangedListener(
mActivity.getMainExecutor(), mSubscriptionsChangedListener);
}"
66,"private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
<start>final Intent intent = new Intent(context, MmsWidgetService.class);<end>
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}","private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
<start>final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);<end>

<start>remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));<end>

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}"
70,"private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
<start>int id = (int) header.id;<end>

//comment
if (target.get(i) == header) {
//comment
//comment
if (mFirstHeader == null &&
HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
mFirstHeader = header;
}
mHeaderIndexMap.put(id, i);
i++;
}
}
}","private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
<start>int id = (int) header.id;<end>

//comment
if (target.get(i) == header) {
//comment
//comment
if (mFirstHeader == null &&
HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
mFirstHeader = header;
}
mHeaderIndexMap.put(id, i);
i++;
}
}
}"
71,"    public void logCall(CallerInfo ci, String number, int presentation, int callType, long start,
long duration) {
final boolean isEmergencyNumber = PhoneNumberUtils.isLocalEmergencyNumber(number,
mApplication);

//comment
//comment
//comment
//comment
final boolean okToLogEmergencyNumber =
mApplication.getResources().getBoolean(
R.bool.allow_emergency_numbers_in_call_log);

//comment
<start>boolean isOkToLogThisCall = !isEmergencyNumber || okToLogEmergencyNumber;<end>

if (isOkToLogThisCall) {
if (DBG) {
log(""sending Calllog entry: "" + ci + "", "" + PhoneUtils.toLogSafePhoneNumber(number)
+ "","" + presentation + "", "" + callType + "", "" + start + "", "" + duration);
}

CallLogAsync.AddCallArgs args = new CallLogAsync.AddCallArgs(mApplication, ci, number,
presentation, callType, start, duration);
mCallLog.addCall(args);
}
}","    public void logCall(CallerInfo ci, String number, int presentation, int callType, long start,
long duration) {
final boolean isEmergencyNumber = PhoneNumberUtils.isLocalEmergencyNumber(number,
mApplication);

//comment
//comment
//comment
//comment
final boolean okToLogEmergencyNumber =
mApplication.getResources().getBoolean(
R.bool.allow_emergency_numbers_in_call_log);

//comment
<start>boolean isOkToLogThisCall = !isEmergencyNumber || okToLogEmergencyNumber;<end>

if (isOkToLogThisCall) {
if (DBG) {
log(""sending Calllog entry: "" + ci + "", "" + PhoneUtils.toLogSafePhoneNumber(number)
+ "","" + presentation + "", "" + callType + "", "" + start + "", "" + duration);
}

CallLogAsync.AddCallArgs args = new CallLogAsync.AddCallArgs(mApplication, ci, number,
presentation, callType, start, duration);
mCallLog.addCall(args);
}
}"
74,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
<start>Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);<end>
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
<start>Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);<end>
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
76,"        public static AppViewHolder createOrRecycle(LayoutInflater inflater, View convertView) {
if (convertView == null) {
convertView = inflater.inflate(R.layout.ad_excluded_app_item, null);

//comment
//comment
AppViewHolder holder = new AppViewHolder();
holder.rootView = convertView;
holder.appName = (TextView) convertView.findViewById(R.id.app_name);
holder.appIcon = (ImageView) convertView.findViewById(R.id.app_icon);
holder.checkBox = (CheckBox) convertView.findViewById(android.R.id.checkbox);
convertView.setTag(holder);
return holder;
} else {
//comment
//comment
<start>return (AppViewHolder)convertView.getTag();<end>
}
}","        public static AppViewHolder createOrRecycle(LayoutInflater inflater, View convertView) {
if (convertView == null) {
convertView = inflater.inflate(R.layout.ad_excluded_app_item, null);

//comment
//comment
AppViewHolder holder = new AppViewHolder();
holder.rootView = convertView;
holder.appName = (TextView) convertView.findViewById(R.id.app_name);
holder.appIcon = (ImageView) convertView.findViewById(R.id.app_icon);
holder.checkBox = (CheckBox) convertView.findViewById(android.R.id.checkbox);
convertView.setTag(holder);
return holder;
} else {
//comment
//comment
<start>return (AppViewHolder)convertView.getTag();<end>
}
}"
78,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
<start>setMute(false);<end>

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
<start>setMute(false);<end>

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
80,"    @Override
public void onCreate() {
//comment
//comment
//comment
//comment

//comment
//comment
//comment

<start>HandlerThread thread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
thread.start();<end>

mServiceLooper = thread.getLooper();
mServiceHandler = new ServiceHandler(mServiceLooper);
}","    @Override
public void onCreate() {
//comment
//comment
//comment
//comment

//comment
//comment
//comment

<start>HandlerThread thread = new HandlerThread(TAG, Process.THREAD_PRIORITY_BACKGROUND);
thread.start();<end>

mServiceLooper = thread.getLooper();
mServiceHandler = new ServiceHandler(mServiceLooper);
}"
81,"    boolean shouldOverrideUrlLoading(Tab tab, WebView view, String url) {
if (view.isPrivateBrowsingEnabled()) {
//comment
//comment
return false;
}

if (url.startsWith(SCHEME_WTAI)) {
//comment
//comment
if (url.startsWith(SCHEME_WTAI_MC)) {
Intent intent = new Intent(Intent.ACTION_VIEW,
Uri.parse(WebView.SCHEME_TEL +
url.substring(SCHEME_WTAI_MC.length())));
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
//comment
//comment
if (url.startsWith(SCHEME_WTAI_SD)) {
//comment
return false;
}
//comment
//comment
//comment
if (url.startsWith(SCHEME_WTAI_AP)) {
//comment
return false;
}
}

//comment
//comment
if (url.startsWith(""about:"")) {
return false;
}

//comment
//comment
if (rlzProviderPresent()) {
Uri siteUri = Uri.parse(url);
if (needsRlzString(siteUri)) {
//comment
//comment
//comment
//comment
new RLZTask(tab, siteUri, view).execute();
<start>return true;<end>
}
}

if (startActivityForUrl(tab, url)) {
return true;
}

if (handleMenuClick(tab, url)) {
return true;
}

return false;
}","    boolean shouldOverrideUrlLoading(Tab tab, WebView view, String url) {
if (view.isPrivateBrowsingEnabled()) {
//comment
//comment
return false;
}

if (url.startsWith(SCHEME_WTAI)) {
//comment
//comment
if (url.startsWith(SCHEME_WTAI_MC)) {
Intent intent = new Intent(Intent.ACTION_VIEW,
Uri.parse(WebView.SCHEME_TEL +
url.substring(SCHEME_WTAI_MC.length())));
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
//comment
//comment
if (url.startsWith(SCHEME_WTAI_SD)) {
//comment
return false;
}
//comment
//comment
//comment
if (url.startsWith(SCHEME_WTAI_AP)) {
//comment
return false;
}
}

//comment
//comment
if (url.startsWith(""about:"")) {
return false;
}

//comment
//comment
<start>if (rlzProviderPresent()) {<end>
Uri siteUri = Uri.parse(url);
if (needsRlzString(siteUri)) {
//comment
//comment
//comment
//comment
new RLZTask(tab, siteUri, view).execute();
return true;
}
}

if (startActivityForUrl(tab, url)) {
return true;
}

if (handleMenuClick(tab, url)) {
return true;
}

return false;
}"
82,"@Override
public Bundle respond(Bundle params) {
final String setVisibilityKey =
UIProvider.ConversationCursorCommand.COMMAND_KEY_SET_VISIBILITY;
if (params.containsKey(setVisibilityKey)) {
final boolean visible = params.getBoolean(setVisibilityKey);
if (visible) {
//comment
<start>markContentsSeen();<end>
if (params.containsKey(
UIProvider.ConversationCursorCommand.COMMAND_KEY_ENTERED_FOLDER)) {
Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, mMailboxId);
if (mailbox != null) {
//comment
//comment
//comment
//comment
if (mailbox.mSyncInterval == 0) {
final long timeSinceLastSync =
System.currentTimeMillis() - mailbox.mSyncTime;
if (timeSinceLastSync > AUTO_REFRESH_INTERVAL_MS) {
final ContentResolver resolver = mContext.getContentResolver();
final Uri refreshUri = Uri.parse(EmailContent.CONTENT_URI +
""/"" + EmailProvider.QUERY_UIREFRESH + ""/"" + mailbox.mId);
resolver.query(refreshUri, null, null, null, null);
}
}
}
}
}
}
//comment
final Bundle response = new Bundle(2);

response.putString(setVisibilityKey,
UIProvider.ConversationCursorCommand.COMMAND_RESPONSE_OK);

final String rawFoldersKey =
UIProvider.ConversationCursorCommand.COMMAND_GET_RAW_FOLDERS;
if (params.containsKey(rawFoldersKey)) {
response.putParcelable(rawFoldersKey, mFolderList);
}

final String convInfoKey =
UIProvider.ConversationCursorCommand.COMMAND_GET_CONVERSATION_INFO;
if (params.containsKey(convInfoKey)) {
response.putParcelable(convInfoKey, generateConversationInfo());
}

return response;
}","@Override
public Bundle respond(Bundle params) {
final String setVisibilityKey =
UIProvider.ConversationCursorCommand.COMMAND_KEY_SET_VISIBILITY;
if (params.containsKey(setVisibilityKey)) {
final boolean visible = params.getBoolean(setVisibilityKey);
if (visible) {
//comment
<start>markContentsSeen();<end>
if (params.containsKey(
UIProvider.ConversationCursorCommand.COMMAND_KEY_ENTERED_FOLDER)) {
Mailbox mailbox = Mailbox.restoreMailboxWithId(mContext, mMailboxId);
if (mailbox != null) {
//comment
//comment
//comment
//comment
if (mailbox.mSyncInterval == 0) {
final long timeSinceLastSync =
System.currentTimeMillis() - mailbox.mSyncTime;
if (timeSinceLastSync > AUTO_REFRESH_INTERVAL_MS) {
final ContentResolver resolver = mContext.getContentResolver();
final Uri refreshUri = Uri.parse(EmailContent.CONTENT_URI +
""/"" + EmailProvider.QUERY_UIREFRESH + ""/"" + mailbox.mId);
resolver.query(refreshUri, null, null, null, null);
}
}
}
}
}
}
//comment
final Bundle response = new Bundle(2);

response.putString(setVisibilityKey,
UIProvider.ConversationCursorCommand.COMMAND_RESPONSE_OK);

final String rawFoldersKey =
UIProvider.ConversationCursorCommand.COMMAND_GET_RAW_FOLDERS;
if (params.containsKey(rawFoldersKey)) {
response.putParcelable(rawFoldersKey, mFolderList);
}

final String convInfoKey =
UIProvider.ConversationCursorCommand.COMMAND_GET_CONVERSATION_INFO;
if (params.containsKey(convInfoKey)) {
response.putParcelable(convInfoKey, generateConversationInfo());
}

return response;
}"
83,"private String getContentLocation(Context context, Uri uri)
throws MmsException {
Cursor cursor = SqliteWrapper.query(context, context.getContentResolver(),
uri, PROJECTION, null, null, null);
mLocked = false;

if (cursor != null) {
try {
if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
//comment
//comment
<start>mLocked = cursor.getInt(COLUMN_LOCKED) == 1;<end>
return cursor.getString(COLUMN_CONTENT_LOCATION);
}
} finally {
cursor.close();
}
}

throw new MmsException(""Cannot get X-Mms-Content-Location from: "" + uri);
}","private String getContentLocation(Context context, Uri uri)
throws MmsException {
Cursor cursor = SqliteWrapper.query(context, context.getContentResolver(),
uri, PROJECTION, null, null, null);
mLocked = false;

if (cursor != null) {
try {
if ((cursor.getCount() == 1) && cursor.moveToFirst()) {
//comment
//comment
<start>mLocked = cursor.getInt(COLUMN_LOCKED) == 1;
return cursor.getString(COLUMN_CONTENT_LOCATION);<end>
}
} finally {
cursor.close();
}
}

throw new MmsException(""Cannot get X-Mms-Content-Location from: "" + uri);
}"
88,"private void inflateInitialEntries(LayoutInflater layoutInflater) {
//comment
if (mCollapsedEntriesCount == mNumEntries) {
<start>inflateAllEntries(layoutInflater);<end>
} else {
//comment
//comment
int numInflated = 0;
int extraEntries = mCollapsedEntriesCount - mEntries.size();
for (int i = 0; i < mEntries.size() && numInflated < mCollapsedEntriesCount; i++) {
List<Entry> entryList = mEntries.get(i);
List<View> entryViewList = mEntryViews.get(i);

entryViewList.add(createEntryView(layoutInflater, entryList.get(0),
View.VISIBLE));
numInflated++;

//comment
for (int j = 1; j < entryList.size() && numInflated < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
entryViewList.add(createEntryView(layoutInflater, entryList.get(j),
View.INVISIBLE));
numInflated++;
extraEntries--;
}
}
}
}","private void inflateInitialEntries(LayoutInflater layoutInflater) {
//comment
<start>if (mCollapsedEntriesCount == mNumEntries) {
inflateAllEntries(layoutInflater);
} else {<end>
//comment
//comment
int numInflated = 0;
int extraEntries = mCollapsedEntriesCount - mEntries.size();
for (int i = 0; i < mEntries.size() && numInflated < mCollapsedEntriesCount; i++) {
List<Entry> entryList = mEntries.get(i);
List<View> entryViewList = mEntryViews.get(i);

entryViewList.add(createEntryView(layoutInflater, entryList.get(0),
View.VISIBLE));
numInflated++;

//comment
for (int j = 1; j < entryList.size() && numInflated < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
entryViewList.add(createEntryView(layoutInflater, entryList.get(j),
View.INVISIBLE));
numInflated++;
extraEntries--;
}
}
}
}"
90,"public void onReceive(Context context, Intent intent) {
int widgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);
if (widgetId == 0) {
return;
}
//comment
if (mWidgets.get(mCurrentPage).getWidgetId() != -1) {
Intent delete = new Intent();
int dealloc = mWidgets.get(mCurrentPage).getWidgetId();
delete.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, dealloc);
delete.setAction(ACTION_DEALLOCATE_ID);
mContext.sendBroadcast(delete);
mWidgets.remove(mCurrentPage);
}
mWidgets.add(mCurrentPage, new NavBarWidget(widgetId));
saveWidgets();
refreshParams();
mViewPager.setCurrentItem(mCurrentPage);
updateSummary(mCurrentPage);
}","public void onReceive(Context context, Intent intent) {
int widgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, -1);
if (widgetId == 0) {
return;
}
//comment
<start>if (mWidgets.get(mCurrentPage).getWidgetId() != -1) {
Intent delete = new Intent();
int dealloc = mWidgets.get(mCurrentPage).getWidgetId();
delete.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, dealloc);
delete.setAction(ACTION_DEALLOCATE_ID);
mContext.sendBroadcast(delete);
mWidgets.remove(mCurrentPage);
}<end>
mWidgets.add(mCurrentPage, new NavBarWidget(widgetId));
saveWidgets();
refreshParams();
mViewPager.setCurrentItem(mCurrentPage);
updateSummary(mCurrentPage);
}"
91,"private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
<start>int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;<end>

<start>if (appOpModeChanged) {
if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}
}<end>
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}
}

return permissionOrAppOpChanged;
}","private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
<start>int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;<end>

if (appOpModeChanged) {
if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}
}

return permissionOrAppOpChanged;
}"
94,"    @Override
public void editUrl(boolean clearInput, boolean forceIME) {
<start>if (mUseQuickControls) {
mTitleBar.setShowProgressOnly(false);
}
//comment
if (mShowNav) return;
super.editUrl(clearInput, forceIME);<end>
}","    @Override
public void editUrl(boolean clearInput, boolean forceIME) {
if (mUseQuickControls) {
mTitleBar.setShowProgressOnly(false);
}
//comment
<start>if (mShowNav) return;<end>
super.editUrl(clearInput, forceIME);
}"
96," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
<start>if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}<end>

//comment
//comment
//comment
//comment
//comment
if ((ringingCall.getState() != Call.State.IDLE)
&& !fgCall.getState().isDialing()) {
//comment
//comment
updateRingingCall(cm);
} else if ((fgCall.getState() != Call.State.IDLE)
|| (bgCall.getState() != Call.State.IDLE)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
} else {
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
<start>if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}<end>

//comment
//comment
//comment
//comment
//comment
if ((ringingCall.getState() != Call.State.IDLE)
&& !fgCall.getState().isDialing()) {
//comment
//comment
updateRingingCall(cm);
} else if ((fgCall.getState() != Call.State.IDLE)
|| (bgCall.getState() != Call.State.IDLE)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
} else {
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"
98,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
<start>DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);<end>

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
99,"@Override
public boolean onOptionsItemSelected(MenuItem item) {
int position = mList.getSelectedItemPosition();

switch (item.getItemId()) {
case MENU_MOVE_UP:
if ((position > 0) && (position < mSlideshowModel.size())) {
mSlideshowEditor.moveSlideUp(position);
mSlideListAdapter.notifyDataSetChanged();
mList.setSelection(position - 1);
}
break;
case MENU_MOVE_DOWN:
if ((position >= 0) && (position < mSlideshowModel.size() - 1)) {
mSlideshowEditor.moveSlideDown(position);
mSlideListAdapter.notifyDataSetChanged();
mList.setSelection(position + 1);
}
break;
case MENU_REMOVE_SLIDE:
if ((position >= 0) && (position < mSlideshowModel.size())) {
mSlideshowEditor.removeSlide(position);
mSlideListAdapter.notifyDataSetChanged();
}
break;
case MENU_ADD_SLIDE:
addNewSlide();
break;
case MENU_DISCARD_SLIDESHOW:
//comment
mSlideshowEditor.removeAllSlides();
<start>mSlideListAdapter.notifyDataSetChanged();<end>
finish();
break;
}

return true;
}","@Override
public boolean onOptionsItemSelected(MenuItem item) {
int position = mList.getSelectedItemPosition();

switch (item.getItemId()) {
case MENU_MOVE_UP:
if ((position > 0) && (position < mSlideshowModel.size())) {
mSlideshowEditor.moveSlideUp(position);
mSlideListAdapter.notifyDataSetChanged();
mList.setSelection(position - 1);
}
break;
case MENU_MOVE_DOWN:
if ((position >= 0) && (position < mSlideshowModel.size() - 1)) {
mSlideshowEditor.moveSlideDown(position);
mSlideListAdapter.notifyDataSetChanged();
mList.setSelection(position + 1);
}
break;
case MENU_REMOVE_SLIDE:
if ((position >= 0) && (position < mSlideshowModel.size())) {
mSlideshowEditor.removeSlide(position);
mSlideListAdapter.notifyDataSetChanged();
}
break;
case MENU_ADD_SLIDE:
addNewSlide();
break;
case MENU_DISCARD_SLIDESHOW:
//comment
<start>mSlideshowEditor.removeAllSlides();<end>
mSlideListAdapter.notifyDataSetChanged();
finish();
break;
}

return true;
}"
103,"public void endLocal(int address, RegisterSpec endedLocal,
Disposition disposition) {
if (DEBUG) {
System.err.printf(""%04x end %s\n"", address, endedLocal);
}

int regNum = endedLocal.getReg();

endedLocal = filterSpec(endedLocal);
aboutToProcess(address, regNum);

int endAt = endIndices[regNum];

if (endAt >= 0) {
//comment
//comment
//comment
//comment
return;
}

//comment
<start>if (checkForEmptyRange(address, endedLocal)) {
return;
}<end>

add(address, disposition, endedLocal);
}","public void endLocal(int address, RegisterSpec endedLocal,
Disposition disposition) {
if (DEBUG) {
System.err.printf(""%04x end %s\n"", address, endedLocal);
}

int regNum = endedLocal.getReg();

endedLocal = filterSpec(endedLocal);
aboutToProcess(address, regNum);

int endAt = endIndices[regNum];

if (endAt >= 0) {
//comment
//comment
//comment
//comment
return;
}

//comment
<start>if (checkForEmptyRange(address, endedLocal)) {
return;
}<end>

add(address, disposition, endedLocal);
}"
104,"<start>public CharSequence getWordAtCursor(String separators) {
//comment
Range r = getWordRangeAtCursor(separators, 0);
return (r == null) ? null : r.mWord;<end>
}","public CharSequence getWordAtCursor(String separators) {
//comment
<start>Range r = getWordRangeAtCursor(separators, 0);
return (r == null) ? null : r.mWord;<end>
}"
105,"    protected boolean isFieldChanged(String column, String value) {
<start>final String dbValue = mEntry.getAsString(column);
//comment
//comment
final String dbValueNoNull = dbValue == null ? """" : dbValue;
final String valueNoNull = value == null ? """" : value;<end>
return !TextUtils.equals(dbValueNoNull, valueNoNull);
}","    protected boolean isFieldChanged(String column, String value) {
final String dbValue = mEntry.getAsString(column);
//comment
//comment
<start>final String dbValueNoNull = dbValue == null ? """" : dbValue;
final String valueNoNull = value == null ? """" : value;
return !TextUtils.equals(dbValueNoNull, valueNoNull);<end>
}"
106,"public CharSequence getWordBeforeCursorIfAtEndOfWord(final SettingsValues settings) {
//comment
//comment
//comment
final CharSequence textAfterCursor = getTextAfterCursor(1, 0);
if (!TextUtils.isEmpty(textAfterCursor)
&& !settings.isWordSeparator(textAfterCursor.charAt(0))) return null;

//comment
//comment
CharSequence word = getWordAtCursor(settings.mWordSeparators);
//comment
//comment
while (!TextUtils.isEmpty(word) && Constants.CODE_SINGLE_QUOTE == word.charAt(0)) {
word = word.subSequence(1, word.length());
}
if (TextUtils.isEmpty(word)) return null;
//comment
final int lastCodePoint = Character.codePointBefore(word, word.length());
//comment
//comment
if (!Character.isDefined(lastCodePoint)) return null;
//comment
//comment
//comment
if (settings.isWordSeparator(lastCodePoint)) return null;
<start>final char firstChar = word.charAt(0);
if (word.length() == 1 && !Character.isLetter(firstChar)) return null;<end>

//comment
//comment
<start>if (!Character.isLetter(firstChar)) return null;<end>

return word;
}","public CharSequence getWordBeforeCursorIfAtEndOfWord(final SettingsValues settings) {
//comment
//comment
//comment
final CharSequence textAfterCursor = getTextAfterCursor(1, 0);
if (!TextUtils.isEmpty(textAfterCursor)
&& !settings.isWordSeparator(textAfterCursor.charAt(0))) return null;

//comment
//comment
CharSequence word = getWordAtCursor(settings.mWordSeparators);
//comment
//comment
while (!TextUtils.isEmpty(word) && Constants.CODE_SINGLE_QUOTE == word.charAt(0)) {
word = word.subSequence(1, word.length());
}
if (TextUtils.isEmpty(word)) return null;
//comment
final int lastCodePoint = Character.codePointBefore(word, word.length());
//comment
//comment
if (!Character.isDefined(lastCodePoint)) return null;
//comment
//comment
//comment
if (settings.isWordSeparator(lastCodePoint)) return null;
final char firstChar = word.charAt(0);
if (word.length() == 1 && !Character.isLetter(firstChar)) return null;

//comment
//comment
<start>if (!Character.isLetter(firstChar)) return null;<end>

return word;
}"
108,"    private void finishAnimationIn() {
if (showingNavScreen()) {
//comment
<start>mNavScreen.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);
mTabControl.setOnThumbnailUpdatedListener(mNavScreen);<end>
}
}","    private void finishAnimationIn() {
if (showingNavScreen()) {
//comment
<start>mNavScreen.sendAccessibilityEvent(AccessibilityEvent.TYPE_WINDOW_STATE_CHANGED);<end>
mTabControl.setOnThumbnailUpdatedListener(mNavScreen);
}
}"
111,"private void saveToDatabase() {
if (mMailbox == null) {
//comment
return;
}
final int syncInterval = mSyncEnabledPref.isChecked() ? 1 : 0;
final int syncLookback = Integer.valueOf(mSyncLookbackPref.getValue());

final boolean syncIntervalChanged = syncInterval != mMailbox.mSyncInterval;
final boolean syncLookbackChanged = syncLookback != mMailbox.mSyncLookback;

//comment
<start>if (!syncIntervalChanged && !syncLookbackChanged) {
return;
}<end>

LogUtils.i(Logging.LOG_TAG, ""Saving mailbox settings..."");
enablePreferences(false);

final long id = mMailbox.mId;
final Context context = getActivity().getApplicationContext();

new EmailAsyncTask<Void, Void, Void> (null ) {
@Override
protected Void doInBackground(Void... params) {
final ContentValues cv = new ContentValues(2);
final Uri uri;
if (syncIntervalChanged) {
cv.put(MailboxColumns.SYNC_INTERVAL, syncInterval);
}
if (syncLookbackChanged) {
cv.put(MailboxColumns.SYNC_LOOKBACK, syncLookback);
}
uri = ContentUris.withAppendedId(Mailbox.CONTENT_URI, id);
context.getContentResolver().update(uri, cv, null, null);

LogUtils.i(Logging.LOG_TAG, ""Saved: "" + uri);
return null;
}
}.executeSerial((Void [])null);
}","private void saveToDatabase() {
if (mMailbox == null) {
//comment
return;
}
final int syncInterval = mSyncEnabledPref.isChecked() ? 1 : 0;
final int syncLookback = Integer.valueOf(mSyncLookbackPref.getValue());

final boolean syncIntervalChanged = syncInterval != mMailbox.mSyncInterval;
final boolean syncLookbackChanged = syncLookback != mMailbox.mSyncLookback;

//comment
<start>if (!syncIntervalChanged && !syncLookbackChanged) {
return;
}<end>

LogUtils.i(Logging.LOG_TAG, ""Saving mailbox settings..."");
enablePreferences(false);

final long id = mMailbox.mId;
final Context context = getActivity().getApplicationContext();

new EmailAsyncTask<Void, Void, Void> (null ) {
@Override
protected Void doInBackground(Void... params) {
final ContentValues cv = new ContentValues(2);
final Uri uri;
if (syncIntervalChanged) {
cv.put(MailboxColumns.SYNC_INTERVAL, syncInterval);
}
if (syncLookbackChanged) {
cv.put(MailboxColumns.SYNC_LOOKBACK, syncLookback);
}
uri = ContentUris.withAppendedId(Mailbox.CONTENT_URI, id);
context.getContentResolver().update(uri, cv, null, null);

LogUtils.i(Logging.LOG_TAG, ""Saved: "" + uri);
return null;
}
}.executeSerial((Void [])null);
}"
112,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
<start>if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}<end>
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
<start>if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}<end>
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
114,"    @Override
public void onDestroy() {
super.onDestroy();
CatLog.d(LOG_TAG, ""onDestroy - before Send End Session mIsResponseSent["" +
mIsResponseSent + "" , "" + mSlotId + ""]"");
if (appService == null) {
<start>return;<end>
}
//comment
//comment
if (!isChangingConfigurations()) {
//comment
//comment
//comment
if (!mIsResponseSent && !appService.isInputPending(mSlotId)) {
<start>CatLog.d(LOG_TAG, ""handleDestroy - Send End Session"");<end>
sendResponse(StkAppService.RES_ID_END_SESSION);
}
}
cancelTimeOut();
}","    @Override
public void onDestroy() {
super.onDestroy();
CatLog.d(LOG_TAG, ""onDestroy - before Send End Session mIsResponseSent["" +
mIsResponseSent + "" , "" + mSlotId + ""]"");
if (appService == null) {
return;
}
//comment
//comment
if (!isChangingConfigurations()) {
//comment
//comment
//comment
<start>if (!mIsResponseSent && !appService.isInputPending(mSlotId)) {
CatLog.d(LOG_TAG, ""handleDestroy - Send End Session"");
sendResponse(StkAppService.RES_ID_END_SESSION);
}<end>
}
cancelTimeOut();
}"
115,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

if (Utils.isMonkeyRunning()) {
finish();
return;
}

//comment
//comment
<start>mProxySubscriptionMgr = ProxySubscriptionManager.getInstance(getContext());<end>
mProxySubscriptionMgr.setLifecycle(getLifecycle());

mTelephonyManager = getContext().getSystemService(TelephonyManager.class);

addPreferencesFromResource(R.xml.sim_lock_settings);

mPinDialog = (EditPinPreference) findPreference(PIN_DIALOG);
mPinToggle = (SwitchPreference) findPreference(PIN_TOGGLE);
if (savedInstanceState != null) {
if (savedInstanceState.containsKey(DIALOG_STATE)
&& restoreDialogStates(savedInstanceState)) {
Log.d(TAG, ""onCreate: restore dialog for slotId="" + mSlotId + "", subId="" + mSubId);
} else if (savedInstanceState.containsKey(CURRENT_TAB)
&& restoreTabFocus(savedInstanceState)) {
Log.d(TAG, ""onCreate: restore focus on slotId="" + mSlotId + "", subId="" + mSubId);
}
}

mPinDialog.setOnPinEnteredListener(this);

//comment
getPreferenceScreen().setPersistent(false);

mRes = getResources();
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

if (Utils.isMonkeyRunning()) {
finish();
return;
}

//comment
//comment
<start>mProxySubscriptionMgr = ProxySubscriptionManager.getInstance(getContext());
mProxySubscriptionMgr.setLifecycle(getLifecycle());<end>

mTelephonyManager = getContext().getSystemService(TelephonyManager.class);

addPreferencesFromResource(R.xml.sim_lock_settings);

mPinDialog = (EditPinPreference) findPreference(PIN_DIALOG);
mPinToggle = (SwitchPreference) findPreference(PIN_TOGGLE);
if (savedInstanceState != null) {
if (savedInstanceState.containsKey(DIALOG_STATE)
&& restoreDialogStates(savedInstanceState)) {
Log.d(TAG, ""onCreate: restore dialog for slotId="" + mSlotId + "", subId="" + mSubId);
} else if (savedInstanceState.containsKey(CURRENT_TAB)
&& restoreTabFocus(savedInstanceState)) {
Log.d(TAG, ""onCreate: restore focus on slotId="" + mSlotId + "", subId="" + mSubId);
}
}

mPinDialog.setOnPinEnteredListener(this);

//comment
getPreferenceScreen().setPersistent(false);

mRes = getResources();
}"
119,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);<end>

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);<end>

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
121,"    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
mApplication.updateInCallScreen();
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}","    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
<start>if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}<end>
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
mApplication.updateInCallScreen();
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}"
123,"@Override
protected Dialog onCreateDialog(int id) {
switch (id) {
case EXIT_ECM_BLOCK_OTHERS:
case EXIT_ECM_DIALOG:
CharSequence text = getDialogText(mEcmTimeout);
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(text)
<start>.setPositiveButton(R.string.alert_dialog_yes,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog,int whichButton) {<end>
//comment
mPhone.exitEmergencyCallbackMode();

//comment
<start>showDialog(EXIT_ECM_PROGRESS_DIALOG);
mTimer.cancel();<end>
}
})
.setNegativeButton(R.string.alert_dialog_no,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_IN_EMERGENCY_CALL_DIALOG:
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(R.string.alert_dialog_in_ecm_call)
.setNeutralButton(R.string.alert_dialog_dismiss,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_PROGRESS_DIALOG:
mProgressDialog = new ProgressDialog(EmergencyCallbackModeExitDialog.this);
mProgressDialog.setMessage(getText(R.string.progress_dialog_exiting_ecm));
mProgressDialog.setIndeterminate(true);
mProgressDialog.setCancelable(false);
return mProgressDialog;

default:
return null;
}
}","@Override
protected Dialog onCreateDialog(int id) {
switch (id) {
case EXIT_ECM_BLOCK_OTHERS:
case EXIT_ECM_DIALOG:
CharSequence text = getDialogText(mEcmTimeout);
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(text)
.setPositiveButton(R.string.alert_dialog_yes,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog,int whichButton) {
//comment
mPhone.exitEmergencyCallbackMode();

//comment
<start>showDialog(EXIT_ECM_PROGRESS_DIALOG);<end>
mTimer.cancel();
}
})
.setNegativeButton(R.string.alert_dialog_no,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_IN_EMERGENCY_CALL_DIALOG:
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(R.string.alert_dialog_in_ecm_call)
.setNeutralButton(R.string.alert_dialog_dismiss,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_PROGRESS_DIALOG:
mProgressDialog = new ProgressDialog(EmergencyCallbackModeExitDialog.this);
mProgressDialog.setMessage(getText(R.string.progress_dialog_exiting_ecm));
mProgressDialog.setIndeterminate(true);
mProgressDialog.setCancelable(false);
return mProgressDialog;

default:
return null;
}
}"
124,"    @Override
public void onDestroy() {
getListView().setOnCreateContextMenuListener(null);
super.onDestroy();
CatLog.d(LOG_TAG, ""onDestroy"" + "", "" + mState);
if (appService == null || !SubscriptionManager.isValidSlotIndex(mSlotId)) {
<start>return;<end>
}
//comment
//comment
if (mState == STATE_SECONDARY && !mIsResponseSent && !appService.isMenuPending(mSlotId)) {
//comment
//comment
if (!isChangingConfigurations()) {
<start>CatLog.d(LOG_TAG, ""handleDestroy - Send End Session"");<end>
sendResponse(StkAppService.RES_ID_END_SESSION);
}
}
cancelTimeOut();
LocalBroadcastManager.getInstance(this).unregisterReceiver(mLocalBroadcastReceiver);
}","    @Override
public void onDestroy() {
getListView().setOnCreateContextMenuListener(null);
super.onDestroy();
CatLog.d(LOG_TAG, ""onDestroy"" + "", "" + mState);
if (appService == null || !SubscriptionManager.isValidSlotIndex(mSlotId)) {
return;
}
//comment
//comment
if (mState == STATE_SECONDARY && !mIsResponseSent && !appService.isMenuPending(mSlotId)) {
//comment
//comment
<start>if (!isChangingConfigurations()) {
CatLog.d(LOG_TAG, ""handleDestroy - Send End Session"");
sendResponse(StkAppService.RES_ID_END_SESSION);
}<end>
}
cancelTimeOut();
LocalBroadcastManager.getInstance(this).unregisterReceiver(mLocalBroadcastReceiver);
}"
126,"    @Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
switch (requestCode) {
case CHOOSE_ACCOUNT_REQUEST:
if (resultCode == RESULT_CANCELED) {
setResult(resultCode);
finish();
return;
}
//comment
addAccount(data.getStringExtra(EXTRA_SELECTED_ACCOUNT));
break;
case ADD_ACCOUNT_REQUEST:
setResult(resultCode);
if (mPendingIntent != null) {
mPendingIntent.cancel();
mPendingIntent = null;
}
finish();
break;
}
}","    @Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
<start>switch (requestCode) {
case CHOOSE_ACCOUNT_REQUEST:
if (resultCode == RESULT_CANCELED) {
setResult(resultCode);
finish();
return;
}
//comment
addAccount(data.getStringExtra(EXTRA_SELECTED_ACCOUNT));
break;<end>
case ADD_ACCOUNT_REQUEST:
setResult(resultCode);
if (mPendingIntent != null) {
mPendingIntent.cancel();
mPendingIntent = null;
}
finish();
break;
}
}"
127,"    void updateTimes() {
Iterator<ActiveItem> it = mActiveItems.values().iterator();
while (it.hasNext()) {
ActiveItem ai = it.next();
if (ai.mRootView.getWindowToken() == null) {
//comment
it.remove();
continue;
}
<start>ai.updateTime(getContext(), mBuilder);<end>
}
}","    void updateTimes() {
Iterator<ActiveItem> it = mActiveItems.values().iterator();
while (it.hasNext()) {
ActiveItem ai = it.next();
<start>if (ai.mRootView.getWindowToken() == null) {
//comment
it.remove();
continue;
}<end>
ai.updateTime(getContext(), mBuilder);
}
}"
128,"String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {
//comment
<start>ImapResponse response = readResponse();<end>
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
}
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}","String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
<start>} else {
//comment
ImapResponse response = readResponse();<end>
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
<start>}<end>
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}"
129,"@UsedForTesting
public static int getTerminalPosition(final FusionDictionaryBufferInterface buffer,
final String word) throws IOException, UnsupportedFormatException {
if (word == null) return FormatSpec.NOT_VALID_WORD;
if (buffer.position() != 0) buffer.position(0);

final FileHeader header = BinaryDictInputOutput.readHeader(buffer);
int wordPos = 0;
final int wordLen = word.codePointCount(0, word.length());
for (int depth = 0; depth < Constants.Dictionary.MAX_WORD_LENGTH; ++depth) {
if (wordPos >= wordLen) return FormatSpec.NOT_VALID_WORD;

do {
final int charGroupCount = BinaryDictInputOutput.readCharGroupCount(buffer);
boolean foundNextCharGroup = false;
for (int i = 0; i < charGroupCount; ++i) {
final int charGroupPos = buffer.position();
final CharGroupInfo currentInfo = BinaryDictInputOutput.readCharGroup(buffer,
buffer.position(), header.mFormatOptions);
final boolean isMovedGroup =
BinaryDictInputOutput.isMovedGroup(currentInfo.mFlags,
header.mFormatOptions);
final boolean isDeletedGroup =
BinaryDictInputOutput.isDeletedGroup(currentInfo.mFlags,
header.mFormatOptions);
if (isMovedGroup) continue;
boolean same = true;
for (int p = 0, j = word.offsetByCodePoints(0, wordPos);
p < currentInfo.mCharacters.length;
++p, j = word.offsetByCodePoints(j, 1)) {
if (wordPos + p >= wordLen
|| word.codePointAt(j) != currentInfo.mCharacters[p]) {
same = false;
break;
}
}

if (same) {
//comment
if (wordPos + currentInfo.mCharacters.length == wordLen) {
if (currentInfo.mFrequency == CharGroup.NOT_A_TERMINAL
<start>|| isDeletedGroup) {<end>
return FormatSpec.NOT_VALID_WORD;
} else {
return charGroupPos;
}
}
wordPos += currentInfo.mCharacters.length;
if (currentInfo.mChildrenAddress == FormatSpec.NO_CHILDREN_ADDRESS) {
return FormatSpec.NOT_VALID_WORD;
}
foundNextCharGroup = true;
buffer.position(currentInfo.mChildrenAddress);
break;
}
}

//comment
//comment
//comment
//comment
if (foundNextCharGroup) break;
if (!header.mFormatOptions.mSupportsDynamicUpdate) {
return FormatSpec.NOT_VALID_WORD;
}

final int forwardLinkAddress = buffer.readUnsignedInt24();
if (forwardLinkAddress == FormatSpec.NO_FORWARD_LINK_ADDRESS) {
return FormatSpec.NOT_VALID_WORD;
}
buffer.position(forwardLinkAddress);
} while(true);
}
return FormatSpec.NOT_VALID_WORD;
}","@UsedForTesting
public static int getTerminalPosition(final FusionDictionaryBufferInterface buffer,
final String word) throws IOException, UnsupportedFormatException {
if (word == null) return FormatSpec.NOT_VALID_WORD;
if (buffer.position() != 0) buffer.position(0);

final FileHeader header = BinaryDictInputOutput.readHeader(buffer);
int wordPos = 0;
final int wordLen = word.codePointCount(0, word.length());
for (int depth = 0; depth < Constants.Dictionary.MAX_WORD_LENGTH; ++depth) {
if (wordPos >= wordLen) return FormatSpec.NOT_VALID_WORD;

do {
final int charGroupCount = BinaryDictInputOutput.readCharGroupCount(buffer);
boolean foundNextCharGroup = false;
for (int i = 0; i < charGroupCount; ++i) {
final int charGroupPos = buffer.position();
final CharGroupInfo currentInfo = BinaryDictInputOutput.readCharGroup(buffer,
buffer.position(), header.mFormatOptions);
final boolean isMovedGroup =
BinaryDictInputOutput.isMovedGroup(currentInfo.mFlags,
header.mFormatOptions);
final boolean isDeletedGroup =
BinaryDictInputOutput.isDeletedGroup(currentInfo.mFlags,
header.mFormatOptions);
if (isMovedGroup) continue;
boolean same = true;
for (int p = 0, j = word.offsetByCodePoints(0, wordPos);
p < currentInfo.mCharacters.length;
++p, j = word.offsetByCodePoints(j, 1)) {
if (wordPos + p >= wordLen
|| word.codePointAt(j) != currentInfo.mCharacters[p]) {
same = false;
break;
}
}

<start>if (same) {
//comment
if (wordPos + currentInfo.mCharacters.length == wordLen) {<end>
if (currentInfo.mFrequency == CharGroup.NOT_A_TERMINAL
|| isDeletedGroup) {
return FormatSpec.NOT_VALID_WORD;
} else {
return charGroupPos;
}
}
wordPos += currentInfo.mCharacters.length;
if (currentInfo.mChildrenAddress == FormatSpec.NO_CHILDREN_ADDRESS) {
return FormatSpec.NOT_VALID_WORD;
}
foundNextCharGroup = true;
buffer.position(currentInfo.mChildrenAddress);
break;
}
}

//comment
//comment
//comment
//comment
if (foundNextCharGroup) break;
if (!header.mFormatOptions.mSupportsDynamicUpdate) {
return FormatSpec.NOT_VALID_WORD;
}

final int forwardLinkAddress = buffer.readUnsignedInt24();
if (forwardLinkAddress == FormatSpec.NO_FORWARD_LINK_ADDRESS) {
return FormatSpec.NOT_VALID_WORD;
}
buffer.position(forwardLinkAddress);
} while(true);
}
return FormatSpec.NOT_VALID_WORD;
}"
133,"public static double calculateContrast(@ColorInt int foreground, @ColorInt int background) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}
if (Color.alpha(foreground) < 255) {
//comment
foreground = compositeColors(foreground, background);
}

final double luminance1 = calculateLuminance(foreground) + 0.05;
final double luminance2 = calculateLuminance(background) + 0.05;

//comment
<start>return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2);<end>
}","public static double calculateContrast(@ColorInt int foreground, @ColorInt int background) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}
if (Color.alpha(foreground) < 255) {
//comment
foreground = compositeColors(foreground, background);
}

final double luminance1 = calculateLuminance(foreground) + 0.05;
final double luminance2 = calculateLuminance(background) + 0.05;

//comment
<start>return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2);<end>
}"
142,"private void bindUi() {
Activity activity = getActivity();
if (activity == null) {
return;
}

//comment
Drawable icon = mAppPermissions.getPackageInfo().applicationInfo.loadIcon(
activity.getPackageManager());
ImageView iconView = activity.requireViewById(R.id.app_icon);
iconView.setImageDrawable(icon);

//comment
final int labelTemplateResId = isPackageUpdated()
? R.string.permission_review_title_template_update
: R.string.permission_review_title_template_install;
Spanned message = Html.fromHtml(getString(labelTemplateResId,
mAppPermissions.getAppLabel()), 0);

//comment
<start>activity.setTitle(message.toString());<end>

//comment
TextView permissionsMessageView = activity.requireViewById(
R.id.permissions_message);
permissionsMessageView.setText(message);

mContinueButton = getActivity().requireViewById(R.id.continue_button);
mContinueButton.setOnClickListener(this);

mCancelButton = getActivity().requireViewById(R.id.cancel_button);
mCancelButton.setOnClickListener(this);

if (activity.getPackageManager().arePermissionsIndividuallyControlled()) {
mMoreInfoButton = getActivity().requireViewById(
R.id.permission_more_info_button);
mMoreInfoButton.setOnClickListener(this);
mMoreInfoButton.setVisibility(View.VISIBLE);
}
}","private void bindUi() {
Activity activity = getActivity();
if (activity == null) {
return;
}

//comment
Drawable icon = mAppPermissions.getPackageInfo().applicationInfo.loadIcon(
activity.getPackageManager());
ImageView iconView = activity.requireViewById(R.id.app_icon);
iconView.setImageDrawable(icon);

//comment
final int labelTemplateResId = isPackageUpdated()
? R.string.permission_review_title_template_update
: R.string.permission_review_title_template_install;
Spanned message = Html.fromHtml(getString(labelTemplateResId,
mAppPermissions.getAppLabel()), 0);

//comment
<start>activity.setTitle(message.toString());<end>

//comment
TextView permissionsMessageView = activity.requireViewById(
R.id.permissions_message);
permissionsMessageView.setText(message);

mContinueButton = getActivity().requireViewById(R.id.continue_button);
mContinueButton.setOnClickListener(this);

mCancelButton = getActivity().requireViewById(R.id.cancel_button);
mCancelButton.setOnClickListener(this);

if (activity.getPackageManager().arePermissionsIndividuallyControlled()) {
mMoreInfoButton = getActivity().requireViewById(
R.id.permission_more_info_button);
mMoreInfoButton.setOnClickListener(this);
mMoreInfoButton.setVisibility(View.VISIBLE);
}
}"
147,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
<start>for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}<end>
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
148,"protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
<start>PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}<end>
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}","protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
<start>if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}<end>
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}"
149,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate - mIsResponseSent["" + mIsResponseSent + ""]"");

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
setContentView(R.layout.stk_input);
setSupportActionBar((Toolbar) findViewById(R.id.toolbar));

if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) {
getSupportActionBar().hide();

mMoreOptions = findViewById(R.id.more);
mMoreOptions.setVisibility(View.VISIBLE);
mMoreOptions.setOnClickListener(this);
}

//comment
mTextIn = (EditText) this.findViewById(R.id.in_text);
mPromptView = (TextView) this.findViewById(R.id.prompt);
//comment
<start>Button okButton = (Button) findViewById(R.id.button_ok);
Button cancelButton = (Button) findViewById(R.id.button_cancel);<end>
Button yesButton = (Button) findViewById(R.id.button_yes);
Button noButton = (Button) findViewById(R.id.button_no);

okButton.setOnClickListener(this);
cancelButton.setOnClickListener(this);
<start>yesButton.setOnClickListener(this);<end>
noButton.setOnClickListener(this);

mYesNoLayout = findViewById(R.id.yes_no_layout);
mNormalLayout = findViewById(R.id.normal_layout);
initFromIntent(getIntent());
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate - mIsResponseSent["" + mIsResponseSent + ""]"");

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
setContentView(R.layout.stk_input);
setSupportActionBar((Toolbar) findViewById(R.id.toolbar));

if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) {
getSupportActionBar().hide();

mMoreOptions = findViewById(R.id.more);
mMoreOptions.setVisibility(View.VISIBLE);
mMoreOptions.setOnClickListener(this);
}

//comment
mTextIn = (EditText) this.findViewById(R.id.in_text);
mPromptView = (TextView) this.findViewById(R.id.prompt);
//comment
<start>Button okButton = (Button) findViewById(R.id.button_ok);
Button cancelButton = (Button) findViewById(R.id.button_cancel);
Button yesButton = (Button) findViewById(R.id.button_yes);
Button noButton = (Button) findViewById(R.id.button_no);

okButton.setOnClickListener(this);
cancelButton.setOnClickListener(this);
yesButton.setOnClickListener(this);
noButton.setOnClickListener(this);<end>

mYesNoLayout = findViewById(R.id.yes_no_layout);
mNormalLayout = findViewById(R.id.normal_layout);
initFromIntent(getIntent());
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}"
150,"protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}","protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
<start>if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}<end>

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}"
151,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
<start>Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);<end>
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}<end>
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
152,"    protected int beginMmsConnectivity() throws IOException {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""beginMmsConnectivity"");
}
//comment
<start>createWakeLock();<end>

int result = mConnMgr.startUsingNetworkFeature(
ConnectivityManager.TYPE_MOBILE, Phone.FEATURE_ENABLE_MMS);

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""beginMmsConnectivity: result="" + result);
}

switch (result) {
case PhoneConstants.APN_ALREADY_ACTIVE:
case PhoneConstants.APN_REQUEST_STARTED:
acquireWakeLock();
return result;
}

throw new IOException(""Cannot establish MMS connectivity"");
}","    protected int beginMmsConnectivity() throws IOException {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""beginMmsConnectivity"");
}
//comment
<start>createWakeLock();<end>

int result = mConnMgr.startUsingNetworkFeature(
ConnectivityManager.TYPE_MOBILE, Phone.FEATURE_ENABLE_MMS);

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""beginMmsConnectivity: result="" + result);
}

switch (result) {
case PhoneConstants.APN_ALREADY_ACTIVE:
case PhoneConstants.APN_REQUEST_STARTED:
acquireWakeLock();
return result;
}

throw new IOException(""Cannot establish MMS connectivity"");
}"
155,"    @Override
public void onTickForCallTimeElapsed(long timeElapsed) {
//comment
//comment
<start>updateElapsedTimeWidget(timeElapsed);<end>
}","    @Override
public void onTickForCallTimeElapsed(long timeElapsed) {
//comment
//comment
<start>updateElapsedTimeWidget(timeElapsed);<end>
}"
157,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
<start>switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;<end>
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
<start>switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}<end>

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
158,"private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
<start>appOpMode = AppOpsManager.MODE_ALLOWED;<end>
} else {
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
<start>if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}<end>
}
<start>permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);<end>
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}","private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
<start>if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {<end>
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}"
159,"    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
<start>mTitleTextView.setText(title);<end>
}
//comment
<start>StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);<end>
//comment
setSelection(mStkMenu.defaultItem);
}
}","    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
<start>StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);<end>
//comment
setListAdapter(adapter);
//comment
setSelection(mStkMenu.defaultItem);
}
}"
161,"        @Override
public void onReceivedError(WebView view, int errorCode,
String description, String failingUrl) {
if (errorCode != WebViewClient.ERROR_HOST_LOOKUP &&
errorCode != WebViewClient.ERROR_CONNECT &&
errorCode != WebViewClient.ERROR_BAD_URL &&
errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME &&
errorCode != WebViewClient.ERROR_FILE) {
queueError(errorCode, description);

//comment
if (!isPrivateBrowsingEnabled()) {
Log.e(LOGTAG, ""onReceivedError "" + errorCode + "" "" + failingUrl
+ "" "" + description);
}
}
}","        @Override
public void onReceivedError(WebView view, int errorCode,
String description, String failingUrl) {
if (errorCode != WebViewClient.ERROR_HOST_LOOKUP &&
errorCode != WebViewClient.ERROR_CONNECT &&
errorCode != WebViewClient.ERROR_BAD_URL &&
errorCode != WebViewClient.ERROR_UNSUPPORTED_SCHEME &&
errorCode != WebViewClient.ERROR_FILE) {
queueError(errorCode, description);

//comment
<start>if (!isPrivateBrowsingEnabled()) {
Log.e(LOGTAG, ""onReceivedError "" + errorCode + "" "" + failingUrl
+ "" "" + description);
}<end>
}
}"
163,"@Override
public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
super.onLoadFinished(loader, data);

//comment
<start>setVisibleScrollbarEnabled(data != null && !data.isClosed() && data.getCount() > 0);<end>
}","@Override
public void onLoadFinished(Loader<Cursor> loader, Cursor data) {
super.onLoadFinished(loader, data);

//comment
<start>setVisibleScrollbarEnabled(data != null && !data.isClosed() && data.getCount() > 0);<end>
}"
165,"    private void activePendingMessages() {
//comment
MmsSystemEventReceiver.wakeUpService(this);

//comment
<start>sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_INACTIVE_MESSAGE,
null,
this,
SmsReceiver.class));<end>
}","    private void activePendingMessages() {
//comment
MmsSystemEventReceiver.wakeUpService(this);

//comment
<start>sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_INACTIVE_MESSAGE,
null,
this,
SmsReceiver.class));<end>
}"
167,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
<start>prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {<end>
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
<start>prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());<end>
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
169,"private void setFeedsState() {
//comment
Date date = new Date();
final int userId = mUserHandle.getIdentifier();
List<SyncInfo> currentSyncs = ContentResolver.getCurrentSyncsAsUser(userId);
boolean syncIsFailing = false;

//comment
<start>updateAccountSwitches();<end>

for (int i = 0, count = getPreferenceScreen().getPreferenceCount(); i < count; i++) {
Preference pref = getPreferenceScreen().getPreference(i);
if (!(pref instanceof SyncStateSwitchPreference)) {
continue;
}
SyncStateSwitchPreference syncPref = (SyncStateSwitchPreference) pref;

String authority = syncPref.getAuthority();
Account account = syncPref.getAccount();

SyncStatusInfo status = ContentResolver.getSyncStatusAsUser(account, authority, userId);
boolean syncEnabled = ContentResolver.getSyncAutomaticallyAsUser(account, authority,
userId);
boolean authorityIsPending = status == null ? false : status.pending;
boolean initialSync = status == null ? false : status.initialize;

boolean activelySyncing = isSyncing(currentSyncs, account, authority);
boolean lastSyncFailed = status != null
&& status.lastFailureTime != 0
&& status.getLastFailureMesgAsInt(0)
!= ContentResolver.SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS;
if (!syncEnabled) lastSyncFailed = false;
if (lastSyncFailed && !activelySyncing && !authorityIsPending) {
syncIsFailing = true;
}
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Update sync status: "" + account + "" "" + authority +
"" active = "" + activelySyncing + "" pend ="" + authorityIsPending);
}

final long successEndTime = (status == null) ? 0 : status.lastSuccessTime;
if (!syncEnabled) {
syncPref.setSummary(R.string.sync_disabled);
} else if (activelySyncing) {
syncPref.setSummary(R.string.sync_in_progress);
} else if (successEndTime != 0) {
date.setTime(successEndTime);
final String timeString = formatSyncDate(getContext(), date);
syncPref.setSummary(getResources().getString(R.string.last_synced, timeString));
} else {
syncPref.setSummary("""");
}
int syncState = ContentResolver.getIsSyncableAsUser(account, authority, userId);

syncPref.setActive(activelySyncing && (syncState >= 0) &&
!initialSync);
syncPref.setPending(authorityIsPending && (syncState >= 0) &&
!initialSync);

syncPref.setFailed(lastSyncFailed);
final boolean oneTimeSyncMode = !ContentResolver.getMasterSyncAutomaticallyAsUser(
userId);
syncPref.setOneTimeSyncMode(oneTimeSyncMode);
syncPref.setChecked(oneTimeSyncMode || syncEnabled);
}
if (syncIsFailing) {
getPreferenceScreen().addPreference(new FooterPreference.Builder(
getActivity()).setTitle(R.string.sync_is_failing).build());
}
}","private void setFeedsState() {
//comment
Date date = new Date();
final int userId = mUserHandle.getIdentifier();
List<SyncInfo> currentSyncs = ContentResolver.getCurrentSyncsAsUser(userId);
boolean syncIsFailing = false;

//comment
<start>updateAccountSwitches();<end>

for (int i = 0, count = getPreferenceScreen().getPreferenceCount(); i < count; i++) {
Preference pref = getPreferenceScreen().getPreference(i);
if (!(pref instanceof SyncStateSwitchPreference)) {
continue;
}
SyncStateSwitchPreference syncPref = (SyncStateSwitchPreference) pref;

String authority = syncPref.getAuthority();
Account account = syncPref.getAccount();

SyncStatusInfo status = ContentResolver.getSyncStatusAsUser(account, authority, userId);
boolean syncEnabled = ContentResolver.getSyncAutomaticallyAsUser(account, authority,
userId);
boolean authorityIsPending = status == null ? false : status.pending;
boolean initialSync = status == null ? false : status.initialize;

boolean activelySyncing = isSyncing(currentSyncs, account, authority);
boolean lastSyncFailed = status != null
&& status.lastFailureTime != 0
&& status.getLastFailureMesgAsInt(0)
!= ContentResolver.SYNC_ERROR_SYNC_ALREADY_IN_PROGRESS;
if (!syncEnabled) lastSyncFailed = false;
if (lastSyncFailed && !activelySyncing && !authorityIsPending) {
syncIsFailing = true;
}
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Update sync status: "" + account + "" "" + authority +
"" active = "" + activelySyncing + "" pend ="" + authorityIsPending);
}

final long successEndTime = (status == null) ? 0 : status.lastSuccessTime;
if (!syncEnabled) {
syncPref.setSummary(R.string.sync_disabled);
} else if (activelySyncing) {
syncPref.setSummary(R.string.sync_in_progress);
} else if (successEndTime != 0) {
date.setTime(successEndTime);
final String timeString = formatSyncDate(getContext(), date);
syncPref.setSummary(getResources().getString(R.string.last_synced, timeString));
} else {
syncPref.setSummary("""");
}
int syncState = ContentResolver.getIsSyncableAsUser(account, authority, userId);

syncPref.setActive(activelySyncing && (syncState >= 0) &&
!initialSync);
syncPref.setPending(authorityIsPending && (syncState >= 0) &&
!initialSync);

syncPref.setFailed(lastSyncFailed);
final boolean oneTimeSyncMode = !ContentResolver.getMasterSyncAutomaticallyAsUser(
userId);
syncPref.setOneTimeSyncMode(oneTimeSyncMode);
syncPref.setChecked(oneTimeSyncMode || syncEnabled);
}
if (syncIsFailing) {
getPreferenceScreen().addPreference(new FooterPreference.Builder(
getActivity()).setTitle(R.string.sync_is_failing).build());
}
}"
170,"private static void createForegroundBackgroundPermissionMappings(@NonNull Context context) {
List<String> permissions = new ArrayList<>();
sBackgroundToForegroundPermissions = new ArrayMap<>();

PackageManager packageManager = context.getPackageManager();
List<PermissionGroupInfo> permissionGroupInfos = packageManager.getAllPermissionGroups(0);

int permissionGroupInfosSize = permissionGroupInfos.size();
for (int permissionGroupInfosIndex = 0;
permissionGroupInfosIndex < permissionGroupInfosSize; permissionGroupInfosIndex++) {
PermissionGroupInfo permissionGroupInfo = permissionGroupInfos.get(
permissionGroupInfosIndex);

List<PermissionInfo> permissionInfos;
try {
permissionInfos = Utils.getPermissionInfosForGroup(packageManager,
permissionGroupInfo.name);
} catch (PackageManager.NameNotFoundException e) {
Log.e(LOG_TAG, ""Cannot get permissions for group: "" + permissionGroupInfo.name);
continue;
}

int permissionInfosSize = permissionInfos.size();
for (int permissionInfosIndex = 0; permissionInfosIndex < permissionInfosSize;
permissionInfosIndex++) {
PermissionInfo permissionInfo = permissionInfos.get(permissionInfosIndex);

String permission = permissionInfo.name;
permissions.add(permission);

String backgroundPermission = permissionInfo.backgroundPermission;
if (backgroundPermission != null) {
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.get(
backgroundPermission);
if (foregroundPermissions == null) {
foregroundPermissions = new ArrayList<>();
sBackgroundToForegroundPermissions.put(backgroundPermission,
foregroundPermissions);
}
foregroundPermissions.add(permission);
}
}
}

//comment
//comment
<start>sBackgroundToForegroundPermissions.retainAll(permissions);<end>

//comment
sForegroundToBackgroundPermission = new ArrayMap<>();

int backgroundToForegroundPermissionsSize = sBackgroundToForegroundPermissions.size();
for (int backgroundToForegroundPermissionsIndex = 0;
backgroundToForegroundPermissionsIndex < backgroundToForegroundPermissionsSize;
backgroundToForegroundPermissionsIndex++) {
String backgroundPerimssion = sBackgroundToForegroundPermissions.keyAt(
backgroundToForegroundPermissionsIndex);
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.valueAt(
backgroundToForegroundPermissionsIndex);

int foregroundPermissionsSize = foregroundPermissions.size();
for (int foregroundPermissionsIndex = 0;
foregroundPermissionsIndex < foregroundPermissionsSize;
foregroundPermissionsIndex++) {
String foregroundPermission = foregroundPermissions.get(foregroundPermissionsIndex);

sForegroundToBackgroundPermission.put(foregroundPermission, backgroundPerimssion);
}
}
}","private static void createForegroundBackgroundPermissionMappings(@NonNull Context context) {
List<String> permissions = new ArrayList<>();
sBackgroundToForegroundPermissions = new ArrayMap<>();

PackageManager packageManager = context.getPackageManager();
List<PermissionGroupInfo> permissionGroupInfos = packageManager.getAllPermissionGroups(0);

int permissionGroupInfosSize = permissionGroupInfos.size();
for (int permissionGroupInfosIndex = 0;
permissionGroupInfosIndex < permissionGroupInfosSize; permissionGroupInfosIndex++) {
PermissionGroupInfo permissionGroupInfo = permissionGroupInfos.get(
permissionGroupInfosIndex);

List<PermissionInfo> permissionInfos;
try {
permissionInfos = Utils.getPermissionInfosForGroup(packageManager,
permissionGroupInfo.name);
} catch (PackageManager.NameNotFoundException e) {
Log.e(LOG_TAG, ""Cannot get permissions for group: "" + permissionGroupInfo.name);
continue;
}

int permissionInfosSize = permissionInfos.size();
for (int permissionInfosIndex = 0; permissionInfosIndex < permissionInfosSize;
permissionInfosIndex++) {
PermissionInfo permissionInfo = permissionInfos.get(permissionInfosIndex);

String permission = permissionInfo.name;
permissions.add(permission);

String backgroundPermission = permissionInfo.backgroundPermission;
if (backgroundPermission != null) {
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.get(
backgroundPermission);
if (foregroundPermissions == null) {
foregroundPermissions = new ArrayList<>();
sBackgroundToForegroundPermissions.put(backgroundPermission,
foregroundPermissions);
}
foregroundPermissions.add(permission);
}
}
}

//comment
//comment
<start>sBackgroundToForegroundPermissions.retainAll(permissions);<end>

//comment
sForegroundToBackgroundPermission = new ArrayMap<>();

int backgroundToForegroundPermissionsSize = sBackgroundToForegroundPermissions.size();
for (int backgroundToForegroundPermissionsIndex = 0;
backgroundToForegroundPermissionsIndex < backgroundToForegroundPermissionsSize;
backgroundToForegroundPermissionsIndex++) {
String backgroundPerimssion = sBackgroundToForegroundPermissions.keyAt(
backgroundToForegroundPermissionsIndex);
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.valueAt(
backgroundToForegroundPermissionsIndex);

int foregroundPermissionsSize = foregroundPermissions.size();
for (int foregroundPermissionsIndex = 0;
foregroundPermissionsIndex < foregroundPermissionsSize;
foregroundPermissionsIndex++) {
String foregroundPermission = foregroundPermissions.get(foregroundPermissionsIndex);

sForegroundToBackgroundPermission.put(foregroundPermission, backgroundPerimssion);
}
}
}"
176,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
<start>} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);<end>

if (phoneIsCdma) {
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());<end>
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());<end>
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
177,"public void update(Observable observable) {
Transaction transaction = (Transaction) observable;
int serviceId = transaction.getServiceId();

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update transaction "" + serviceId);
}

try {
synchronized (mProcessing) {
mProcessing.remove(transaction);
if (mPending.size() > 0) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: handle next pending transaction..."");
}
Message msg = mServiceHandler.obtainMessage(
EVENT_HANDLE_NEXT_PENDING_TRANSACTION,
transaction.getConnectionSettings());
mServiceHandler.sendMessage(msg);
}
else if (mProcessing.isEmpty()) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: endMmsConnectivity"");
}
endMmsConnectivity();
} else {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: mProcessing is not empty"");
}
}
}

Intent intent = new Intent(TRANSACTION_COMPLETED_ACTION);
TransactionState state = transaction.getState();
int result = state.getState();
intent.putExtra(STATE, result);

switch (result) {
case TransactionState.SUCCESS:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction complete: "" + serviceId);
}

intent.putExtra(STATE_URI, state.getContentUri());

//comment
<start>switch (transaction.getType()) {<end>
case Transaction.NOTIFICATION_TRANSACTION:
case Transaction.RETRIEVE_TRANSACTION:
//comment
//comment
long threadId = MessagingNotification.getThreadId(
this, state.getContentUri());
MessagingNotification.blockingUpdateNewMessageIndicator(this,
threadId,
false);
MessagingNotification.updateDownloadFailedNotification(this);
break;
case Transaction.SEND_TRANSACTION:
RateController.getInstance().update();
break;
}
break;
case TransactionState.FAILED:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction failed: "" + serviceId);
}
break;
default:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction state unknown: "" +
serviceId + "" "" + result);
}
break;
}

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: broadcast transaction result "" + result);
}
//comment
sendBroadcast(intent);
} finally {
transaction.detach(this);
stopSelfIfIdle(serviceId);
}
}","public void update(Observable observable) {
Transaction transaction = (Transaction) observable;
int serviceId = transaction.getServiceId();

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update transaction "" + serviceId);
}

try {
synchronized (mProcessing) {
mProcessing.remove(transaction);
if (mPending.size() > 0) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: handle next pending transaction..."");
}
Message msg = mServiceHandler.obtainMessage(
EVENT_HANDLE_NEXT_PENDING_TRANSACTION,
transaction.getConnectionSettings());
mServiceHandler.sendMessage(msg);
}
else if (mProcessing.isEmpty()) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: endMmsConnectivity"");
}
endMmsConnectivity();
} else {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: mProcessing is not empty"");
}
}
}

Intent intent = new Intent(TRANSACTION_COMPLETED_ACTION);
TransactionState state = transaction.getState();
int result = state.getState();
intent.putExtra(STATE, result);

switch (result) {
case TransactionState.SUCCESS:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction complete: "" + serviceId);
}

intent.putExtra(STATE_URI, state.getContentUri());

//comment
<start>switch (transaction.getType()) {
case Transaction.NOTIFICATION_TRANSACTION:
case Transaction.RETRIEVE_TRANSACTION:
//comment
//comment
long threadId = MessagingNotification.getThreadId(
this, state.getContentUri());
MessagingNotification.blockingUpdateNewMessageIndicator(this,
threadId,
false);
MessagingNotification.updateDownloadFailedNotification(this);
break;<end>
case Transaction.SEND_TRANSACTION:
RateController.getInstance().update();
break;
}
break;
case TransactionState.FAILED:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction failed: "" + serviceId);
}
break;
default:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction state unknown: "" +
serviceId + "" "" + result);
}
break;
}

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: broadcast transaction result "" + result);
}
//comment
sendBroadcast(intent);
} finally {
transaction.detach(this);
stopSelfIfIdle(serviceId);
}
}"
178,"    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
<start>} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;<end>
}
}
}

return false;
}","    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
<start>} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;
}<end>
}
}

return false;
}"
179,"    private static ArrayList<DownloadRecord> getDownloadRecordsForCompletedDownloadInfo(
final Context context, final CompletedDownloadInfo downloadInfo) {
//comment
<start>synchronized(sSharedIdProtector) {<end>
final ArrayList<DownloadRecord> downloadRecords =
MetadataDbHelper.getDownloadRecordsForDownloadId(context,
downloadInfo.mDownloadId);
//comment
boolean hasMetadata = false;
for (DownloadRecord record : downloadRecords) {
if (null == record.mAttributes) {
hasMetadata = true;
break;
}
}
if (hasMetadata) {
writeMetadataDownloadId(context, downloadInfo.mUri, NOT_AN_ID);
MetadataDbHelper.saveLastUpdateTimeOfUri(context, downloadInfo.mUri);
}
return downloadRecords;
}
}","    private static ArrayList<DownloadRecord> getDownloadRecordsForCompletedDownloadInfo(
final Context context, final CompletedDownloadInfo downloadInfo) {
//comment
<start>synchronized(sSharedIdProtector) {
final ArrayList<DownloadRecord> downloadRecords =
MetadataDbHelper.getDownloadRecordsForDownloadId(context,
downloadInfo.mDownloadId);
//comment
boolean hasMetadata = false;
for (DownloadRecord record : downloadRecords) {
if (null == record.mAttributes) {
hasMetadata = true;
break;
}
}
if (hasMetadata) {
writeMetadataDownloadId(context, downloadInfo.mUri, NOT_AN_ID);
MetadataDbHelper.saveLastUpdateTimeOfUri(context, downloadInfo.mUri);
}
return downloadRecords;
}<end>
}"
180,"private void startTimeOut() {
//comment
//comment
if (mIsResponseSent || (mTextMsg.userClear && !mTextMsg.responseNeeded)) {
return;
}

if (mAlarmTime == NO_DIALOG_ALARM) {
<start>int duration = StkApp.calculateDurationInMilis(mTextMsg.duration);<end>
//comment
if (duration == 0) {
if (mTextMsg.userClear) {
<start>duration = StkApp.DISP_TEXT_WAIT_FOR_USER_TIMEOUT;<end>
} else {
duration = StkApp.DISP_TEXT_CLEAR_AFTER_DELAY_TIMEOUT;
}
}
mAlarmTime = SystemClock.elapsedRealtime() + duration;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, DIALOG_ALARM_TAG,
mAlarmListener, null);
}","private void startTimeOut() {
//comment
//comment
if (mIsResponseSent || (mTextMsg.userClear && !mTextMsg.responseNeeded)) {
return;
}

if (mAlarmTime == NO_DIALOG_ALARM) {
int duration = StkApp.calculateDurationInMilis(mTextMsg.duration);
//comment
<start>if (duration == 0) {
if (mTextMsg.userClear) {
duration = StkApp.DISP_TEXT_WAIT_FOR_USER_TIMEOUT;
} else {
duration = StkApp.DISP_TEXT_CLEAR_AFTER_DELAY_TIMEOUT;
}
}<end>
mAlarmTime = SystemClock.elapsedRealtime() + duration;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, DIALOG_ALARM_TAG,
mAlarmListener, null);
}"
182,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
<start>} else {<end>

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

<start>if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {<end>
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
<start>} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}<end>

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}"
184,"    @Override
protected void onResume() {
super.onResume();

if (!Utils.isWifiOnly(getApplicationContext())) {
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
updateSignalStrength();
updateServiceState();
registerReceiver(mAreaInfoReceiver, new IntentFilter(CB_AREA_INFO_RECEIVED_ACTION),
CB_AREA_INFO_SENDER_PERMISSION, null);
//comment
Intent getLatestIntent = new Intent(GET_LATEST_CB_AREA_INFO_ACTION);
<start>getLatestIntent.putExtra(MSimConstants.SUBSCRIPTION_KEY, mSub);
sendBroadcastAsUser(getLatestIntent, UserHandle.ALL,
CB_AREA_INFO_SENDER_PERMISSION);<end>

}
}","    @Override
protected void onResume() {
super.onResume();

if (!Utils.isWifiOnly(getApplicationContext())) {
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);
updateSignalStrength();
updateServiceState();
registerReceiver(mAreaInfoReceiver, new IntentFilter(CB_AREA_INFO_RECEIVED_ACTION),
CB_AREA_INFO_SENDER_PERMISSION, null);
//comment
<start>Intent getLatestIntent = new Intent(GET_LATEST_CB_AREA_INFO_ACTION);
getLatestIntent.putExtra(MSimConstants.SUBSCRIPTION_KEY, mSub);
sendBroadcastAsUser(getLatestIntent, UserHandle.ALL,
CB_AREA_INFO_SENDER_PERMISSION);<end>

}
}"
191,"    private void update() {
if (mDialog != null) {
mDialog.setOnDismissListener(null);
mDialog.dismiss();
mDialog = null;
}

AlertDialogBuilder builder = new AlertDialogBuilder(mContext)
.setTitle(mGroupMessage)
.setSubtitle(mDetailMessage)
.setAllowDismissButton(false)
.setOnDismissListener((dialog) -> {
mDialog = null;
mResultListener.onPermissionGrantResult(mGroupName, DENIED);
});
if (mGroupIcon != null) {
builder.setIcon(mGroupIcon.loadDrawable(mContext));
}

List<CarUiListItem> itemList = new ArrayList<>();

//comment
<start>createListItem(itemList, R.string.grant_dialog_button_allow,
GRANTED_ALWAYS, ALLOW_BUTTON);<end>
createListItem(itemList, R.string.grant_dialog_button_allow_always,
GRANTED_ALWAYS, ALLOW_ALWAYS_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_allow_foreground,
GRANTED_FOREGROUND_ONLY, ALLOW_FOREGROUND_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_deny,
DENIED, DENY_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_deny_and_dont_ask_again,
DENIED_DO_NOT_ASK_AGAIN, DENY_AND_DONT_ASK_AGAIN_BUTTON);

//comment
//comment
createListItem(itemList, R.string.grant_dialog_button_no_upgrade, DENIED,
NO_UPGRADE_BUTTON, NO_UPGRADE_OT_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_no_upgrade, DENIED_DO_NOT_ASK_AGAIN,
NO_UPGRADE_AND_DONT_ASK_AGAIN_BUTTON, NO_UPGRADE_OT_AND_DONT_ASK_AGAIN_BUTTON);

builder.setAdapter(new CarUiListItemAdapter(itemList));

mDialog = builder.create();
mDialog.show();
}","    private void update() {
if (mDialog != null) {
mDialog.setOnDismissListener(null);
mDialog.dismiss();
mDialog = null;
}

AlertDialogBuilder builder = new AlertDialogBuilder(mContext)
.setTitle(mGroupMessage)
.setSubtitle(mDetailMessage)
.setAllowDismissButton(false)
.setOnDismissListener((dialog) -> {
mDialog = null;
mResultListener.onPermissionGrantResult(mGroupName, DENIED);
});
if (mGroupIcon != null) {
builder.setIcon(mGroupIcon.loadDrawable(mContext));
}

List<CarUiListItem> itemList = new ArrayList<>();

//comment
<start>createListItem(itemList, R.string.grant_dialog_button_allow,
GRANTED_ALWAYS, ALLOW_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_allow_always,
GRANTED_ALWAYS, ALLOW_ALWAYS_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_allow_foreground,
GRANTED_FOREGROUND_ONLY, ALLOW_FOREGROUND_BUTTON);<end>
createListItem(itemList, R.string.grant_dialog_button_deny,
DENIED, DENY_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_deny_and_dont_ask_again,
DENIED_DO_NOT_ASK_AGAIN, DENY_AND_DONT_ASK_AGAIN_BUTTON);

//comment
//comment
createListItem(itemList, R.string.grant_dialog_button_no_upgrade, DENIED,
NO_UPGRADE_BUTTON, NO_UPGRADE_OT_BUTTON);
createListItem(itemList, R.string.grant_dialog_button_no_upgrade, DENIED_DO_NOT_ASK_AGAIN,
NO_UPGRADE_AND_DONT_ASK_AGAIN_BUTTON, NO_UPGRADE_OT_AND_DONT_ASK_AGAIN_BUTTON);

builder.setAdapter(new CarUiListItemAdapter(itemList));

mDialog = builder.create();
mDialog.show();
}"
193,"    private void sendNotifyRespInd(int status) throws MmsException, IOException {
//comment
NotifyRespInd notifyRespInd = new NotifyRespInd(
PduHeaders.CURRENT_MMS_VERSION,
mNotificationInd.getTransactionId(),
status);

//comment
if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, notifyRespInd).make(), mContentLocation);
} else {
<start>sendPdu(new PduComposer(mContext, notifyRespInd).make());<end>
}
}","    private void sendNotifyRespInd(int status) throws MmsException, IOException {
//comment
NotifyRespInd notifyRespInd = new NotifyRespInd(
PduHeaders.CURRENT_MMS_VERSION,
mNotificationInd.getTransactionId(),
status);

//comment
<start>if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, notifyRespInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, notifyRespInd).make());
}<end>
}"
195,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
<start>byte[] resp = getPdu(mContentLocation);<end>

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
<start>byte[] resp = getPdu(mContentLocation);<end>

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
196,"public void onReachedMaxAppCacheSize(long spaceNeeded, long totalUsedQuota,
WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""Received onReachedMaxAppCacheSize with spaceNeeded ""
+ spaceNeeded + "" bytes."");
}

long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota < spaceNeeded + APPCACHE_MAXSIZE_PADDING) {
//comment
//comment
<start>if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}<end>
quotaUpdater.updateQuota(0);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize: out of space."");
}
return;
}
//comment
mAppCacheMaxSize += spaceNeeded + APPCACHE_MAXSIZE_PADDING;
quotaUpdater.updateQuota(mAppCacheMaxSize);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize set new max size to ""
+ mAppCacheMaxSize);
}
}","public void onReachedMaxAppCacheSize(long spaceNeeded, long totalUsedQuota,
WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""Received onReachedMaxAppCacheSize with spaceNeeded ""
+ spaceNeeded + "" bytes."");
}

long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

<start>if (totalUnusedQuota < spaceNeeded + APPCACHE_MAXSIZE_PADDING) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}<end>
quotaUpdater.updateQuota(0);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize: out of space."");
}
return;
}
//comment
mAppCacheMaxSize += spaceNeeded + APPCACHE_MAXSIZE_PADDING;
quotaUpdater.updateQuota(mAppCacheMaxSize);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize set new max size to ""
+ mAppCacheMaxSize);
}
}"
197,"        @Override
public void onPageStarted(WebView view, String url, Bitmap favicon) {
mInPageLoad = true;
mUpdateThumbnail = true;
mPageLoadProgress = INITIAL_PROGRESS;
mCurrentState = new PageState(mContext,
view.isPrivateBrowsingEnabled(), url, favicon);
mLoadStartTime = SystemClock.uptimeMillis();

//comment
//comment
//comment
if (mTouchIconLoader != null) {
mTouchIconLoader.mTab = null;
mTouchIconLoader = null;
}

//comment
if (mErrorConsole != null) {
mErrorConsole.clearErrorMessages();
if (mWebViewController.shouldShowErrorConsole()) {
mErrorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
}
}

//comment
<start>if (mDeviceAccountLogin != null) {
mDeviceAccountLogin.cancel();
mDeviceAccountLogin = null;
mWebViewController.hideAutoLogin(Tab.this);
}<end>

//comment
mWebViewController.onPageStarted(Tab.this, view, favicon);

updateBookmarkedStatus();
}","        @Override
public void onPageStarted(WebView view, String url, Bitmap favicon) {
mInPageLoad = true;
mUpdateThumbnail = true;
mPageLoadProgress = INITIAL_PROGRESS;
mCurrentState = new PageState(mContext,
view.isPrivateBrowsingEnabled(), url, favicon);
mLoadStartTime = SystemClock.uptimeMillis();

//comment
//comment
//comment
if (mTouchIconLoader != null) {
mTouchIconLoader.mTab = null;
mTouchIconLoader = null;
}

//comment
if (mErrorConsole != null) {
mErrorConsole.clearErrorMessages();
if (mWebViewController.shouldShowErrorConsole()) {
mErrorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
}
}

//comment
<start>if (mDeviceAccountLogin != null) {
mDeviceAccountLogin.cancel();
mDeviceAccountLogin = null;
mWebViewController.hideAutoLogin(Tab.this);
}<end>

//comment
mWebViewController.onPageStarted(Tab.this, view, favicon);

updateBookmarkedStatus();
}"
199,"    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
<start>mHandler.removeMessages(ORIENTATION_CHANGED);<end>

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}","    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
<start>mHandler.removeMessages(ORIENTATION_CHANGED);<end>

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}"
200,"@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
<start>inputstream = openStream();<end>
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
<start>bmHeight >>= 1;<end>
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
<start>inputstream.close();
inputstream = openStream();<end>
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}","@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
<start>inputstream.close();
inputstream = openStream();<end>
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}"
201,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
<start>PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);<end>

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
205,"<start>	<T> CompletableFuture<T> toCompletableFuture(
final ListenableFuture<T> listenableFuture) {<end>
//comment
CompletableFuture<T> completable = new CompletableFuture<T>() {
@Override
public boolean cancel(boolean mayInterruptIfRunning) {
//comment
boolean result = listenableFuture.cancel(mayInterruptIfRunning);
super.cancel(mayInterruptIfRunning);
return result;
}
};

//comment
listenableFuture.addCallback(new ListenableFutureCallback<T>() {
@Override
public void onSuccess(T result) {
completable.complete(result);
}

@Override
public void onFailure(Throwable t) {
completable.completeExceptionally(t);
}
});
return completable;
}","	<T> CompletableFuture<T> toCompletableFuture(
final ListenableFuture<T> listenableFuture) {
//comment
<start>CompletableFuture<T> completable = new CompletableFuture<T>() {<end>
@Override
public boolean cancel(boolean mayInterruptIfRunning) {
//comment
boolean result = listenableFuture.cancel(mayInterruptIfRunning);
super.cancel(mayInterruptIfRunning);
return result;
}
};

//comment
listenableFuture.addCallback(new ListenableFutureCallback<T>() {
@Override
public void onSuccess(T result) {
completable.complete(result);
}

@Override
public void onFailure(Throwable t) {
completable.completeExceptionally(t);
}
});
return completable;
}"
207,"protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
<start>updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);<end>
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}","protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
<start>updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);<end>

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);
}"
210,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
<start>setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();<end>
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
<start>if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();<end>
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
212,"    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
<start>EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;<end>
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;
}
}
}

return false;
}","    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
<start>EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;
}
}
}<end>

return false;
}"
213,"private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
<start>translationVisitor.setBlock(block, addresses.getLast(block));<end>
block.getInsns().forEach(translationVisitor);

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}","private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
<start>translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);<end>

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}"
224,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
<start>removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);<end>
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
<start>if (mPhone.getPhoneName().equals(""CDMA"")) {<end>
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
<start>} else {<end>
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
<start>removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}<end>

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}"
225,"    private static void updateClientsWithMetadataUri(final Context context,
final boolean updateNow, final String metadataUri) {
PrivateLog.log(""Update for metadata URI "" + Utils.s(metadataUri));
//comment
//comment
//comment
final String disambiguator = ""#"" + System.currentTimeMillis()
+ com.android.inputmethod.latin.Utils.getVersionName(context) + "".json"";
final Request metadataRequest = new Request(Uri.parse(metadataUri + disambiguator));
Utils.l(""Request ="", metadataRequest);

final Resources res = context.getResources();
//comment
if (!updateNow) {
final boolean allowedOverMetered = res.getBoolean(R.bool.allow_over_metered);
//comment
if (DownloadManagerCompatUtils.hasSetAllowedOverMetered()) {
DownloadManagerCompatUtils.setAllowedOverMetered(metadataRequest,
allowedOverMetered);
} else if (!allowedOverMetered) {
metadataRequest.setAllowedNetworkTypes(Request.NETWORK_WIFI);
}
metadataRequest.setAllowedOverRoaming(res.getBoolean(R.bool.allow_over_roaming));
}
final boolean notificationVisible = updateNow
? res.getBoolean(R.bool.display_notification_for_user_requested_update)
: res.getBoolean(R.bool.display_notification_for_auto_update);

metadataRequest.setTitle(res.getString(R.string.download_description));
metadataRequest.setNotificationVisibility(notificationVisible
? Request.VISIBILITY_VISIBLE : Request.VISIBILITY_HIDDEN);
metadataRequest.setVisibleInDownloadsUi(
res.getBoolean(R.bool.metadata_downloads_visible_in_download_UI));

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
if (null == manager) {
//comment
//comment
return;
}
cancelUpdateWithDownloadManager(context, metadataUri, manager);
final long downloadId;
synchronized (sSharedIdProtector) {
downloadId = manager.enqueue(metadataRequest);
<start>Utils.l(""Metadata download requested with id"", downloadId);
//comment
//comment
//comment
//comment
//comment
writeMetadataDownloadId(context, metadataUri, downloadId);<end>
}
<start>PrivateLog.log(""Requested download with id "" + downloadId);<end>
}","    private static void updateClientsWithMetadataUri(final Context context,
final boolean updateNow, final String metadataUri) {
PrivateLog.log(""Update for metadata URI "" + Utils.s(metadataUri));
//comment
//comment
//comment
final String disambiguator = ""#"" + System.currentTimeMillis()
+ com.android.inputmethod.latin.Utils.getVersionName(context) + "".json"";
final Request metadataRequest = new Request(Uri.parse(metadataUri + disambiguator));
Utils.l(""Request ="", metadataRequest);

final Resources res = context.getResources();
//comment
if (!updateNow) {
final boolean allowedOverMetered = res.getBoolean(R.bool.allow_over_metered);
//comment
if (DownloadManagerCompatUtils.hasSetAllowedOverMetered()) {
DownloadManagerCompatUtils.setAllowedOverMetered(metadataRequest,
allowedOverMetered);
} else if (!allowedOverMetered) {
metadataRequest.setAllowedNetworkTypes(Request.NETWORK_WIFI);
}
metadataRequest.setAllowedOverRoaming(res.getBoolean(R.bool.allow_over_roaming));
}
final boolean notificationVisible = updateNow
? res.getBoolean(R.bool.display_notification_for_user_requested_update)
: res.getBoolean(R.bool.display_notification_for_auto_update);

metadataRequest.setTitle(res.getString(R.string.download_description));
metadataRequest.setNotificationVisibility(notificationVisible
? Request.VISIBILITY_VISIBLE : Request.VISIBILITY_HIDDEN);
metadataRequest.setVisibleInDownloadsUi(
res.getBoolean(R.bool.metadata_downloads_visible_in_download_UI));

final DownloadManager manager =
(DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
if (null == manager) {
//comment
//comment
return;
}
cancelUpdateWithDownloadManager(context, metadataUri, manager);
final long downloadId;
<start>synchronized (sSharedIdProtector) {
downloadId = manager.enqueue(metadataRequest);
Utils.l(""Metadata download requested with id"", downloadId);
//comment
//comment
//comment
//comment
//comment
writeMetadataDownloadId(context, metadataUri, downloadId);
}<end>
PrivateLog.log(""Requested download with id "" + downloadId);
}"
227,"static private boolean handlePinEntry(Context context, String input,
Activity pukInputActivity) {
//comment
//comment
//comment
if ((input.startsWith(""**04"") || input.startsWith(""**05""))
&& input.endsWith(""#"")) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

if (app instanceof com.android.phone.MSimPhoneGlobals) {
//comment
//comment
int voiceSub = app.getVoiceSubscription();
phone = app.getPhone(voiceSub);
}
boolean isMMIHandled = phone.handlePinMmi(input);

//comment
//comment
//comment
//comment
//comment
<start>if (isMMIHandled && input.startsWith(""**05"")) {
app.setPukEntryActivity(pukInputActivity);
}<end>
return isMMIHandled;
}
return false;
}","static private boolean handlePinEntry(Context context, String input,
Activity pukInputActivity) {
//comment
//comment
//comment
if ((input.startsWith(""**04"") || input.startsWith(""**05""))
&& input.endsWith(""#"")) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

if (app instanceof com.android.phone.MSimPhoneGlobals) {
//comment
//comment
int voiceSub = app.getVoiceSubscription();
phone = app.getPhone(voiceSub);
}
boolean isMMIHandled = phone.handlePinMmi(input);

//comment
//comment
//comment
//comment
//comment
<start>if (isMMIHandled && input.startsWith(""**05"")) {
app.setPukEntryActivity(pukInputActivity);
}<end>
return isMMIHandled;
}
return false;
}"
228,"    public void onOtaspDisconnect() {
if (DBG) log(""onOtaspDisconnect()..."");
//comment
//comment
//comment
if (!mInteractive) {
//comment
updateNonInteractiveOtaSuccessFailure();
}
}","    public void onOtaspDisconnect() {
if (DBG) log(""onOtaspDisconnect()..."");
//comment
//comment
//comment
if (!mInteractive) {
//comment
<start>updateNonInteractiveOtaSuccessFailure();<end>
}
}"
229,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
<start>removePreferenceFromScreen(KEY_ICC_ID);<end>
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

<start>if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {<end>
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
<start>} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}<end>
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}"
231,"protected void onPostExecute(String result) {
//comment
if (mController.isActivityPaused()) return;
//comment
if (mController.getTabControl().getTabPosition(mTab) != -1) {
//comment
if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}
}
}","protected void onPostExecute(String result) {
//comment
if (mController.isActivityPaused()) return;
//comment
if (mController.getTabControl().getTabPosition(mTab) != -1) {
//comment
<start>if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}<end>
}
}"
232,"private void handleImportRequest(int resId, int subscriptionId) {
//comment
//comment
//comment
final List<AccountWithDataSet> accountList = AccountInfo.extractAccounts(
Futures.getUnchecked(mAccountsFuture));

//comment
//comment
//comment
//comment
final int size = accountList.size();
if (size > 1) {
//comment
final Bundle args = new Bundle();
<start>args.putInt(KEY_RES_ID, resId);<end>
args.putInt(KEY_SUBSCRIPTION_ID, subscriptionId);
SelectAccountDialogFragment.show(
getFragmentManager(), R.string.dialog_new_contact_account,
AccountTypeManager.AccountFilter.CONTACTS_WRITABLE, args);
} else {
AccountSelectionUtil.doImport(getActivity(), resId,
(size == 1 ? accountList.get(0) : null),
(CompatUtils.isMSIMCompatible() ? subscriptionId : -1));
}
}","private void handleImportRequest(int resId, int subscriptionId) {
//comment
//comment
//comment
final List<AccountWithDataSet> accountList = AccountInfo.extractAccounts(
Futures.getUnchecked(mAccountsFuture));

//comment
//comment
//comment
//comment
final int size = accountList.size();
if (size > 1) {
//comment
<start>final Bundle args = new Bundle();
args.putInt(KEY_RES_ID, resId);
args.putInt(KEY_SUBSCRIPTION_ID, subscriptionId);
SelectAccountDialogFragment.show(
getFragmentManager(), R.string.dialog_new_contact_account,
AccountTypeManager.AccountFilter.CONTACTS_WRITABLE, args);<end>
} else {
AccountSelectionUtil.doImport(getActivity(), resId,
(size == 1 ? accountList.get(0) : null),
(CompatUtils.isMSIMCompatible() ? subscriptionId : -1));
}
}"
237,"private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}","private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
<start>final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();<end>

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}"
238,"<start>public CharSequence addEmojiSpans(CharSequence text) {<end>
SpannableStringBuilder builder = new SpannableStringBuilder(text);

//comment
//comment
//comment
<start>Matcher matcher = mPattern.matcher(text);<end>
while (matcher.find()) {
int resId = mSmileyToRes.get(matcher.group());
builder.setSpan(new ImageSpan(mContext, resId), matcher.start(), matcher.end(),
Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
}

return builder;
}","public CharSequence addEmojiSpans(CharSequence text) {
SpannableStringBuilder builder = new SpannableStringBuilder(text);

//comment
//comment
//comment
<start>Matcher matcher = mPattern.matcher(text);
while (matcher.find()) {
int resId = mSmileyToRes.get(matcher.group());
builder.setSpan(new ImageSpan(mContext, resId), matcher.start(), matcher.end(),
Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
}<end>

return builder;
}"
239,"public static void setKeyDetector(final KeyDetector keyDetector) {
final int trackersSize = sTrackers.size();
for (int i = 0; i < trackersSize; ++i) {
final PointerTracker tracker = sTrackers.get(i);
tracker.setKeyDetectorInner(keyDetector);
//comment
<start>tracker.mKeyboardLayoutHasBeenChanged = true;<end>
}
<start>final Keyboard keyboard = keyDetector.getKeyboard();<end>
sGestureHandlingEnabledByInputField = !keyboard.mId.passwordInput();
updateGestureHandlingMode();
}","public static void setKeyDetector(final KeyDetector keyDetector) {
final int trackersSize = sTrackers.size();
for (int i = 0; i < trackersSize; ++i) {
final PointerTracker tracker = sTrackers.get(i);
tracker.setKeyDetectorInner(keyDetector);
//comment
<start>tracker.mKeyboardLayoutHasBeenChanged = true;<end>
}
final Keyboard keyboard = keyDetector.getKeyboard();
sGestureHandlingEnabledByInputField = !keyboard.mId.passwordInput();
updateGestureHandlingMode();
}"
240,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}

mHandler = new Handler();

//comment
//comment
<start>Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();<end>

//comment
IntentFilter filter = new IntentFilter();
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}

mHandler = new Handler();

//comment
//comment
<start>Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();<end>

//comment
IntentFilter filter = new IntentFilter();
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);
}"
243,"@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
inputstream.close();
inputstream = openStream();
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
<start>int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();<end>
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
<start>oldWallpaper.draw(canvas);<end>
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}","@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
inputstream.close();
inputstream = openStream();
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

<start>if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}<end>

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}"
244,"private Dex mergeDexes() throws IOException {
mergeStringIds();
mergeTypeIds();
mergeTypeLists();
mergeProtoIds();
mergeFieldIds();
mergeMethodIds();
mergeMethodHandles();
mergeAnnotations();
unionAnnotationSetsAndDirectories();
mergeCallSiteIds();
mergeClassDefs();

//comment
Arrays.sort(contentsOut.sections);

//comment
contentsOut.header.off = 0;
contentsOut.header.size = 1;
contentsOut.fileSize = dexOut.getLength();
contentsOut.computeSizesFromOffsets();
contentsOut.writeHeader(headerOut, mergeApiLevels());
contentsOut.writeMap(mapListOut);

//comment
<start>dexOut.writeHashes();<end>

return dexOut;
}","private Dex mergeDexes() throws IOException {
mergeStringIds();
mergeTypeIds();
mergeTypeLists();
mergeProtoIds();
mergeFieldIds();
mergeMethodIds();
mergeMethodHandles();
mergeAnnotations();
unionAnnotationSetsAndDirectories();
mergeCallSiteIds();
mergeClassDefs();

//comment
Arrays.sort(contentsOut.sections);

//comment
contentsOut.header.off = 0;
contentsOut.header.size = 1;
contentsOut.fileSize = dexOut.getLength();
contentsOut.computeSizesFromOffsets();
contentsOut.writeHeader(headerOut, mergeApiLevels());
contentsOut.writeMap(mapListOut);

//comment
<start>dexOut.writeHashes();<end>

return dexOut;
}"
246,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}

mHandler = new Handler();

//comment
//comment
Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();

//comment
IntentFilter filter = new IntentFilter();
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
<start>if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}<end>

mHandler = new Handler();

//comment
//comment
Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();

//comment
IntentFilter filter = new IntentFilter();
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);
}"
248,"    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;

//comment
//comment
//comment
final String lowerCaseText = text.toLowerCase(mLocale);
<start>if (dict.isValidWord(lowerCaseText)) return true;<end>
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;

//comment
//comment
//comment
<start>return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));<end>
}","    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;

//comment
//comment
//comment
final String lowerCaseText = text.toLowerCase(mLocale);
if (dict.isValidWord(lowerCaseText)) return true;
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;

//comment
//comment
//comment
<start>return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));<end>
}"
249,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);<end>
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);<end>
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
252,"public void onReachedMaxAppCacheSize(long spaceNeeded, long totalUsedQuota,
WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""Received onReachedMaxAppCacheSize with spaceNeeded ""
+ spaceNeeded + "" bytes."");
}

long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota < spaceNeeded + APPCACHE_MAXSIZE_PADDING) {
//comment
//comment
<start>if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}<end>
quotaUpdater.updateQuota(0);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize: out of space."");
}
return;
}
//comment
<start>mAppCacheMaxSize += spaceNeeded + APPCACHE_MAXSIZE_PADDING;<end>
quotaUpdater.updateQuota(mAppCacheMaxSize);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize set new max size to ""
+ mAppCacheMaxSize);
}
}","public void onReachedMaxAppCacheSize(long spaceNeeded, long totalUsedQuota,
WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""Received onReachedMaxAppCacheSize with spaceNeeded ""
+ spaceNeeded + "" bytes."");
}

long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota < spaceNeeded + APPCACHE_MAXSIZE_PADDING) {
//comment
//comment
<start>if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}<end>
quotaUpdater.updateQuota(0);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize: out of space."");
}
return;
}
//comment
mAppCacheMaxSize += spaceNeeded + APPCACHE_MAXSIZE_PADDING;
quotaUpdater.updateQuota(mAppCacheMaxSize);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onReachedMaxAppCacheSize set new max size to ""
+ mAppCacheMaxSize);
}
}"
255,"<start>private void formatEntryIfFirst(List<View> entriesViewGroup) {<end>
//comment
if (TextUtils.isEmpty(mTitleTextView.getText()) &&
entriesViewGroup.size() > 0) {
final View entry = entriesViewGroup.get(0);
entry.setPaddingRelative(entry.getPaddingStart(),
getResources().getDimensionPixelSize(
R.dimen.expanding_entry_card_item_padding_top) +
getResources().getDimensionPixelSize(
R.dimen.expanding_entry_card_null_title_top_extra_padding),
entry.getPaddingEnd(),
entry.getPaddingBottom());
}
}","private void formatEntryIfFirst(List<View> entriesViewGroup) {
//comment
<start>if (TextUtils.isEmpty(mTitleTextView.getText()) &&
entriesViewGroup.size() > 0) {
final View entry = entriesViewGroup.get(0);
entry.setPaddingRelative(entry.getPaddingStart(),
getResources().getDimensionPixelSize(
R.dimen.expanding_entry_card_item_padding_top) +
getResources().getDimensionPixelSize(
R.dimen.expanding_entry_card_null_title_top_extra_padding),
entry.getPaddingEnd(),
entry.getPaddingBottom());
}<end>
}"
259,"    boolean shouldOverrideUrlLoading(Tab tab, WebView view, String url) {
<start>if (view.isPrivateBrowsingEnabled()) {
//comment
//comment
return false;
}<end>

if (url.startsWith(SCHEME_WTAI)) {
//comment
//comment
if (url.startsWith(SCHEME_WTAI_MC)) {
Intent intent = new Intent(Intent.ACTION_VIEW,
Uri.parse(WebView.SCHEME_TEL +
url.substring(SCHEME_WTAI_MC.length())));
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
//comment
//comment
if (url.startsWith(SCHEME_WTAI_SD)) {
//comment
return false;
}
//comment
//comment
//comment
if (url.startsWith(SCHEME_WTAI_AP)) {
//comment
return false;
}
}

//comment
//comment
if (url.startsWith(""about:"")) {
return false;
}

//comment
//comment
if (rlzProviderPresent()) {
Uri siteUri = Uri.parse(url);
if (needsRlzString(siteUri)) {
//comment
//comment
//comment
//comment
new RLZTask(tab, siteUri, view).execute();
return true;
}
}

if (startActivityForUrl(tab, url)) {
return true;
}

if (handleMenuClick(tab, url)) {
return true;
}

return false;
}","    boolean shouldOverrideUrlLoading(Tab tab, WebView view, String url) {
<start>if (view.isPrivateBrowsingEnabled()) {
//comment
//comment
return false;
}<end>

if (url.startsWith(SCHEME_WTAI)) {
//comment
//comment
if (url.startsWith(SCHEME_WTAI_MC)) {
Intent intent = new Intent(Intent.ACTION_VIEW,
Uri.parse(WebView.SCHEME_TEL +
url.substring(SCHEME_WTAI_MC.length())));
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
//comment
//comment
if (url.startsWith(SCHEME_WTAI_SD)) {
//comment
return false;
}
//comment
//comment
//comment
if (url.startsWith(SCHEME_WTAI_AP)) {
//comment
return false;
}
}

//comment
//comment
if (url.startsWith(""about:"")) {
return false;
}

//comment
//comment
if (rlzProviderPresent()) {
Uri siteUri = Uri.parse(url);
if (needsRlzString(siteUri)) {
//comment
//comment
//comment
//comment
new RLZTask(tab, siteUri, view).execute();
return true;
}
}

if (startActivityForUrl(tab, url)) {
return true;
}

if (handleMenuClick(tab, url)) {
return true;
}

return false;
}"
260,"@Override
public AssetFileDescriptor openAssetFile(final Uri uri, final String mode) {
if (null == mode || !""r"".equals(mode)) return null;

final int match = matchUri(uri);
if (DICTIONARY_V1_DICT_INFO != match && DICTIONARY_V2_DATAFILE != match) {
//comment
<start>Log.w(TAG, ""Unsupported URI for openAssetFile : "" + uri);
return null;<end>
}
final String wordlistId = uri.getLastPathSegment();
final String clientId = getClientId(uri);
final ContentValues wordList = getWordlistMetadataForWordlistId(clientId, wordlistId);

if (null == wordList) return null;

try {
final int status = wordList.getAsInteger(MetadataDbHelper.STATUS_COLUMN);
if (MetadataDbHelper.STATUS_DELETING == status) {
//comment
//comment
//comment
//comment
final AssetFileDescriptor afd = getContext().getResources().openRawResourceFd(
R.raw.empty);
return afd;
} else {
final String localFilename =
wordList.getAsString(MetadataDbHelper.LOCAL_FILENAME_COLUMN);
final File f = getContext().getFileStreamPath(localFilename);
final ParcelFileDescriptor pfd =
ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
return new AssetFileDescriptor(pfd, 0, pfd.getStatSize());
}
} catch (FileNotFoundException e) {
//comment
}
return null;
}","@Override
public AssetFileDescriptor openAssetFile(final Uri uri, final String mode) {
if (null == mode || !""r"".equals(mode)) return null;

final int match = matchUri(uri);
<start>if (DICTIONARY_V1_DICT_INFO != match && DICTIONARY_V2_DATAFILE != match) {<end>
//comment
Log.w(TAG, ""Unsupported URI for openAssetFile : "" + uri);
return null;
}
final String wordlistId = uri.getLastPathSegment();
final String clientId = getClientId(uri);
final ContentValues wordList = getWordlistMetadataForWordlistId(clientId, wordlistId);

if (null == wordList) return null;

try {
final int status = wordList.getAsInteger(MetadataDbHelper.STATUS_COLUMN);
if (MetadataDbHelper.STATUS_DELETING == status) {
//comment
//comment
//comment
//comment
final AssetFileDescriptor afd = getContext().getResources().openRawResourceFd(
R.raw.empty);
return afd;
} else {
final String localFilename =
wordList.getAsString(MetadataDbHelper.LOCAL_FILENAME_COLUMN);
final File f = getContext().getFileStreamPath(localFilename);
final ParcelFileDescriptor pfd =
ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
return new AssetFileDescriptor(pfd, 0, pfd.getStatSize());
}
} catch (FileNotFoundException e) {
//comment
}
return null;
}"
262,"public int runDx(Arguments arguments) throws IOException {

//comment
<start>errors.set(0);<end>
//comment
//comment
libraryDexBuffers.clear();

args = arguments;
args.makeOptionsObjects();

OutputStream humanOutRaw = null;
if (args.humanOutName != null) {
humanOutRaw = openOutput(args.humanOutName);
humanOutWriter = new OutputStreamWriter(humanOutRaw);
}

try {
if (args.multiDex) {
return runMultiDex();
} else {
return runMonoDex();
}
} finally {
closeOutput(humanOutRaw);
}
}","public int runDx(Arguments arguments) throws IOException {

//comment
<start>errors.set(0);<end>
//comment
//comment
libraryDexBuffers.clear();

args = arguments;
args.makeOptionsObjects();

OutputStream humanOutRaw = null;
if (args.humanOutName != null) {
humanOutRaw = openOutput(args.humanOutName);
humanOutWriter = new OutputStreamWriter(humanOutRaw);
}

try {
if (args.multiDex) {
return runMultiDex();
} else {
return runMonoDex();
}
} finally {
closeOutput(humanOutRaw);
}
}"
263,"<start>        public void checkEmptyClick() {
//comment
mIcon = setIcon(mIconURI, ""**null**"".equals(mClickAction)
? mLongPressAction : mClickAction);<end>
}","        public void checkEmptyClick() {
//comment
<start>mIcon = setIcon(mIconURI, ""**null**"".equals(mClickAction)
? mLongPressAction : mClickAction);<end>
}"
265,"    private void otaPerformActivation() {
if (DBG) log(""otaPerformActivation()..."");
if (!mInteractive) {
//comment
Log.w(LOG_TAG, ""otaPerformActivation: not interactive!"");
return;
}

if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
//comment
Intent newIntent = new Intent(Intent.ACTION_CALL);
newIntent.setData(Uri.fromParts(Constants.SCHEME_TEL, OTASP_NUMBER, null));

//comment
<start>mApplication.callController.placeCall(newIntent);<end>

//comment
otaShowListeningScreen();
mInCallScreen.requestUpdateScreen();
}
return;
}","    private void otaPerformActivation() {
if (DBG) log(""otaPerformActivation()..."");
if (!mInteractive) {
//comment
Log.w(LOG_TAG, ""otaPerformActivation: not interactive!"");
return;
}

if (!mApplication.cdmaOtaProvisionData.inOtaSpcState) {
//comment
<start>Intent newIntent = new Intent(Intent.ACTION_CALL);
newIntent.setData(Uri.fromParts(Constants.SCHEME_TEL, OTASP_NUMBER, null));<end>

//comment
<start>mApplication.callController.placeCall(newIntent);<end>

//comment
otaShowListeningScreen();
mInCallScreen.requestUpdateScreen();
}
return;
}"
266,"public CharSequence getWordBeforeCursorIfAtEndOfWord(final SettingsValues settings) {
//comment
//comment
//comment
final CharSequence textAfterCursor = getTextAfterCursor(1, 0);
if (!TextUtils.isEmpty(textAfterCursor)
&& !settings.isWordSeparator(textAfterCursor.charAt(0))) return null;

//comment
//comment
CharSequence word = getWordAtCursor(settings.mWordSeparators);
//comment
//comment
while (!TextUtils.isEmpty(word) && Constants.CODE_SINGLE_QUOTE == word.charAt(0)) {
word = word.subSequence(1, word.length());
}
if (TextUtils.isEmpty(word)) return null;
//comment
<start>final int lastCodePoint = Character.codePointBefore(word, word.length());<end>
//comment
//comment
if (!Character.isDefined(lastCodePoint)) return null;
//comment
//comment
//comment
if (settings.isWordSeparator(lastCodePoint)) return null;
final char firstChar = word.charAt(0);
if (word.length() == 1 && !Character.isLetter(firstChar)) return null;

//comment
//comment
if (!Character.isLetter(firstChar)) return null;

return word;
}","public CharSequence getWordBeforeCursorIfAtEndOfWord(final SettingsValues settings) {
//comment
//comment
//comment
final CharSequence textAfterCursor = getTextAfterCursor(1, 0);
if (!TextUtils.isEmpty(textAfterCursor)
&& !settings.isWordSeparator(textAfterCursor.charAt(0))) return null;

//comment
//comment
CharSequence word = getWordAtCursor(settings.mWordSeparators);
//comment
//comment
while (!TextUtils.isEmpty(word) && Constants.CODE_SINGLE_QUOTE == word.charAt(0)) {
word = word.subSequence(1, word.length());
}
if (TextUtils.isEmpty(word)) return null;
//comment
<start>final int lastCodePoint = Character.codePointBefore(word, word.length());<end>
//comment
//comment
if (!Character.isDefined(lastCodePoint)) return null;
//comment
//comment
//comment
if (settings.isWordSeparator(lastCodePoint)) return null;
final char firstChar = word.charAt(0);
if (word.length() == 1 && !Character.isLetter(firstChar)) return null;

//comment
//comment
if (!Character.isLetter(firstChar)) return null;

return word;
}"
270,"    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;

//comment
//comment
//comment
final String lowerCaseText = text.toLowerCase(mLocale);
if (dict.isValidWord(lowerCaseText)) return true;
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;

//comment
//comment
//comment
return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));
}","    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
<start>if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;<end>

//comment
//comment
//comment
final String lowerCaseText = text.toLowerCase(mLocale);
if (dict.isValidWord(lowerCaseText)) return true;
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;

//comment
//comment
//comment
return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));
}"
273,"private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
<start>if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);<end>
} else {
//comment
//comment
<start>List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}<end>
}

return permissionOrAppOpChanged;
}","private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
} else {
//comment
//comment
<start>List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}<end>
}

return permissionOrAppOpChanged;
}"
277,"    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
<start>} else if (mShiftKeyState.isChording()) {<end>
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
<start>&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);<end>
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
<start>mIsInAlphabetUnshiftedFromShifted = true;<end>
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}","    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
<start>if (mIsInDoubleTapShiftKey) {<end>
//comment
//comment
mIsInDoubleTapShiftKey = false;
<start>} else if (mLongPressShiftLockFired) {<end>
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
<start>} else if (mShiftKeyState.isChording()) {<end>
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
<start>} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {<end>
//comment
setShiftLocked(true);
<start>} else if (mAlphabetShiftState.isManualShifted() && withSliding) {<end>
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
<start>} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {<end>
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}"
278,"private void notifyMyObservers(boolean leaf, ContentObserver observer,
boolean selfNotify) {
int N = mObservers.size();
for (int i = 0; i < N; i++) {
<start>MockObserverEntry entry = mObservers.get(i);<end>

//comment
//comment
<start>if (entry.observer == observer && !selfNotify) {
continue;
}<end>

//comment
if (leaf || (!leaf && entry.notifyForDescendents)) {
entry.observer.onChange(selfNotify);
}
}
}","private void notifyMyObservers(boolean leaf, ContentObserver observer,
boolean selfNotify) {
int N = mObservers.size();
for (int i = 0; i < N; i++) {
MockObserverEntry entry = mObservers.get(i);

//comment
//comment
<start>if (entry.observer == observer && !selfNotify) {
continue;
}<end>

//comment
if (leaf || (!leaf && entry.notifyForDescendents)) {
entry.observer.onChange(selfNotify);
}
}
}"
279,"private static void createForegroundBackgroundPermissionMappings(@NonNull Context context) {
List<String> permissions = new ArrayList<>();
sBackgroundToForegroundPermissions = new ArrayMap<>();

PackageManager packageManager = context.getPackageManager();
List<PermissionGroupInfo> permissionGroupInfos = packageManager.getAllPermissionGroups(0);

int permissionGroupInfosSize = permissionGroupInfos.size();
for (int permissionGroupInfosIndex = 0;
permissionGroupInfosIndex < permissionGroupInfosSize; permissionGroupInfosIndex++) {
PermissionGroupInfo permissionGroupInfo = permissionGroupInfos.get(
permissionGroupInfosIndex);

List<PermissionInfo> permissionInfos;
try {
permissionInfos = Utils.getPermissionInfosForGroup(packageManager,
permissionGroupInfo.name);
} catch (PackageManager.NameNotFoundException e) {
Log.e(LOG_TAG, ""Cannot get permissions for group: "" + permissionGroupInfo.name);
continue;
}

int permissionInfosSize = permissionInfos.size();
for (int permissionInfosIndex = 0; permissionInfosIndex < permissionInfosSize;
permissionInfosIndex++) {
PermissionInfo permissionInfo = permissionInfos.get(permissionInfosIndex);

String permission = permissionInfo.name;
permissions.add(permission);

String backgroundPermission = permissionInfo.backgroundPermission;
if (backgroundPermission != null) {
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.get(
backgroundPermission);
if (foregroundPermissions == null) {
foregroundPermissions = new ArrayList<>();
sBackgroundToForegroundPermissions.put(backgroundPermission,
foregroundPermissions);
}
foregroundPermissions.add(permission);
}
}
}

//comment
//comment
sBackgroundToForegroundPermissions.retainAll(permissions);

//comment
<start>sForegroundToBackgroundPermission = new ArrayMap<>();<end>

int backgroundToForegroundPermissionsSize = sBackgroundToForegroundPermissions.size();
for (int backgroundToForegroundPermissionsIndex = 0;
backgroundToForegroundPermissionsIndex < backgroundToForegroundPermissionsSize;
backgroundToForegroundPermissionsIndex++) {
String backgroundPerimssion = sBackgroundToForegroundPermissions.keyAt(
backgroundToForegroundPermissionsIndex);
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.valueAt(
backgroundToForegroundPermissionsIndex);

int foregroundPermissionsSize = foregroundPermissions.size();
for (int foregroundPermissionsIndex = 0;
foregroundPermissionsIndex < foregroundPermissionsSize;
foregroundPermissionsIndex++) {
String foregroundPermission = foregroundPermissions.get(foregroundPermissionsIndex);

sForegroundToBackgroundPermission.put(foregroundPermission, backgroundPerimssion);
}
}
}","private static void createForegroundBackgroundPermissionMappings(@NonNull Context context) {
List<String> permissions = new ArrayList<>();
sBackgroundToForegroundPermissions = new ArrayMap<>();

PackageManager packageManager = context.getPackageManager();
List<PermissionGroupInfo> permissionGroupInfos = packageManager.getAllPermissionGroups(0);

int permissionGroupInfosSize = permissionGroupInfos.size();
for (int permissionGroupInfosIndex = 0;
permissionGroupInfosIndex < permissionGroupInfosSize; permissionGroupInfosIndex++) {
PermissionGroupInfo permissionGroupInfo = permissionGroupInfos.get(
permissionGroupInfosIndex);

List<PermissionInfo> permissionInfos;
try {
permissionInfos = Utils.getPermissionInfosForGroup(packageManager,
permissionGroupInfo.name);
} catch (PackageManager.NameNotFoundException e) {
Log.e(LOG_TAG, ""Cannot get permissions for group: "" + permissionGroupInfo.name);
continue;
}

int permissionInfosSize = permissionInfos.size();
for (int permissionInfosIndex = 0; permissionInfosIndex < permissionInfosSize;
permissionInfosIndex++) {
PermissionInfo permissionInfo = permissionInfos.get(permissionInfosIndex);

String permission = permissionInfo.name;
permissions.add(permission);

String backgroundPermission = permissionInfo.backgroundPermission;
if (backgroundPermission != null) {
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.get(
backgroundPermission);
if (foregroundPermissions == null) {
foregroundPermissions = new ArrayList<>();
sBackgroundToForegroundPermissions.put(backgroundPermission,
foregroundPermissions);
}
foregroundPermissions.add(permission);
}
}
}

//comment
//comment
sBackgroundToForegroundPermissions.retainAll(permissions);

//comment
<start>sForegroundToBackgroundPermission = new ArrayMap<>();

int backgroundToForegroundPermissionsSize = sBackgroundToForegroundPermissions.size();
for (int backgroundToForegroundPermissionsIndex = 0;
backgroundToForegroundPermissionsIndex < backgroundToForegroundPermissionsSize;
backgroundToForegroundPermissionsIndex++) {
String backgroundPerimssion = sBackgroundToForegroundPermissions.keyAt(
backgroundToForegroundPermissionsIndex);
List<String> foregroundPermissions = sBackgroundToForegroundPermissions.valueAt(
backgroundToForegroundPermissionsIndex);

int foregroundPermissionsSize = foregroundPermissions.size();
for (int foregroundPermissionsIndex = 0;
foregroundPermissionsIndex < foregroundPermissionsSize;
foregroundPermissionsIndex++) {
String foregroundPermission = foregroundPermissions.get(foregroundPermissionsIndex);

sForegroundToBackgroundPermission.put(foregroundPermission, backgroundPerimssion);
}
}<end>
}"
280,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
<start>Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());<end>
Set<String> prefixFilters = new ArraySet<>();
<start>if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}<end>

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
<start>Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}<end>

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
281,"private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
<start>InputStream inStream = null;<end>
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}","private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
<start>InputStream inStream = null;<end>
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
<start>inStream = context.getContentResolver().openInputStream(fileUri);<end>
}
}
//comment
writer.flush();
<start>Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();<end>

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}"
285,"private Dex mergeDexes() throws IOException {
mergeStringIds();
mergeTypeIds();
mergeTypeLists();
mergeProtoIds();
mergeFieldIds();
mergeMethodIds();
mergeMethodHandles();
mergeAnnotations();
unionAnnotationSetsAndDirectories();
mergeCallSiteIds();
mergeClassDefs();

//comment
Arrays.sort(contentsOut.sections);

//comment
<start>contentsOut.header.off = 0;
contentsOut.header.size = 1;<end>
contentsOut.fileSize = dexOut.getLength();
contentsOut.computeSizesFromOffsets();
contentsOut.writeHeader(headerOut, mergeApiLevels());
<start>contentsOut.writeMap(mapListOut);<end>

//comment
dexOut.writeHashes();

return dexOut;
}","private Dex mergeDexes() throws IOException {
mergeStringIds();
mergeTypeIds();
mergeTypeLists();
mergeProtoIds();
mergeFieldIds();
mergeMethodIds();
mergeMethodHandles();
mergeAnnotations();
unionAnnotationSetsAndDirectories();
mergeCallSiteIds();
mergeClassDefs();

//comment
Arrays.sort(contentsOut.sections);

//comment
contentsOut.header.off = 0;
contentsOut.header.size = 1;
contentsOut.fileSize = dexOut.getLength();
contentsOut.computeSizesFromOffsets();
<start>contentsOut.writeHeader(headerOut, mergeApiLevels());<end>
contentsOut.writeMap(mapListOut);

//comment
dexOut.writeHashes();

return dexOut;
}"
286,"    @Override
public void onClick(View v) {
int direction =  mVideoCallManager.getCameraDirection();

//comment
//comment
//comment
<start>switch(direction) {
case CAMERA_UNKNOWN:
switchCamera(mFrontCameraId);
break;<end>
case Camera.CameraInfo.CAMERA_FACING_FRONT:
switchCamera(mBackCameraId);
break;
case Camera.CameraInfo.CAMERA_FACING_BACK:
switchCamera(CAMERA_UNKNOWN);
break;
}
}","    @Override
public void onClick(View v) {
int direction =  mVideoCallManager.getCameraDirection();

//comment
//comment
//comment
<start>switch(direction) {
case CAMERA_UNKNOWN:
switchCamera(mFrontCameraId);
break;
case Camera.CameraInfo.CAMERA_FACING_FRONT:
switchCamera(mBackCameraId);
break;
case Camera.CameraInfo.CAMERA_FACING_BACK:
switchCamera(CAMERA_UNKNOWN);
break;
}<end>
}"
287,"private void doGetNamespace(boolean hasNamespaceCapability) throws MessagingException {
//comment
if (hasNamespaceCapability && !mImapStore.isUserPrefixSet()) {
List<ImapResponse> responseList = Collections.emptyList();

try {
responseList = executeSimpleCommand(ImapConstants.NAMESPACE);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
}

for (ImapResponse response: responseList) {
if (response.isDataResponse(0, ImapConstants.NAMESPACE)) {
ImapList namespaceList = response.getListOrEmpty(1);
ImapList namespace = namespaceList.getListOrEmpty(0);
String namespaceString = namespace.getStringOrEmpty(0).getString();
if (!TextUtils.isEmpty(namespaceString)) {
mImapStore.setPathPrefix(ImapStore.decodeFolderName(namespaceString, null));
mImapStore.setPathSeparator(namespace.getStringOrEmpty(1).getString());
}
}
}
}
}","private void doGetNamespace(boolean hasNamespaceCapability) throws MessagingException {
//comment
<start>if (hasNamespaceCapability && !mImapStore.isUserPrefixSet()) {
List<ImapResponse> responseList = Collections.emptyList();

try {
responseList = executeSimpleCommand(ImapConstants.NAMESPACE);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
}

for (ImapResponse response: responseList) {
if (response.isDataResponse(0, ImapConstants.NAMESPACE)) {
ImapList namespaceList = response.getListOrEmpty(1);
ImapList namespace = namespaceList.getListOrEmpty(0);
String namespaceString = namespace.getStringOrEmpty(0).getString();
if (!TextUtils.isEmpty(namespaceString)) {
mImapStore.setPathPrefix(ImapStore.decodeFolderName(namespaceString, null));
mImapStore.setPathSeparator(namespace.getStringOrEmpty(1).getString());
}
}
}
}<end>
}"
288,"static @NonNull List<BackupPermissionState> parseFromXml(@NonNull XmlPullParser parser,
@NonNull Context context, int backupPlatformVersion)
throws XmlPullParserException {
String permName = parser.getAttributeValue(null, ATTR_PERMISSION_NAME);
if (permName == null) {
throw new XmlPullParserException(""Found "" + TAG_PERMISSION + "" without ""
+ ATTR_PERMISSION_NAME);
}

ArrayList<String> expandedPermissions = new ArrayList<>();
expandedPermissions.add(permName);

List<SplitPermissionInfo> splitPerms = context.getSystemService(
PermissionManager.class).getSplitPermissions();

//comment
//comment
<start>int numSplitPerms = splitPerms.size();
for (int i = 0; i < numSplitPerms; i++) {
SplitPermissionInfo splitPerm = splitPerms.get(i);
if (backupPlatformVersion < splitPerm.getTargetSdk()
&& permName.equals(splitPerm.getSplitPermission())) {
expandedPermissions.addAll(splitPerm.getNewPermissions());
}
}<end>

ArrayList<BackupPermissionState> parsedPermissions = new ArrayList<>(
expandedPermissions.size());
int numExpandedPerms = expandedPermissions.size();
for (int i = 0; i < numExpandedPerms; i++) {
parsedPermissions.add(new BackupPermissionState(expandedPermissions.get(i),
""true"".equals(parser.getAttributeValue(null, ATTR_IS_GRANTED)),
""true"".equals(parser.getAttributeValue(null, ATTR_USER_SET)),
""true"".equals(parser.getAttributeValue(null, ATTR_USER_FIXED)),
""true"".equals(parser.getAttributeValue(null, ATTR_WAS_REVIEWED))));
}

return parsedPermissions;
}","static @NonNull List<BackupPermissionState> parseFromXml(@NonNull XmlPullParser parser,
@NonNull Context context, int backupPlatformVersion)
throws XmlPullParserException {
String permName = parser.getAttributeValue(null, ATTR_PERMISSION_NAME);
if (permName == null) {
throw new XmlPullParserException(""Found "" + TAG_PERMISSION + "" without ""
+ ATTR_PERMISSION_NAME);
}

ArrayList<String> expandedPermissions = new ArrayList<>();
expandedPermissions.add(permName);

List<SplitPermissionInfo> splitPerms = context.getSystemService(
PermissionManager.class).getSplitPermissions();

//comment
//comment
<start>int numSplitPerms = splitPerms.size();
for (int i = 0; i < numSplitPerms; i++) {
SplitPermissionInfo splitPerm = splitPerms.get(i);
if (backupPlatformVersion < splitPerm.getTargetSdk()
&& permName.equals(splitPerm.getSplitPermission())) {
expandedPermissions.addAll(splitPerm.getNewPermissions());
}
}<end>

ArrayList<BackupPermissionState> parsedPermissions = new ArrayList<>(
expandedPermissions.size());
int numExpandedPerms = expandedPermissions.size();
for (int i = 0; i < numExpandedPerms; i++) {
parsedPermissions.add(new BackupPermissionState(expandedPermissions.get(i),
""true"".equals(parser.getAttributeValue(null, ATTR_IS_GRANTED)),
""true"".equals(parser.getAttributeValue(null, ATTR_USER_SET)),
""true"".equals(parser.getAttributeValue(null, ATTR_USER_FIXED)),
""true"".equals(parser.getAttributeValue(null, ATTR_WAS_REVIEWED))));
}

return parsedPermissions;
}"
289,"@Override
public void onResume() {
super.onResume();

//comment
final PreferenceScreen screen = getPreferenceScreen();
screen.removeAll();

//comment
//comment
final ArrayList<Pair<ApplicationInfo, Integer>> pipApps =
collectPipApps(UserHandle.myUserId());
Collections.sort(pipApps, new AppComparator(mPackageManager));

//comment
final Context prefContext = getPrefContext();
for (final Pair<ApplicationInfo, Integer> appData : pipApps) {
final ApplicationInfo appInfo = appData.first;
final int userId = appData.second;
final UserHandle user = UserHandle.of(userId);
final String packageName = appInfo.packageName;
final CharSequence label = appInfo.loadLabel(mPackageManager);

final Preference pref = new AppPreference(prefContext);
pref.setIcon(mIconDrawableFactory.getBadgedIcon(appInfo, userId));
pref.setTitle(mPackageManager.getUserBadgedLabel(label, user));
pref.setSummary(PictureInPictureDetails.getPreferenceSummary(prefContext,
appInfo.uid, packageName));
pref.setOnPreferenceClickListener(new OnPreferenceClickListener() {
@Override
public boolean onPreferenceClick(Preference preference) {
AppInfoBase.startAppInfoFragment(PictureInPictureDetails.class,
R.string.picture_in_picture_app_detail_title, packageName, appInfo.uid,
PictureInPictureSettings.this, -1, getMetricsCategory());
return true;
}
});
screen.addPreference(pref);
}
}","@Override
public void onResume() {
super.onResume();

//comment
<start>final PreferenceScreen screen = getPreferenceScreen();
screen.removeAll();<end>

//comment
//comment
<start>final ArrayList<Pair<ApplicationInfo, Integer>> pipApps =
collectPipApps(UserHandle.myUserId());<end>
Collections.sort(pipApps, new AppComparator(mPackageManager));

//comment
final Context prefContext = getPrefContext();
for (final Pair<ApplicationInfo, Integer> appData : pipApps) {
final ApplicationInfo appInfo = appData.first;
final int userId = appData.second;
final UserHandle user = UserHandle.of(userId);
final String packageName = appInfo.packageName;
final CharSequence label = appInfo.loadLabel(mPackageManager);

final Preference pref = new AppPreference(prefContext);
pref.setIcon(mIconDrawableFactory.getBadgedIcon(appInfo, userId));
pref.setTitle(mPackageManager.getUserBadgedLabel(label, user));
pref.setSummary(PictureInPictureDetails.getPreferenceSummary(prefContext,
appInfo.uid, packageName));
pref.setOnPreferenceClickListener(new OnPreferenceClickListener() {
@Override
public boolean onPreferenceClick(Preference preference) {
AppInfoBase.startAppInfoFragment(PictureInPictureDetails.class,
R.string.picture_in_picture_app_detail_title, packageName, appInfo.uid,
PictureInPictureSettings.this, -1, getMetricsCategory());
return true;
}
});
screen.addPreference(pref);
}
}"
291,"private Drawable loadDrawableInner(Context context) {
switch (mType) {
case TYPE_BITMAP:
return new BitmapDrawable(context.getResources(), (Bitmap) mObj1);
case TYPE_ADAPTIVE_BITMAP:
return new BitmapDrawable(context.getResources(),
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
case TYPE_RESOURCE:
Resources res;
//comment
String resPackage = (String) mObj1;
if (TextUtils.isEmpty(resPackage)) {
//comment
resPackage = context.getPackageName();
}
if (""android"".equals(resPackage)) {
res = Resources.getSystem();
} else {
final PackageManager pm = context.getPackageManager();
try {
ApplicationInfo ai = pm.getApplicationInfo(
resPackage, PackageManager.MATCH_UNINSTALLED_PACKAGES);
if (ai != null) {
res = pm.getResourcesForApplication(ai);
} else {
break;
}
} catch (PackageManager.NameNotFoundException e) {
Log.e(TAG, String.format(""Unable to find pkg=%s for icon %s"",
resPackage, this), e);
break;
}
}
try {
return ResourcesCompat.getDrawable(res, mInt1, context.getTheme());
} catch (RuntimeException e) {
Log.e(TAG, String.format(""Unable to load resource 0x%08x from pkg=%s"",
mInt1,
mObj1),
e);
}
break;
case TYPE_DATA:
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeByteArray((byte[]) mObj1, mInt1, mInt2)
);
case TYPE_URI:
final Uri uri = Uri.parse((String) mObj1);
final String scheme = uri.getScheme();
InputStream is = null;
if (ContentResolver.SCHEME_CONTENT.equals(scheme)
|| ContentResolver.SCHEME_FILE.equals(scheme)) {
try {
is = context.getContentResolver().openInputStream(uri);
} catch (Exception e) {
Log.w(TAG, ""Unable to load image from URI: "" + uri, e);
}
} else {
try {
is = new FileInputStream(new File((String) mObj1));
} catch (FileNotFoundException e) {
Log.w(TAG, ""Unable to load image from path: "" + uri, e);
}
}
if (is != null) {
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeStream(is));
}
break;
}
return null;
}","private Drawable loadDrawableInner(Context context) {
switch (mType) {
case TYPE_BITMAP:
return new BitmapDrawable(context.getResources(), (Bitmap) mObj1);
case TYPE_ADAPTIVE_BITMAP:
return new BitmapDrawable(context.getResources(),
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
case TYPE_RESOURCE:
Resources res;
//comment
<start>String resPackage = (String) mObj1;
if (TextUtils.isEmpty(resPackage)) {
//comment
resPackage = context.getPackageName();
}
if (""android"".equals(resPackage)) {
res = Resources.getSystem();
} else {
final PackageManager pm = context.getPackageManager();
try {
ApplicationInfo ai = pm.getApplicationInfo(
resPackage, PackageManager.MATCH_UNINSTALLED_PACKAGES);
if (ai != null) {
res = pm.getResourcesForApplication(ai);
} else {
break;
}
} catch (PackageManager.NameNotFoundException e) {
Log.e(TAG, String.format(""Unable to find pkg=%s for icon %s"",
resPackage, this), e);
break;
}
}<end>
try {
return ResourcesCompat.getDrawable(res, mInt1, context.getTheme());
} catch (RuntimeException e) {
Log.e(TAG, String.format(""Unable to load resource 0x%08x from pkg=%s"",
mInt1,
mObj1),
e);
}
break;
case TYPE_DATA:
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeByteArray((byte[]) mObj1, mInt1, mInt2)
);
case TYPE_URI:
final Uri uri = Uri.parse((String) mObj1);
final String scheme = uri.getScheme();
InputStream is = null;
if (ContentResolver.SCHEME_CONTENT.equals(scheme)
|| ContentResolver.SCHEME_FILE.equals(scheme)) {
try {
is = context.getContentResolver().openInputStream(uri);
} catch (Exception e) {
Log.w(TAG, ""Unable to load image from URI: "" + uri, e);
}
} else {
try {
is = new FileInputStream(new File((String) mObj1));
} catch (FileNotFoundException e) {
Log.w(TAG, ""Unable to load image from path: "" + uri, e);
}
}
if (is != null) {
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeStream(is));
}
break;
}
return null;
}"
292,"        @Override
public String getDeviceId() {
try {
<start>EmailAsyncTask.runAsyncSerial(new Runnable() {<end>
@Override
public void run() {
//comment
<start>EmailServiceUtils.startRemoteServices(mContext);
//comment
DebugUtils.updateLoggingFlags(mContext);<end>
}});
return Device.getDeviceId(mContext);
} catch (IOException e) {
return null;
}
}","        @Override
public String getDeviceId() {
try {
EmailAsyncTask.runAsyncSerial(new Runnable() {
@Override
public void run() {
//comment
<start>EmailServiceUtils.startRemoteServices(mContext);<end>
//comment
DebugUtils.updateLoggingFlags(mContext);
}});
return Device.getDeviceId(mContext);
} catch (IOException e) {
return null;
}
}"
294,"private Spannable createSpannable(CharSequence charSequence) {
final Spannable spannable = (mTextType == TextType.SPANNABLE_BUILDER) ?
new SpannableStringBuilder(charSequence) : new SpannableString(charSequence);

if (!mCreateBoring) {
//comment
<start>spannable.setSpan(new BulletSpan(), 0, spannable.length(), SPAN_INCLUSIVE_INCLUSIVE);<end>
}

spannable.setSpan(new Object(), 0, spannable.length(), SPAN_INCLUSIVE_INCLUSIVE);
spannable.setSpan(new Object(), 0, 1, SPAN_INCLUSIVE_INCLUSIVE);

return spannable;
}","private Spannable createSpannable(CharSequence charSequence) {
final Spannable spannable = (mTextType == TextType.SPANNABLE_BUILDER) ?
new SpannableStringBuilder(charSequence) : new SpannableString(charSequence);

if (!mCreateBoring) {
//comment
<start>spannable.setSpan(new BulletSpan(), 0, spannable.length(), SPAN_INCLUSIVE_INCLUSIVE);<end>
}

spannable.setSpan(new Object(), 0, spannable.length(), SPAN_INCLUSIVE_INCLUSIVE);
spannable.setSpan(new Object(), 0, 1, SPAN_INCLUSIVE_INCLUSIVE);

return spannable;
}"
300,"boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
<start>intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);<end>
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}","boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
<start>intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);<end>
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}"
301,"private void queueError(int err, String desc) {
if (mQueuedErrors == null) {
mQueuedErrors = new LinkedList<ErrorDialog>();
}
for (ErrorDialog d : mQueuedErrors) {
if (d.mError == err) {
//comment
return;
}
}
<start>ErrorDialog errDialog = new ErrorDialog(
err == WebViewClient.ERROR_FILE_NOT_FOUND ?
R.string.browserFrameFileErrorLabel :
R.string.browserFrameNetworkErrorLabel,
desc, err);<end>
mQueuedErrors.addLast(errDialog);

//comment
<start>if (mQueuedErrors.size() == 1 && mInForeground) {
showError(errDialog);
}<end>
}","private void queueError(int err, String desc) {
if (mQueuedErrors == null) {
mQueuedErrors = new LinkedList<ErrorDialog>();
}
for (ErrorDialog d : mQueuedErrors) {
if (d.mError == err) {
//comment
return;
}
}
ErrorDialog errDialog = new ErrorDialog(
err == WebViewClient.ERROR_FILE_NOT_FOUND ?
R.string.browserFrameFileErrorLabel :
R.string.browserFrameNetworkErrorLabel,
desc, err);
mQueuedErrors.addLast(errDialog);

//comment
<start>if (mQueuedErrors.size() == 1 && mInForeground) {
showError(errDialog);
}<end>
}"
303,"private EventInfo populateEventInfo(long eventId, boolean allDay, long start, long end,
int startDay, int endDay, String title, String location, int color, int selfStatus) {
EventInfo eventInfo = new EventInfo();

//comment
<start>StringBuilder whenString = new StringBuilder();<end>
int visibWhen;
int flags = DateUtils.FORMAT_ABBREV_ALL;
visibWhen = View.VISIBLE;
if (allDay) {
flags |= DateUtils.FORMAT_SHOW_DATE;
whenString.append(Utils.formatDateRange(mContext, start, end, flags));
} else {
flags |= DateUtils.FORMAT_SHOW_TIME;
if (DateFormat.is24HourFormat(mContext)) {
flags |= DateUtils.FORMAT_24HOUR;
}
if (endDay > startDay) {
flags |= DateUtils.FORMAT_SHOW_DATE;
}
whenString.append(Utils.formatDateRange(mContext, start, end, flags));

if (mShowTZ) {
whenString.append("" "").append(mHomeTZName);
}
}
eventInfo.id = eventId;
eventInfo.start = start;
eventInfo.end = end;
eventInfo.allDay = allDay;
eventInfo.when = whenString.toString();
eventInfo.visibWhen = visibWhen;
eventInfo.color = color;
eventInfo.selfAttendeeStatus = selfStatus;

//comment
if (TextUtils.isEmpty(title)) {
eventInfo.title = mContext.getString(R.string.no_title_label);
} else {
eventInfo.title = title;
}
eventInfo.visibTitle = View.VISIBLE;

//comment
if (!TextUtils.isEmpty(location)) {
eventInfo.visibWhere = View.VISIBLE;
eventInfo.where = location;
} else {
eventInfo.visibWhere = View.GONE;
}
return eventInfo;
}","private EventInfo populateEventInfo(long eventId, boolean allDay, long start, long end,
int startDay, int endDay, String title, String location, int color, int selfStatus) {
EventInfo eventInfo = new EventInfo();

//comment
<start>StringBuilder whenString = new StringBuilder();
int visibWhen;
int flags = DateUtils.FORMAT_ABBREV_ALL;
visibWhen = View.VISIBLE;
if (allDay) {
flags |= DateUtils.FORMAT_SHOW_DATE;
whenString.append(Utils.formatDateRange(mContext, start, end, flags));
} else {
flags |= DateUtils.FORMAT_SHOW_TIME;
if (DateFormat.is24HourFormat(mContext)) {
flags |= DateUtils.FORMAT_24HOUR;
}
if (endDay > startDay) {
flags |= DateUtils.FORMAT_SHOW_DATE;
}
whenString.append(Utils.formatDateRange(mContext, start, end, flags));

if (mShowTZ) {
whenString.append("" "").append(mHomeTZName);
}
}<end>
eventInfo.id = eventId;
eventInfo.start = start;
eventInfo.end = end;
eventInfo.allDay = allDay;
eventInfo.when = whenString.toString();
eventInfo.visibWhen = visibWhen;
eventInfo.color = color;
eventInfo.selfAttendeeStatus = selfStatus;

//comment
if (TextUtils.isEmpty(title)) {
eventInfo.title = mContext.getString(R.string.no_title_label);
} else {
eventInfo.title = title;
}
eventInfo.visibTitle = View.VISIBLE;

//comment
if (!TextUtils.isEmpty(location)) {
eventInfo.visibWhere = View.VISIBLE;
eventInfo.where = location;
} else {
eventInfo.visibWhere = View.GONE;
}
return eventInfo;
}"
304,"@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
//comment
if (mGestureNavigationEnabled) {
switch (keyCode) {
case KeyEvent.KEYCODE_NAVIGATE_PREVIOUS:
fling(0, -mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_NEXT:
fling(0, mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_IN:
return tapCenterView();
case KeyEvent.KEYCODE_NAVIGATE_OUT:
//comment
//comment
return false;
}
}
return super.onKeyDown(keyCode, event);
}","@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
//comment
if (mGestureNavigationEnabled) {
<start>switch (keyCode) {<end>
case KeyEvent.KEYCODE_NAVIGATE_PREVIOUS:
fling(0, -mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_NEXT:
fling(0, mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_IN:
return tapCenterView();
<start>case KeyEvent.KEYCODE_NAVIGATE_OUT:
//comment
//comment
return false;
}<end>
}
return super.onKeyDown(keyCode, event);
}"
305,"<start>    private void tryChangeIccLockState() {
//comment
//comment
new SetIccLockEnabled(mToState, mPin).execute();
//comment
mPinToggle.setEnabled(false);<end>
}","    private void tryChangeIccLockState() {
//comment
//comment
<start>new SetIccLockEnabled(mToState, mPin).execute();<end>
//comment
mPinToggle.setEnabled(false);
}"
307,"public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)
throws IOException {
if (maxSize <= 0) {
throw new IllegalArgumentException(""maxSize <= 0"");
}
if (valueCount <= 0) {
throw new IllegalArgumentException(""valueCount <= 0"");
}

//comment
DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);
if (cache.journalFile.exists()) {
try {
cache.readJournal();
cache.processJournal();
cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true));
return cache;
} catch (IOException journalIsCorrupt) {
System.out.println(""DiskLruCache "" + directory + "" is corrupt: ""
+ journalIsCorrupt.getMessage() + "", removing"");
cache.delete();
}
}

//comment
<start>directory.mkdirs();
cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);<end>
cache.rebuildJournal();
return cache;
}","public static DiskLruCache open(File directory, int appVersion, int valueCount, long maxSize)
throws IOException {
if (maxSize <= 0) {
throw new IllegalArgumentException(""maxSize <= 0"");
}
if (valueCount <= 0) {
throw new IllegalArgumentException(""valueCount <= 0"");
}

//comment
DiskLruCache cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);
if (cache.journalFile.exists()) {
try {
cache.readJournal();
cache.processJournal();
cache.journalWriter = new BufferedWriter(new FileWriter(cache.journalFile, true));
return cache;
} catch (IOException journalIsCorrupt) {
System.out.println(""DiskLruCache "" + directory + "" is corrupt: ""
+ journalIsCorrupt.getMessage() + "", removing"");
cache.delete();
}
}

//comment
<start>directory.mkdirs();
cache = new DiskLruCache(directory, appVersion, valueCount, maxSize);
cache.rebuildJournal();
return cache;<end>
}"
309,"@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");
}
//comment
if (mPreviousVMProviderKey.equals(newProviderKey)) {
if (DBG) log(""No change is made toward VM provider setting."");
return true;
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

if (newProviderSettings == null) {
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
mVMProviderSettingsForced = true;
simulatePreferenceClick(mVoicemailSettings);
} else {
if (DBG) log(""Saved preferences found - switching to them"");
//comment
mChangingVMorFwdDueToProviderChange = true;
<start>saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);<end>
}
<start>} else if (preference == mVoicemailNotificationVibrateWhen) {<end>
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}","@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");
}
//comment
if (mPreviousVMProviderKey.equals(newProviderKey)) {
if (DBG) log(""No change is made toward VM provider setting."");
return true;
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

if (newProviderSettings == null) {
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
mVMProviderSettingsForced = true;
simulatePreferenceClick(mVoicemailSettings);
} else {
if (DBG) log(""Saved preferences found - switching to them"");
//comment
<start>mChangingVMorFwdDueToProviderChange = true;
saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);<end>
}
} else if (preference == mVoicemailNotificationVibrateWhen) {
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}"
310,"        void watchdogAlarm(final AttachmentService service, final int callbackTimeout) {
debugTrace(""Received a timer callback in the watchdog"");

//comment
//comment
final Collection<DownloadRequest> inProgressRequests =
service.mDownloadsInProgress.values();
for (DownloadRequest req: inProgressRequests) {
debugTrace(""Checking in-progress request with id: %d"", req.mAttachmentId);
final boolean shouldCancelDownload = validateDownloadRequest(req, callbackTimeout,
System.currentTimeMillis());
if (shouldCancelDownload) {
LogUtils.w(LOG_TAG, ""Cancelling DownloadRequest #%d"", req.mAttachmentId);
service.cancelDownload(req);
//comment
}
}
//comment
if (service.isConnected()) {
service.processQueue();
}
<start>issueNextWatchdogAlarm(service);<end>
}","        void watchdogAlarm(final AttachmentService service, final int callbackTimeout) {
debugTrace(""Received a timer callback in the watchdog"");

//comment
//comment
final Collection<DownloadRequest> inProgressRequests =
service.mDownloadsInProgress.values();
for (DownloadRequest req: inProgressRequests) {
debugTrace(""Checking in-progress request with id: %d"", req.mAttachmentId);
final boolean shouldCancelDownload = validateDownloadRequest(req, callbackTimeout,
System.currentTimeMillis());
if (shouldCancelDownload) {
LogUtils.w(LOG_TAG, ""Cancelling DownloadRequest #%d"", req.mAttachmentId);
service.cancelDownload(req);
//comment
}
}
//comment
<start>if (service.isConnected()) {
service.processQueue();
}<end>
issueNextWatchdogAlarm(service);
}"
311,"    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
<start>return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {<end>
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
<start>} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;<end>
}
}
}

return false;
}","    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
<start>if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {<end>
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {
//comment
return true;
}
}
}

return false;
}"
312,"	<T> CompletableFuture<T> toCompletableFuture(
final ListenableFuture<T> listenableFuture) {
//comment
CompletableFuture<T> completable = new CompletableFuture<T>() {
@Override
public boolean cancel(boolean mayInterruptIfRunning) {
//comment
<start>boolean result = listenableFuture.cancel(mayInterruptIfRunning);<end>
super.cancel(mayInterruptIfRunning);
return result;
}
};

//comment
listenableFuture.addCallback(new ListenableFutureCallback<T>() {
@Override
public void onSuccess(T result) {
completable.complete(result);
}

@Override
public void onFailure(Throwable t) {
completable.completeExceptionally(t);
}
});
return completable;
}","	<T> CompletableFuture<T> toCompletableFuture(
final ListenableFuture<T> listenableFuture) {
//comment
CompletableFuture<T> completable = new CompletableFuture<T>() {
@Override
public boolean cancel(boolean mayInterruptIfRunning) {
//comment
<start>boolean result = listenableFuture.cancel(mayInterruptIfRunning);
super.cancel(mayInterruptIfRunning);
return result;<end>
}
};

//comment
listenableFuture.addCallback(new ListenableFutureCallback<T>() {
@Override
public void onSuccess(T result) {
completable.complete(result);
}

@Override
public void onFailure(Throwable t) {
completable.completeExceptionally(t);
}
});
return completable;
}"
314,"@Override
public int getBaseline() {
//comment
<start>if (getChildCount() == 0) {
return super.getBaseline();
}<end>

//comment
final int centerChildIndex = findCenterViewIndex();
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();

//comment
if (centerChildBaseline == -1) {
return super.getBaseline();
}

return getCentralViewTop() + centerChildBaseline;
}","@Override
public int getBaseline() {
//comment
<start>if (getChildCount() == 0) {
return super.getBaseline();
}<end>

//comment
final int centerChildIndex = findCenterViewIndex();
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();

//comment
if (centerChildBaseline == -1) {
return super.getBaseline();
}

return getCentralViewTop() + centerChildBaseline;
}"
316,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
<start>final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};<end>

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
<start>final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};<end>

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}"
317,"        @Override
public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
if (mInForeground) {
//comment
ErrorConsoleView errorConsole = getErrorConsole(true);
errorConsole.addErrorMessage(consoleMessage);
if (mWebViewController.shouldShowErrorConsole()
&& errorConsole.getShowState() !=
ErrorConsoleView.SHOW_MAXIMIZED) {
errorConsole.showConsole(ErrorConsoleView.SHOW_MINIMIZED);
}
}

//comment
<start>if (isPrivateBrowsingEnabled()) return true;<end>

String message = ""Console: "" + consoleMessage.message() + "" ""
+ consoleMessage.sourceId() +  "":""
+ consoleMessage.lineNumber();

switch (consoleMessage.messageLevel()) {
case TIP:
Log.v(CONSOLE_LOGTAG, message);
break;
case LOG:
Log.i(CONSOLE_LOGTAG, message);
break;
case WARNING:
Log.w(CONSOLE_LOGTAG, message);
break;
case ERROR:
Log.e(CONSOLE_LOGTAG, message);
break;
case DEBUG:
Log.d(CONSOLE_LOGTAG, message);
break;
}

return true;
}","        @Override
public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
if (mInForeground) {
//comment
ErrorConsoleView errorConsole = getErrorConsole(true);
errorConsole.addErrorMessage(consoleMessage);
if (mWebViewController.shouldShowErrorConsole()
&& errorConsole.getShowState() !=
ErrorConsoleView.SHOW_MAXIMIZED) {
errorConsole.showConsole(ErrorConsoleView.SHOW_MINIMIZED);
}
}

//comment
<start>if (isPrivateBrowsingEnabled()) return true;<end>

String message = ""Console: "" + consoleMessage.message() + "" ""
+ consoleMessage.sourceId() +  "":""
+ consoleMessage.lineNumber();

switch (consoleMessage.messageLevel()) {
case TIP:
Log.v(CONSOLE_LOGTAG, message);
break;
case LOG:
Log.i(CONSOLE_LOGTAG, message);
break;
case WARNING:
Log.w(CONSOLE_LOGTAG, message);
break;
case ERROR:
Log.e(CONSOLE_LOGTAG, message);
break;
case DEBUG:
Log.d(CONSOLE_LOGTAG, message);
break;
}

return true;
}"
319,"private void setSupplementalActionLayout() {
int keyline1 = mContext.getResources().getDimensionPixelSize(R.dimen.car_keyline_1);
int padding4 = mContext.getResources().getDimensionPixelSize(R.dimen.car_padding_4);
mBinders.add(vh -> {
<start>RelativeLayout.LayoutParams iconLayoutParams =
(RelativeLayout.LayoutParams) vh.getSupplementalIcon().getLayoutParams();
//comment
iconLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);
iconLayoutParams.setMarginEnd(keyline1);<end>
iconLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);

vh.getSupplementalIcon().requestLayout();

//comment
RelativeLayout.LayoutParams dividerLayoutParams =
(RelativeLayout.LayoutParams) vh.getSupplementalIconDivider()
.getLayoutParams();
dividerLayoutParams.addRule(RelativeLayout.START_OF, R.id.supplemental_icon);
dividerLayoutParams.setMarginEnd(padding4);
dividerLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);

vh.getSupplementalIconDivider().requestLayout();
});
}","private void setSupplementalActionLayout() {
int keyline1 = mContext.getResources().getDimensionPixelSize(R.dimen.car_keyline_1);
int padding4 = mContext.getResources().getDimensionPixelSize(R.dimen.car_padding_4);
mBinders.add(vh -> {
RelativeLayout.LayoutParams iconLayoutParams =
(RelativeLayout.LayoutParams) vh.getSupplementalIcon().getLayoutParams();
//comment
<start>iconLayoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);<end>
iconLayoutParams.setMarginEnd(keyline1);
iconLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);

vh.getSupplementalIcon().requestLayout();

//comment
RelativeLayout.LayoutParams dividerLayoutParams =
(RelativeLayout.LayoutParams) vh.getSupplementalIconDivider()
.getLayoutParams();
dividerLayoutParams.addRule(RelativeLayout.START_OF, R.id.supplemental_icon);
dividerLayoutParams.setMarginEnd(padding4);
dividerLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);

vh.getSupplementalIconDivider().requestLayout();
});
}"
320,"private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);
//comment
//comment
}

if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
<start>&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;<end>
}

if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}
}

return revokePermissionAndAppOp(packageName, permission, context);
}","private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);
//comment
//comment
}

<start>if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;
}<end>

if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}
}

return revokePermissionAndAppOp(packageName, permission, context);
}"
321,"        private void writeExecutionCriteriaToXml(XmlSerializer out, JobStatus jobStatus)
throws IOException {
final JobInfo job = jobStatus.getJob();
if (jobStatus.getJob().isPeriodic()) {
out.startTag(null, XML_TAG_PERIODIC);
out.attribute(null, ""period"", Long.toString(job.getIntervalMillis()));
out.attribute(null, ""flex"", Long.toString(job.getFlexMillis()));
} else {
out.startTag(null, XML_TAG_ONEOFF);
}

//comment
//comment
//comment
Pair <Long, Long> utcJobTimes = jobStatus.getPersistedUtcTimes();
if (DEBUG && utcJobTimes != null) {
Slog.i(TAG, ""storing original UTC timestamps for "" + jobStatus);
}

final long nowRTC = sSystemClock.millis();
final long nowElapsed = sElapsedRealtimeClock.millis();
if (jobStatus.hasDeadlineConstraint()) {
//comment
<start>final long deadlineWallclock = (utcJobTimes == null)
? nowRTC + (jobStatus.getLatestRunTimeElapsed() - nowElapsed)
: utcJobTimes.second;<end>
out.attribute(null, ""deadline"", Long.toString(deadlineWallclock));
}
if (jobStatus.hasTimingDelayConstraint()) {
final long delayWallclock = (utcJobTimes == null)
? nowRTC + (jobStatus.getEarliestRunTime() - nowElapsed)
: utcJobTimes.first;
out.attribute(null, ""delay"", Long.toString(delayWallclock));
}

//comment
//comment
//comment
if (jobStatus.getJob().getInitialBackoffMillis() != JobInfo.DEFAULT_INITIAL_BACKOFF_MILLIS
|| jobStatus.getJob().getBackoffPolicy() != JobInfo.DEFAULT_BACKOFF_POLICY) {
out.attribute(null, ""backoff-policy"", Integer.toString(job.getBackoffPolicy()));
out.attribute(null, ""initial-backoff"", Long.toString(job.getInitialBackoffMillis()));
}
if (job.isPeriodic()) {
out.endTag(null, XML_TAG_PERIODIC);
} else {
out.endTag(null, XML_TAG_ONEOFF);
}
}","        private void writeExecutionCriteriaToXml(XmlSerializer out, JobStatus jobStatus)
throws IOException {
final JobInfo job = jobStatus.getJob();
if (jobStatus.getJob().isPeriodic()) {
out.startTag(null, XML_TAG_PERIODIC);
out.attribute(null, ""period"", Long.toString(job.getIntervalMillis()));
out.attribute(null, ""flex"", Long.toString(job.getFlexMillis()));
} else {
out.startTag(null, XML_TAG_ONEOFF);
}

//comment
//comment
//comment
Pair <Long, Long> utcJobTimes = jobStatus.getPersistedUtcTimes();
if (DEBUG && utcJobTimes != null) {
Slog.i(TAG, ""storing original UTC timestamps for "" + jobStatus);
}

final long nowRTC = sSystemClock.millis();
final long nowElapsed = sElapsedRealtimeClock.millis();
if (jobStatus.hasDeadlineConstraint()) {
//comment
<start>final long deadlineWallclock = (utcJobTimes == null)
? nowRTC + (jobStatus.getLatestRunTimeElapsed() - nowElapsed)
: utcJobTimes.second;<end>
out.attribute(null, ""deadline"", Long.toString(deadlineWallclock));
}
if (jobStatus.hasTimingDelayConstraint()) {
final long delayWallclock = (utcJobTimes == null)
? nowRTC + (jobStatus.getEarliestRunTime() - nowElapsed)
: utcJobTimes.first;
out.attribute(null, ""delay"", Long.toString(delayWallclock));
}

//comment
//comment
//comment
if (jobStatus.getJob().getInitialBackoffMillis() != JobInfo.DEFAULT_INITIAL_BACKOFF_MILLIS
|| jobStatus.getJob().getBackoffPolicy() != JobInfo.DEFAULT_BACKOFF_POLICY) {
out.attribute(null, ""backoff-policy"", Integer.toString(job.getBackoffPolicy()));
out.attribute(null, ""initial-backoff"", Long.toString(job.getInitialBackoffMillis()));
}
if (job.isPeriodic()) {
out.endTag(null, XML_TAG_PERIODIC);
} else {
out.endTag(null, XML_TAG_ONEOFF);
}
}"
323,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
<start>if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}<end>

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
<start>mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);<end>
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
325,"    @Override
public void cancelPendingRequests(View fragmentRootView) {
if (fragmentRootView == null) {
mPendingRequests.clear();
<start>return;<end>
}
final Iterator<Entry<ImageView, Request>> iterator = mPendingRequests.entrySet().iterator();
while (iterator.hasNext()) {
<start>final ImageView imageView = iterator.next().getKey();
//comment
//comment
if (imageView.getParent() == null || isChildView(fragmentRootView, imageView)) {
iterator.remove();
}<end>
}
}","    @Override
public void cancelPendingRequests(View fragmentRootView) {
if (fragmentRootView == null) {
mPendingRequests.clear();
return;
}
final Iterator<Entry<ImageView, Request>> iterator = mPendingRequests.entrySet().iterator();
while (iterator.hasNext()) {
final ImageView imageView = iterator.next().getKey();
//comment
//comment
<start>if (imageView.getParent() == null || isChildView(fragmentRootView, imageView)) {
iterator.remove();
}<end>
}
}"
326,"    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

mList = getListView();
mAddSlideItem = createAddSlideItem();
mList.addFooterView(mAddSlideItem);
mAddSlideItem.setVisibility(View.GONE);

<start>if (icicle != null) {
//comment
mState = icicle.getBundle(STATE);
}<end>

if (mState != null) {
mUri = Uri.parse(mState.getString(MESSAGE_URI));
} else {
mUri = getIntent().getData();
}

if (mUri == null) {
Log.e(TAG, ""Cannot startup activity, null Uri."");
finish();
return;
}

//comment
mResultIntent = new Intent();
mResultIntent.setData(mUri);

try {
initSlideList();
adjustAddSlideVisibility();
} catch (MmsException e) {
Log.e(TAG, ""Failed to initialize the slide-list."", e);
finish();
}

registerForContextMenu(mList);
}","    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

mList = getListView();
mAddSlideItem = createAddSlideItem();
mList.addFooterView(mAddSlideItem);
mAddSlideItem.setVisibility(View.GONE);

<start>if (icicle != null) {
//comment
mState = icicle.getBundle(STATE);
}<end>

if (mState != null) {
mUri = Uri.parse(mState.getString(MESSAGE_URI));
} else {
mUri = getIntent().getData();
}

if (mUri == null) {
Log.e(TAG, ""Cannot startup activity, null Uri."");
finish();
return;
}

//comment
mResultIntent = new Intent();
mResultIntent.setData(mUri);

try {
initSlideList();
adjustAddSlideVisibility();
} catch (MmsException e) {
Log.e(TAG, ""Failed to initialize the slide-list."", e);
finish();
}

registerForContextMenu(mList);
}"
327,"private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;

if (appOpModeChanged) {
<start>if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}<end>
}
} else {
//comment
//comment
<start>List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}<end>
}

return permissionOrAppOpChanged;
}","private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;

if (appOpModeChanged) {
if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}
}
} else {
//comment
//comment
<start>List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}<end>
}

return permissionOrAppOpChanged;
}"
328,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
<start>d.show();
return true;<end>
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
<start>d.show();<end>
return true;
}"
329,"private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
<start>clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);<end>
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
<start>final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);<end>
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}","private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
<start>final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);<end>

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}"
331,"public static void requestToMoveToOffset(ListView listView, int offset) {
//comment
//comment
//comment
//comment
//comment
//comment
if (listView == null || listView.getChildCount() == 0 ||
listView.getFirstVisiblePosition() != 0 || offset > 0) {
return;
}

//comment
<start>if (listView.getChildAt(0).getTop() == offset) {
return;
}<end>

listView.setSelectionFromTop(0, offset);
}","public static void requestToMoveToOffset(ListView listView, int offset) {
//comment
//comment
//comment
//comment
//comment
//comment
if (listView == null || listView.getChildCount() == 0 ||
listView.getFirstVisiblePosition() != 0 || offset > 0) {
return;
}

//comment
<start>if (listView.getChildAt(0).getTop() == offset) {
return;
}<end>

listView.setSelectionFromTop(0, offset);
}"
332,"public int getCursorCapsMode(final int inputType, final Locale locale,
final boolean hasSpaceBefore) {
mIC = mParent.getCurrentInputConnection();
if (null == mIC) return Constants.TextUtils.CAP_MODE_OFF;
if (!TextUtils.isEmpty(mComposingText)) {
if (hasSpaceBefore) {
//comment
//comment
<start>return (TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS) & inputType;<end>
} else {
//comment
<start>return TextUtils.CAP_MODE_CHARACTERS & inputType;<end>
}
}
//comment
//comment
//comment
//comment
//comment
if (TextUtils.isEmpty(mCommittedTextBeforeComposingText) && 0 != mCurrentCursorPosition) {
mCommittedTextBeforeComposingText.append(
getTextBeforeCursor(DEFAULT_TEXT_CACHE_SIZE, 0));
}
//comment
//comment
return CapsModeUtils.getCapsMode(mCommittedTextBeforeComposingText, inputType, locale,
hasSpaceBefore);
}","public int getCursorCapsMode(final int inputType, final Locale locale,
final boolean hasSpaceBefore) {
mIC = mParent.getCurrentInputConnection();
if (null == mIC) return Constants.TextUtils.CAP_MODE_OFF;
if (!TextUtils.isEmpty(mComposingText)) {
<start>if (hasSpaceBefore) {
//comment
//comment
return (TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS) & inputType;
} else {<end>
//comment
return TextUtils.CAP_MODE_CHARACTERS & inputType;
}
}
//comment
//comment
//comment
//comment
//comment
if (TextUtils.isEmpty(mCommittedTextBeforeComposingText) && 0 != mCurrentCursorPosition) {
mCommittedTextBeforeComposingText.append(
getTextBeforeCursor(DEFAULT_TEXT_CACHE_SIZE, 0));
}
//comment
//comment
return CapsModeUtils.getCapsMode(mCommittedTextBeforeComposingText, inputType, locale,
hasSpaceBefore);
}"
335,"<start>    private void requestNewWidget() {
//comment
Intent send = new Intent();<end>
send.setAction(ACTION_ALLOCATE_ID);
mContext.sendBroadcast(send);
}","    private void requestNewWidget() {
//comment
<start>Intent send = new Intent();
send.setAction(ACTION_ALLOCATE_ID);
mContext.sendBroadcast(send);<end>
}"
336,"private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
<start>setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);<end>
//comment
//comment
}

if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;
}

if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}
}

return revokePermissionAndAppOp(packageName, permission, context);
}","private static boolean revokeSingle(@NonNull String packageName, @NonNull String permission,
boolean onlyIfGrantedByRole, boolean onlyIfGrantedByDefault,
boolean overrideSystemFixed, @NonNull Context context) {
if (onlyIfGrantedByRole == onlyIfGrantedByDefault) {
throw new IllegalArgumentException(""Permission can be revoked only if either granted by""
+ "" role, or granted by default, but not both"");
}

if (onlyIfGrantedByRole) {
if (!isPermissionGrantedByRole(packageName, permission, context)) {
return false;
}
setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE, context);
}

if (onlyIfGrantedByDefault) {
if (!isPermissionGrantedByDefault(packageName, permission, context)) {
return false;
}
//comment
<start>setPermissionFlags(packageName, permission, 0,
PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT, context);<end>
//comment
//comment
}

if (isPermissionFixed(packageName, permission, overrideSystemFixed, false, context)
&& isPermissionAndAppOpGranted(packageName, permission, context)) {
//comment
return false;
}

if (isForegroundPermission(permission, context)) {
String backgroundPermission = getBackgroundPermission(permission, context);
if (isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
//comment
return false;
}
}

return revokePermissionAndAppOp(packageName, permission, context);
}"
337,"    @Override
protected boolean hasContentChanged() {
final long startTime = SystemClock.uptimeMillis();
final int contactCount = getContactCount();
<start>if (contactCount > MAX_CONTACT_COUNT) {
//comment
//comment
//comment
return false;
}<end>
if (contactCount != sContactCountAtLastRebuild) {
if (DEBUG) {
Log.d(TAG, ""Contact count changed: "" + sContactCountAtLastRebuild + "" to ""
+ contactCount);
}
return true;
}
//comment
//comment
//comment
Cursor cursor = mContext.getContentResolver().query(
Contacts.CONTENT_URI, PROJECTION, null, null, null);
if (cursor != null) {
try {
if (cursor.moveToFirst()) {
while (!cursor.isAfterLast()) {
String name = cursor.getString(INDEX_NAME);
if (isValidName(name) && !isNameInDictionary(name)) {
if (DEBUG) {
Log.d(TAG, ""Contact name missing: "" + name + "" (runtime = ""
+ (SystemClock.uptimeMillis() - startTime) + "" ms)"");
}
return true;
}
cursor.moveToNext();
}
}
} finally {
cursor.close();
}
}
if (DEBUG) {
Log.d(TAG, ""No contacts changed. (runtime = "" + (SystemClock.uptimeMillis() - startTime)
+ "" ms)"");
}
return false;
}","    @Override
protected boolean hasContentChanged() {
final long startTime = SystemClock.uptimeMillis();
final int contactCount = getContactCount();
<start>if (contactCount > MAX_CONTACT_COUNT) {
//comment
//comment
//comment
return false;
}<end>
if (contactCount != sContactCountAtLastRebuild) {
if (DEBUG) {
Log.d(TAG, ""Contact count changed: "" + sContactCountAtLastRebuild + "" to ""
+ contactCount);
}
return true;
}
//comment
//comment
//comment
Cursor cursor = mContext.getContentResolver().query(
Contacts.CONTENT_URI, PROJECTION, null, null, null);
if (cursor != null) {
try {
if (cursor.moveToFirst()) {
while (!cursor.isAfterLast()) {
String name = cursor.getString(INDEX_NAME);
if (isValidName(name) && !isNameInDictionary(name)) {
if (DEBUG) {
Log.d(TAG, ""Contact name missing: "" + name + "" (runtime = ""
+ (SystemClock.uptimeMillis() - startTime) + "" ms)"");
}
return true;
}
cursor.moveToNext();
}
}
} finally {
cursor.close();
}
}
if (DEBUG) {
Log.d(TAG, ""No contacts changed. (runtime = "" + (SystemClock.uptimeMillis() - startTime)
+ "" ms)"");
}
return false;
}"
339,"@Override
public Map<String, Object> loadInBackground() {
final Map<String, Object> result = new HashMap<>();

final Mailbox mailbox = Mailbox.restoreMailboxWithId(getContext(), mMailboxId);
result.put(RESULT_KEY_MAILBOX, mailbox);
result.put(RESULT_KEY_MAX_LOOKBACK, 0);

if (mailbox == null) {
return result;
}

//comment
<start>final Long policyKey = Utility.getFirstRowLong(getContext(),
ContentUris.withAppendedId(Account.CONTENT_URI, mailbox.mAccountKey),
POLICY_KEY_PROJECTION, null, null, null, POLICY_KEY_COLUMN);<end>
if (policyKey == null) {
//comment
return result;
}

final int maxLookback = Utility.getFirstRowInt(getContext(),
ContentUris.withAppendedId(Policy.CONTENT_URI, policyKey),
MAX_EMAIL_LOOKBACK_PROJECTION, null, null, null,
MAX_EMAIL_LOOKBACK_COLUMN, 0);
result.put(RESULT_KEY_MAX_LOOKBACK, maxLookback);

return result;
}","@Override
public Map<String, Object> loadInBackground() {
final Map<String, Object> result = new HashMap<>();

final Mailbox mailbox = Mailbox.restoreMailboxWithId(getContext(), mMailboxId);
result.put(RESULT_KEY_MAILBOX, mailbox);
result.put(RESULT_KEY_MAX_LOOKBACK, 0);

if (mailbox == null) {
return result;
}

//comment
<start>final Long policyKey = Utility.getFirstRowLong(getContext(),
ContentUris.withAppendedId(Account.CONTENT_URI, mailbox.mAccountKey),
POLICY_KEY_PROJECTION, null, null, null, POLICY_KEY_COLUMN);<end>
if (policyKey == null) {
//comment
return result;
}

final int maxLookback = Utility.getFirstRowInt(getContext(),
ContentUris.withAppendedId(Policy.CONTENT_URI, policyKey),
MAX_EMAIL_LOOKBACK_PROJECTION, null, null, null,
MAX_EMAIL_LOOKBACK_COLUMN, 0);
result.put(RESULT_KEY_MAX_LOOKBACK, maxLookback);

return result;
}"
342,"<start>    private synchronized void createWakeLock() {<end>
//comment
if (mWakeLock == null) {
<start>PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);<end>
mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, ""MMS Connectivity"");
mWakeLock.setReferenceCounted(false);
}
}","    private synchronized void createWakeLock() {
//comment
<start>if (mWakeLock == null) {
PowerManager pm = (PowerManager)getSystemService(Context.POWER_SERVICE);
mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, ""MMS Connectivity"");
mWakeLock.setReferenceCounted(false);
}<end>
}"
343,"private void createListItem(List<CarUiListItem> list,
int stringId, @Result int result, int... indices) {
//comment
if (IntStream.of(indices)
<start>.mapToObj(i -> i >= 0 && i < mButtonVisibilities.length && mButtonVisibilities[i])<end>
.noneMatch(b -> b)) {
return;
}

CarUiContentListItem item = new CarUiContentListItem(CarUiContentListItem.Action.NONE);
item.setTitle(mContext.getString(stringId));
item.setOnItemClickedListener(i -> {
mDialog.setOnDismissListener(null);
mDialog.dismiss();
mDialog = null;
mResultListener.onPermissionGrantResult(mGroupName, result);
});
list.add(item);
}","private void createListItem(List<CarUiListItem> list,
int stringId, @Result int result, int... indices) {
//comment
<start>if (IntStream.of(indices)
.mapToObj(i -> i >= 0 && i < mButtonVisibilities.length && mButtonVisibilities[i])
.noneMatch(b -> b)) {<end>
return;
}

CarUiContentListItem item = new CarUiContentListItem(CarUiContentListItem.Action.NONE);
item.setTitle(mContext.getString(stringId));
item.setOnItemClickedListener(i -> {
mDialog.setOnDismissListener(null);
mDialog.dismiss();
mDialog = null;
mResultListener.onPermissionGrantResult(mGroupName, result);
});
list.add(item);
}"
344,"public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
<start>viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);<end>
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
<start>for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}<end>
}","public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
<start>mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);<end>
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}"
345,"@Override
public void setListAdapter(ListAdapter adapter) {
if (mHeaders == null) {
mHeaders = new ArrayList<Header>();
//comment
//comment
//comment
for (int i = 0; i < adapter.getCount(); i++) {
<start>mHeaders.add((Header) adapter.getItem(i));<end>
}
}

//comment
//comment
super.setListAdapter(new HeaderAdapter(this, mHeaders));
}","@Override
public void setListAdapter(ListAdapter adapter) {
if (mHeaders == null) {
mHeaders = new ArrayList<Header>();
//comment
//comment
//comment
<start>for (int i = 0; i < adapter.getCount(); i++) {
mHeaders.add((Header) adapter.getItem(i));
}<end>
}

//comment
//comment
super.setListAdapter(new HeaderAdapter(this, mHeaders));
}"
346,"private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
if (enabledPackages.equals(mCachedEnabledPackages)) {
//comment
return;
}
mCachedEnabledPackages = enabledPackages;
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
<start>if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);<end>
}
//comment
for (ComponentName componentName : enabledComponents) {
<start>if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}<end>
}
//comment
Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}
}","private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
if (enabledPackages.equals(mCachedEnabledPackages)) {
//comment
return;
}
mCachedEnabledPackages = enabledPackages;
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);
}
//comment
<start>for (ComponentName componentName : enabledComponents) {
if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}
}<end>
//comment
Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}
}"
348,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
<start>Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();<end>
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
<start>Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}<end>

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
349,"<start>    public void logCall(Connection c) {<end>
final Connection.DisconnectCause cause = c.getDisconnectCause();

//comment
<start>final int callLogType;<end>

if (c.isIncoming()) {
callLogType = (cause == Connection.DisconnectCause.INCOMING_MISSED ?
Calls.MISSED_TYPE : Calls.INCOMING_TYPE);
} else {
<start>callLogType = Calls.OUTGOING_TYPE;<end>
}
if (VDBG) log(""- callLogType: "" + callLogType + "", UserData: "" + c.getUserData());

logCall(c, callLogType);
}","    public void logCall(Connection c) {
final Connection.DisconnectCause cause = c.getDisconnectCause();

//comment
<start>final int callLogType;

if (c.isIncoming()) {
callLogType = (cause == Connection.DisconnectCause.INCOMING_MISSED ?
Calls.MISSED_TYPE : Calls.INCOMING_TYPE);
} else {
callLogType = Calls.OUTGOING_TYPE;
}<end>
if (VDBG) log(""- callLogType: "" + callLogType + "", UserData: "" + c.getUserData());

<start>logCall(c, callLogType);<end>
}"
350,"    @Override
protected void onDialogClosed(boolean positiveResult) {
super.onDialogClosed(positiveResult);

if (positiveResult && (getValue() != null)) {
int buttonCdmaRoamingMode = Integer.valueOf(getValue()).intValue();
int settingsCdmaRoamingMode =
Settings.Global.getInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE, Phone.CDMA_RM_HOME);
if (buttonCdmaRoamingMode != settingsCdmaRoamingMode) {
int statusCdmaRoamingMode;
switch(buttonCdmaRoamingMode) {
case Phone.CDMA_RM_ANY:
statusCdmaRoamingMode = Phone.CDMA_RM_ANY;
break;
<start>case Phone.CDMA_RM_HOME:
default:
statusCdmaRoamingMode = Phone.CDMA_RM_HOME;<end>
}
//comment
Settings.Global.putInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE,
buttonCdmaRoamingMode );
//comment
mPhone.setCdmaRoamingPreference(statusCdmaRoamingMode, mHandler
.obtainMessage(MyHandler.MESSAGE_SET_ROAMING_PREFERENCE));
}
} else {
Log.d(LOG_TAG, String.format(""onDialogClosed: positiveResult=%b value=%s -- do nothing"",
positiveResult, getValue()));
}
}","    @Override
protected void onDialogClosed(boolean positiveResult) {
super.onDialogClosed(positiveResult);

if (positiveResult && (getValue() != null)) {
int buttonCdmaRoamingMode = Integer.valueOf(getValue()).intValue();
int settingsCdmaRoamingMode =
Settings.Global.getInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE, Phone.CDMA_RM_HOME);
if (buttonCdmaRoamingMode != settingsCdmaRoamingMode) {
int statusCdmaRoamingMode;
switch(buttonCdmaRoamingMode) {
case Phone.CDMA_RM_ANY:
statusCdmaRoamingMode = Phone.CDMA_RM_ANY;
break;
case Phone.CDMA_RM_HOME:
default:
statusCdmaRoamingMode = Phone.CDMA_RM_HOME;
}
//comment
<start>Settings.Global.putInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE,
buttonCdmaRoamingMode );<end>
//comment
mPhone.setCdmaRoamingPreference(statusCdmaRoamingMode, mHandler
.obtainMessage(MyHandler.MESSAGE_SET_ROAMING_PREFERENCE));
}
} else {
Log.d(LOG_TAG, String.format(""onDialogClosed: positiveResult=%b value=%s -- do nothing"",
positiveResult, getValue()));
}
}"
352,"    private static boolean computeActualNodeSize(final Node node, final FusionDictionary dict,
final FormatOptions formatOptions) {
boolean changed = false;
int size = getGroupCountSize(node);
for (CharGroup group : node.mData) {
if (group.mCachedAddress != node.mCachedAddress + size) {
changed = true;
group.mCachedAddress = node.mCachedAddress + size;
}
int groupSize = getGroupHeaderSize(group, formatOptions);
if (group.isTerminal()) groupSize += FormatSpec.GROUP_FREQUENCY_SIZE;
if (null == group.mChildren && formatOptions.mSupportsDynamicUpdate) {
groupSize += FormatSpec.SIGNED_CHILDREN_ADDRESS_SIZE;
} else if (null != group.mChildren) {
final int offsetBasePoint = groupSize + node.mCachedAddress + size;
<start>final int offset = group.mChildren.mCachedAddress - offsetBasePoint;
//comment
group.mChildren.mCachedParentAddress = group.mCachedAddress
- group.mChildren.mCachedAddress;<end>
if (formatOptions.mSupportsDynamicUpdate) {
groupSize += FormatSpec.SIGNED_CHILDREN_ADDRESS_SIZE;
} else {
groupSize += getByteSize(offset);
}
}
groupSize += getShortcutListSize(group.mShortcutTargets);
if (null != group.mBigrams) {
for (WeightedString bigram : group.mBigrams) {
final int offsetBasePoint = groupSize + node.mCachedAddress + size
+ FormatSpec.GROUP_FLAGS_SIZE;
final int addressOfBigram = findAddressOfWord(dict, bigram.mWord);
final int offset = addressOfBigram - offsetBasePoint;
groupSize += getByteSize(offset) + FormatSpec.GROUP_FLAGS_SIZE;
}
}
group.mCachedSize = groupSize;
size += groupSize;
}
if (formatOptions.mSupportsDynamicUpdate) {
size += FormatSpec.FORWARD_LINK_ADDRESS_SIZE;
}
if (node.mCachedSize != size) {
node.mCachedSize = size;
changed = true;
}
return changed;
}","    private static boolean computeActualNodeSize(final Node node, final FusionDictionary dict,
final FormatOptions formatOptions) {
boolean changed = false;
int size = getGroupCountSize(node);
for (CharGroup group : node.mData) {
if (group.mCachedAddress != node.mCachedAddress + size) {
changed = true;
group.mCachedAddress = node.mCachedAddress + size;
}
int groupSize = getGroupHeaderSize(group, formatOptions);
if (group.isTerminal()) groupSize += FormatSpec.GROUP_FREQUENCY_SIZE;
if (null == group.mChildren && formatOptions.mSupportsDynamicUpdate) {
groupSize += FormatSpec.SIGNED_CHILDREN_ADDRESS_SIZE;
} else if (null != group.mChildren) {
final int offsetBasePoint = groupSize + node.mCachedAddress + size;
final int offset = group.mChildren.mCachedAddress - offsetBasePoint;
//comment
<start>group.mChildren.mCachedParentAddress = group.mCachedAddress
- group.mChildren.mCachedAddress;<end>
if (formatOptions.mSupportsDynamicUpdate) {
groupSize += FormatSpec.SIGNED_CHILDREN_ADDRESS_SIZE;
} else {
groupSize += getByteSize(offset);
}
}
groupSize += getShortcutListSize(group.mShortcutTargets);
if (null != group.mBigrams) {
for (WeightedString bigram : group.mBigrams) {
final int offsetBasePoint = groupSize + node.mCachedAddress + size
+ FormatSpec.GROUP_FLAGS_SIZE;
final int addressOfBigram = findAddressOfWord(dict, bigram.mWord);
final int offset = addressOfBigram - offsetBasePoint;
groupSize += getByteSize(offset) + FormatSpec.GROUP_FLAGS_SIZE;
}
}
group.mCachedSize = groupSize;
size += groupSize;
}
if (formatOptions.mSupportsDynamicUpdate) {
size += FormatSpec.FORWARD_LINK_ADDRESS_SIZE;
}
if (node.mCachedSize != size) {
node.mCachedSize = size;
changed = true;
}
return changed;
}"
355,"    @Override
public boolean onMenuItemClick(MenuItem item) {
if (mUrl != null && getState() == State.NEW) {
//comment
//comment
//comment
//comment
mWallpaperProgress = new ProgressDialog(mContext);
<start>mWallpaperProgress.setIndeterminate(true);<end>
mWallpaperProgress.setMessage(mContext.getResources()
.getText(R.string.progress_dialog_setting_wallpaper));
mWallpaperProgress.setCancelable(true);
mWallpaperProgress.setOnCancelListener(this);
mWallpaperProgress.show();
start();
}
return true;
}","    @Override
public boolean onMenuItemClick(MenuItem item) {
if (mUrl != null && getState() == State.NEW) {
//comment
//comment
//comment
//comment
<start>mWallpaperProgress = new ProgressDialog(mContext);
mWallpaperProgress.setIndeterminate(true);
mWallpaperProgress.setMessage(mContext.getResources()
.getText(R.string.progress_dialog_setting_wallpaper));
mWallpaperProgress.setCancelable(true);
mWallpaperProgress.setOnCancelListener(this);
mWallpaperProgress.show();<end>
start();
}
return true;
}"
356,"private boolean isSpecializedHandlerAvailable(Intent intent) {
PackageManager pm = mActivity.getPackageManager();
List<ResolveInfo> handlers = pm.queryIntentActivities(intent,
PackageManager.GET_RESOLVED_FILTER);
if (handlers == null || handlers.size() == 0) {
<start>return false;<end>
}
for (ResolveInfo resolveInfo : handlers) {
IntentFilter filter = resolveInfo.filter;
if (filter == null) {
//comment
//comment
continue;
}
if (filter.countDataAuthorities() == 0 && filter.countDataPaths() == 0) {
//comment
continue;
}
return true;
}
return false;
}","private boolean isSpecializedHandlerAvailable(Intent intent) {
PackageManager pm = mActivity.getPackageManager();
List<ResolveInfo> handlers = pm.queryIntentActivities(intent,
PackageManager.GET_RESOLVED_FILTER);
if (handlers == null || handlers.size() == 0) {
return false;
}
for (ResolveInfo resolveInfo : handlers) {
<start>IntentFilter filter = resolveInfo.filter;
if (filter == null) {<end>
//comment
//comment
continue;
}
if (filter.countDataAuthorities() == 0 && filter.countDataPaths() == 0) {
//comment
continue;
}
return true;
}
return false;
}"
359,"        @Override
public void onReceivedTouchIconUrl(WebView view, String url,
boolean precomposed) {
final ContentResolver cr = mContext.getContentResolver();
//comment
//comment
<start>if (precomposed && mTouchIconLoader != null) {
mTouchIconLoader.cancel(false);
mTouchIconLoader = null;
}<end>
//comment
if (mTouchIconLoader == null) {
mTouchIconLoader = new DownloadTouchIcon(Tab.this, cr, view);
mTouchIconLoader.execute(url);
}
}","        @Override
public void onReceivedTouchIconUrl(WebView view, String url,
boolean precomposed) {
final ContentResolver cr = mContext.getContentResolver();
//comment
//comment
<start>if (precomposed && mTouchIconLoader != null) {
mTouchIconLoader.cancel(false);
mTouchIconLoader = null;
}<end>
//comment
if (mTouchIconLoader == null) {
mTouchIconLoader = new DownloadTouchIcon(Tab.this, cr, view);
mTouchIconLoader.execute(url);
}
}"
360,"    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
mApplication.updateInCallScreen();
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}","    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
mApplication.updateInCallScreen();
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
<start>mApplication.notificationMgr.updateInCallNotification();<end>
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}"
361,"@Override
public void onActivityCreated(Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
final long mailboxId = getArguments().getLong(EXTRA_MAILBOX_ID, Mailbox.NO_MAILBOX);
if (mailboxId == Mailbox.NO_MAILBOX) {
getActivity().finish();
}

addPreferencesFromResource(R.xml.mailbox_preferences);

mSyncEnabledPref = (CheckBoxPreference) findPreference(PREF_SYNC_ENABLED_KEY);
mSyncLookbackPref = (ListPreference) findPreference(PREF_SYNC_WINDOW_KEY);

mSyncLookbackPref.setOnPreferenceChangeListener(mPreferenceChanged);

if (savedInstanceState != null) {
mMailbox = savedInstanceState.getParcelable(BUNDLE_MAILBOX);
mMaxLookback = savedInstanceState.getInt(BUNDLE_MAX_LOOKBACK);
<start>mSyncEnabledPref
.setChecked(savedInstanceState.getBoolean(BUNDLE_SYNC_ENABLED_VALUE));<end>
mSyncLookbackPref.setValue(savedInstanceState.getString(BUNDLE_SYNC_WINDOW_VALUE));
onDataLoaded();
} else {
//comment
enablePreferences(false);
getLoaderManager().initLoader(0, getArguments(), new MailboxLoaderCallbacks());
}
}","@Override
public void onActivityCreated(Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
final long mailboxId = getArguments().getLong(EXTRA_MAILBOX_ID, Mailbox.NO_MAILBOX);
if (mailboxId == Mailbox.NO_MAILBOX) {
getActivity().finish();
}

addPreferencesFromResource(R.xml.mailbox_preferences);

mSyncEnabledPref = (CheckBoxPreference) findPreference(PREF_SYNC_ENABLED_KEY);
mSyncLookbackPref = (ListPreference) findPreference(PREF_SYNC_WINDOW_KEY);

mSyncLookbackPref.setOnPreferenceChangeListener(mPreferenceChanged);

if (savedInstanceState != null) {
mMailbox = savedInstanceState.getParcelable(BUNDLE_MAILBOX);
mMaxLookback = savedInstanceState.getInt(BUNDLE_MAX_LOOKBACK);
mSyncEnabledPref
.setChecked(savedInstanceState.getBoolean(BUNDLE_SYNC_ENABLED_VALUE));
mSyncLookbackPref.setValue(savedInstanceState.getString(BUNDLE_SYNC_WINDOW_VALUE));
onDataLoaded();
} else {
//comment
<start>enablePreferences(false);
getLoaderManager().initLoader(0, getArguments(), new MailboxLoaderCallbacks());<end>
}
}"
363,"public int getCursorCapsMode(final int inputType, final Locale locale,
final boolean hasSpaceBefore) {
mIC = mParent.getCurrentInputConnection();
if (null == mIC) return Constants.TextUtils.CAP_MODE_OFF;
if (!TextUtils.isEmpty(mComposingText)) {
if (hasSpaceBefore) {
//comment
//comment
return (TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS) & inputType;
<start>} else {
//comment
return TextUtils.CAP_MODE_CHARACTERS & inputType;<end>
}
}
//comment
//comment
//comment
//comment
//comment
if (TextUtils.isEmpty(mCommittedTextBeforeComposingText) && 0 != mCurrentCursorPosition) {
mCommittedTextBeforeComposingText.append(
getTextBeforeCursor(DEFAULT_TEXT_CACHE_SIZE, 0));
}
//comment
//comment
return CapsModeUtils.getCapsMode(mCommittedTextBeforeComposingText, inputType, locale,
hasSpaceBefore);
}","public int getCursorCapsMode(final int inputType, final Locale locale,
final boolean hasSpaceBefore) {
mIC = mParent.getCurrentInputConnection();
if (null == mIC) return Constants.TextUtils.CAP_MODE_OFF;
<start>if (!TextUtils.isEmpty(mComposingText)) {
if (hasSpaceBefore) {<end>
//comment
//comment
return (TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS) & inputType;
<start>} else {
//comment
return TextUtils.CAP_MODE_CHARACTERS & inputType;
}<end>
}
//comment
//comment
//comment
//comment
//comment
if (TextUtils.isEmpty(mCommittedTextBeforeComposingText) && 0 != mCurrentCursorPosition) {
mCommittedTextBeforeComposingText.append(
getTextBeforeCursor(DEFAULT_TEXT_CACHE_SIZE, 0));
}
//comment
//comment
return CapsModeUtils.getCapsMode(mCommittedTextBeforeComposingText, inputType, locale,
hasSpaceBefore);
}"
365,"    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
if (mShowNav) {
detachTab(mActiveTab);
}

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
Log.e(LOGTAG, ""active tab with no webview detected"");
return;
}
//comment
if (mUseQuickControls) {
<start>mPieControl.forceToTop(mContentView);
view.setTitleBar(null);<end>
mTitleBar.setShowProgressOnly(true);
} else {
<start>view.setTitleBar(mTitleBar);<end>
}
//comment
<start>mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);<end>
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}","    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
if (mShowNav) {
detachTab(mActiveTab);
}

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
Log.e(LOGTAG, ""active tab with no webview detected"");
return;
}
//comment
if (mUseQuickControls) {
mPieControl.forceToTop(mContentView);
view.setTitleBar(null);
mTitleBar.setShowProgressOnly(true);
} else {
view.setTitleBar(mTitleBar);
}
//comment
<start>mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);<end>
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}"
366,"        public void run() {
<start>Looper.prepare();<end>

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}","        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
<start>bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);<end>

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}"
367,"        void watchdogAlarm(final AttachmentService service, final int callbackTimeout) {
debugTrace(""Received a timer callback in the watchdog"");

//comment
//comment
<start>final Collection<DownloadRequest> inProgressRequests =
service.mDownloadsInProgress.values();<end>
for (DownloadRequest req: inProgressRequests) {
debugTrace(""Checking in-progress request with id: %d"", req.mAttachmentId);
final boolean shouldCancelDownload = validateDownloadRequest(req, callbackTimeout,
System.currentTimeMillis());
if (shouldCancelDownload) {
LogUtils.w(LOG_TAG, ""Cancelling DownloadRequest #%d"", req.mAttachmentId);
service.cancelDownload(req);
//comment
}
}
//comment
if (service.isConnected()) {
service.processQueue();
}
issueNextWatchdogAlarm(service);
}","        void watchdogAlarm(final AttachmentService service, final int callbackTimeout) {
debugTrace(""Received a timer callback in the watchdog"");

//comment
//comment
<start>final Collection<DownloadRequest> inProgressRequests =
service.mDownloadsInProgress.values();
for (DownloadRequest req: inProgressRequests) {
debugTrace(""Checking in-progress request with id: %d"", req.mAttachmentId);
final boolean shouldCancelDownload = validateDownloadRequest(req, callbackTimeout,
System.currentTimeMillis());
if (shouldCancelDownload) {
LogUtils.w(LOG_TAG, ""Cancelling DownloadRequest #%d"", req.mAttachmentId);
service.cancelDownload(req);
//comment
}
}<end>
//comment
if (service.isConnected()) {
service.processQueue();
}
issueNextWatchdogAlarm(service);
}"
368,"private void confirmPermissionsReview() {
final List<PreferenceGroup> preferenceGroups = new ArrayList<>();
if (mNewPermissionsCategory != null) {
preferenceGroups.add(mNewPermissionsCategory);
preferenceGroups.add(mCurrentPermissionsCategory);
} else {
PreferenceScreen preferenceScreen = getPreferenceScreen();
if (preferenceScreen != null) {
preferenceGroups.add(preferenceScreen);
}
}

final int preferenceGroupCount = preferenceGroups.size();
long changeIdForLogging = new Random().nextLong();

for (int groupNum = 0; groupNum < preferenceGroupCount; groupNum++) {
final PreferenceGroup preferenceGroup = preferenceGroups.get(groupNum);

final int preferenceCount = preferenceGroup.getPreferenceCount();
for (int prefNum = 0; prefNum < preferenceCount; prefNum++) {
Preference preference = preferenceGroup.getPreference(prefNum);
if (preference instanceof PermissionReviewPreference) {
<start>PermissionReviewPreference permPreference =
(PermissionReviewPreference) preference;<end>
AppPermissionGroup group = permPreference.getGroup();

//comment
if (group.isReviewRequired() && !permPreference.wasChanged()) {
<start>grantReviewedPermission(group);<end>
}
logReviewPermissionsFragmentResult(changeIdForLogging, group);

AppPermissionGroup backgroundGroup = group.getBackgroundPermissions();
if (backgroundGroup != null) {
//comment
if (backgroundGroup.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(backgroundGroup);
}
logReviewPermissionsFragmentResult(changeIdForLogging, backgroundGroup);
}
}
}
}
mAppPermissions.persistChanges(true);

//comment
//comment
PackageManager pm = getContext().getPackageManager();
PackageInfo pkg = mAppPermissions.getPackageInfo();
UserHandle user = UserHandle.getUserHandleForUid(pkg.applicationInfo.uid);

for (String perm : pkg.requestedPermissions) {
try {
pm.updatePermissionFlags(perm, pkg.packageName, FLAG_PERMISSION_REVIEW_REQUIRED,
0, user);
} catch (IllegalArgumentException e) {
Log.e(LOG_TAG, ""Cannot unmark "" + perm + "" requested by "" + pkg.packageName
+ "" as review required"", e);
}
}
}","private void confirmPermissionsReview() {
final List<PreferenceGroup> preferenceGroups = new ArrayList<>();
if (mNewPermissionsCategory != null) {
preferenceGroups.add(mNewPermissionsCategory);
preferenceGroups.add(mCurrentPermissionsCategory);
} else {
PreferenceScreen preferenceScreen = getPreferenceScreen();
if (preferenceScreen != null) {
preferenceGroups.add(preferenceScreen);
}
}

final int preferenceGroupCount = preferenceGroups.size();
long changeIdForLogging = new Random().nextLong();

for (int groupNum = 0; groupNum < preferenceGroupCount; groupNum++) {
final PreferenceGroup preferenceGroup = preferenceGroups.get(groupNum);

final int preferenceCount = preferenceGroup.getPreferenceCount();
for (int prefNum = 0; prefNum < preferenceCount; prefNum++) {
Preference preference = preferenceGroup.getPreference(prefNum);
if (preference instanceof PermissionReviewPreference) {
PermissionReviewPreference permPreference =
(PermissionReviewPreference) preference;
AppPermissionGroup group = permPreference.getGroup();

//comment
<start>if (group.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(group);
}<end>
logReviewPermissionsFragmentResult(changeIdForLogging, group);

AppPermissionGroup backgroundGroup = group.getBackgroundPermissions();
if (backgroundGroup != null) {
//comment
if (backgroundGroup.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(backgroundGroup);
}
logReviewPermissionsFragmentResult(changeIdForLogging, backgroundGroup);
}
}
}
}
mAppPermissions.persistChanges(true);

//comment
//comment
PackageManager pm = getContext().getPackageManager();
PackageInfo pkg = mAppPermissions.getPackageInfo();
UserHandle user = UserHandle.getUserHandleForUid(pkg.applicationInfo.uid);

for (String perm : pkg.requestedPermissions) {
try {
pm.updatePermissionFlags(perm, pkg.packageName, FLAG_PERMISSION_REVIEW_REQUIRED,
0, user);
} catch (IllegalArgumentException e) {
Log.e(LOG_TAG, ""Cannot unmark "" + perm + "" requested by "" + pkg.packageName
+ "" as review required"", e);
}
}
}"
369,"        @Override
public void onDetach() {
super.onDetach();

//comment
<start>if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
if (((AOKPPreferenceFragment) mParentFragment).mDialogFragment == this) {
((AOKPPreferenceFragment) mParentFragment).mDialogFragment = null;
}
}<end>
}","        @Override
public void onDetach() {
super.onDetach();

//comment
if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
<start>if (((AOKPPreferenceFragment) mParentFragment).mDialogFragment == this) {
((AOKPPreferenceFragment) mParentFragment).mDialogFragment = null;
}<end>
}
}"
370,"    static boolean hangupRingingCall(Call ringing) {
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

if (state == Call.State.INCOMING) {
//comment
log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
} else if (state == Call.State.WAITING) {
//comment
//comment
//comment
//comment
//comment
//comment
if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
//comment
//comment
<start>log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");<end>
final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
<start>notifier.sendCdmaCallWaitingReject();
return true;<end>
} else {
//comment
//comment
<start>log(""hangupRingingCall(): call-waiting call: hangup()"");<end>
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}","    static boolean hangupRingingCall(Call ringing) {
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

if (state == Call.State.INCOMING) {
//comment
log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
<start>} else if (state == Call.State.WAITING) {<end>
//comment
//comment
//comment
//comment
//comment
//comment
if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
//comment
//comment
log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");
final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
notifier.sendCdmaCallWaitingReject();
return true;
} else {
//comment
//comment
log(""hangupRingingCall(): call-waiting call: hangup()"");
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}"
371,"    private static void updateMessageWithIcon(Context context, AlertDialog alertDialog) {
final TextView gestureTutorialMessage = alertDialog.findViewById(
R.id.button_tutorial_message);

//comment
<start>final int lineHeight = gestureTutorialMessage.getLineHeight();
gestureTutorialMessage.setText(getMessageStringWithIcon(context, lineHeight));<end>
}","    private static void updateMessageWithIcon(Context context, AlertDialog alertDialog) {
final TextView gestureTutorialMessage = alertDialog.findViewById(
R.id.button_tutorial_message);

//comment
<start>final int lineHeight = gestureTutorialMessage.getLineHeight();<end>
gestureTutorialMessage.setText(getMessageStringWithIcon(context, lineHeight));
}"
373,"@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
<start>int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;<end>
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}","@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
<start>int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;<end>
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}"
374,"    @Override
public void onPinEntered(EditPinPreference preference, boolean positiveResult) {
if (!positiveResult) {
resetDialogState();
return;
}

mPin = preference.getText();
if (!reasonablePin(mPin)) {
//comment
mError = mRes.getString(R.string.sim_bad_pin);
<start>showPinDialog();<end>
return;
}
switch (mDialogState) {
case ICC_LOCK_MODE:
tryChangeIccLockState();
break;
case ICC_OLD_MODE:
mOldPin = mPin;
mDialogState = ICC_NEW_MODE;
mError = null;
mPin = null;
showPinDialog();
break;
case ICC_NEW_MODE:
mNewPin = mPin;
mDialogState = ICC_REENTER_MODE;
mPin = null;
showPinDialog();
break;
case ICC_REENTER_MODE:
if (!mPin.equals(mNewPin)) {
mError = mRes.getString(R.string.sim_pins_dont_match);
mDialogState = ICC_NEW_MODE;
mPin = null;
showPinDialog();
} else {
mError = null;
tryChangePin();
}
break;
}
}","    @Override
public void onPinEntered(EditPinPreference preference, boolean positiveResult) {
if (!positiveResult) {
resetDialogState();
return;
}

mPin = preference.getText();
if (!reasonablePin(mPin)) {
//comment
<start>mError = mRes.getString(R.string.sim_bad_pin);
showPinDialog();<end>
return;
}
switch (mDialogState) {
case ICC_LOCK_MODE:
tryChangeIccLockState();
break;
case ICC_OLD_MODE:
mOldPin = mPin;
mDialogState = ICC_NEW_MODE;
mError = null;
mPin = null;
showPinDialog();
break;
case ICC_NEW_MODE:
mNewPin = mPin;
mDialogState = ICC_REENTER_MODE;
mPin = null;
showPinDialog();
break;
case ICC_REENTER_MODE:
if (!mPin.equals(mNewPin)) {
mError = mRes.getString(R.string.sim_pins_dont_match);
mDialogState = ICC_NEW_MODE;
mPin = null;
showPinDialog();
} else {
mError = null;
tryChangePin();
}
break;
}
}"
375,"    @Override
public void onCreate() {
super.onCreate();

if (Log.isLoggable(LogTag.STRICT_MODE_TAG, Log.DEBUG)) {
//comment
//comment
//comment
StrictMode.setThreadPolicy(
new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
}

sMmsApp = this;

//comment
<start>PreferenceManager.setDefaultValues(this, R.xml.preferences, false);<end>

//comment
mCountryDetector = (CountryDetector) getSystemService(Context.COUNTRY_DETECTOR);
mCountryListener = new CountryListener() {
@Override
public synchronized void onCountryDetected(Country country) {
mCountryIso = country.getCountryIso();
}
};
mCountryDetector.addCountryListener(mCountryListener, getMainLooper());

Context context = getApplicationContext();
mPduLoaderManager = new PduLoaderManager(context);
mThumbnailManager = new ThumbnailManager(context);

MmsConfig.init(this);
Contact.init(this);
DraftCache.init(this);
Conversation.init(this);
DownloadManager.init(this);
RateController.init(this);
LayoutManager.init(this);
MessagingNotification.init(this);

activePendingMessages();
}","    @Override
public void onCreate() {
super.onCreate();

if (Log.isLoggable(LogTag.STRICT_MODE_TAG, Log.DEBUG)) {
//comment
//comment
//comment
StrictMode.setThreadPolicy(
new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
}

sMmsApp = this;

//comment
<start>PreferenceManager.setDefaultValues(this, R.xml.preferences, false);<end>

//comment
mCountryDetector = (CountryDetector) getSystemService(Context.COUNTRY_DETECTOR);
mCountryListener = new CountryListener() {
@Override
public synchronized void onCountryDetected(Country country) {
mCountryIso = country.getCountryIso();
}
};
mCountryDetector.addCountryListener(mCountryListener, getMainLooper());

Context context = getApplicationContext();
mPduLoaderManager = new PduLoaderManager(context);
mThumbnailManager = new ThumbnailManager(context);

MmsConfig.init(this);
Contact.init(this);
DraftCache.init(this);
Conversation.init(this);
DownloadManager.init(this);
RateController.init(this);
LayoutManager.init(this);
MessagingNotification.init(this);

activePendingMessages();
}"
376,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
<start>|| urlData.isPreloaded()) {<end>
Tab t = mController.openTab(urlData);
<start>return;<end>
}
//comment
//comment
//comment
//comment
//comment
<start>final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);<end>
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
<start>mController.switchToTab(appTab);<end>
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
<start>return;<end>
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
<start>final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}<end>
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
377,"    @Override
protected void onBind(ViewHolder viewHolder) {
//comment
<start>hideSubViews(viewHolder);
for (ViewBinder binder : mBinders) {
binder.bind(viewHolder);
}<end>
}","    @Override
protected void onBind(ViewHolder viewHolder) {
//comment
<start>hideSubViews(viewHolder);
for (ViewBinder binder : mBinders) {
binder.bind(viewHolder);
}<end>
}"
379,"public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
<start>mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);<end>
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}","public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
<start>TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});<end>
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}"
380,"@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
if (preference == mButtonDTMF) {
return true;
} else if (preference == mDialpadAutocomplete) {
Settings.Secure.putInt(getContentResolver(), Settings.Secure.DIALPAD_AUTOCOMPLETE,
mDialpadAutocomplete.isChecked() ? 1 : 0);
} else if (preference == mButtonTTY) {
return true;
} else if (preference == mButtonAutoRetry) {
android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
android.provider.Settings.Global.CALL_AUTO_RETRY,
mButtonAutoRetry.isChecked() ? 1 : 0);
return true;
} else if (preference == mButtonHAC) {
<start>int hac = mButtonHAC.isChecked() ? 1 : 0;
//comment
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.HEARING_AID, hac);<end>

//comment
mAudioManager.setParameter(HAC_KEY, hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);
return true;
} else if (preference == mButtonXDivert) {
processXDivert();
return true;
}
return false;
}","@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
if (preference == mButtonDTMF) {
return true;
} else if (preference == mDialpadAutocomplete) {
Settings.Secure.putInt(getContentResolver(), Settings.Secure.DIALPAD_AUTOCOMPLETE,
mDialpadAutocomplete.isChecked() ? 1 : 0);
} else if (preference == mButtonTTY) {
return true;
} else if (preference == mButtonAutoRetry) {
android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
android.provider.Settings.Global.CALL_AUTO_RETRY,
mButtonAutoRetry.isChecked() ? 1 : 0);
return true;
} else if (preference == mButtonHAC) {
int hac = mButtonHAC.isChecked() ? 1 : 0;
//comment
<start>Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.HEARING_AID, hac);<end>

//comment
mAudioManager.setParameter(HAC_KEY, hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);
return true;
} else if (preference == mButtonXDivert) {
processXDivert();
return true;
}
return false;
}"
381,"public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
<start>if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}<end>

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}

//comment
mRowInfos.addAll(bucket);
count += bucket.size();
}
day++;
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}","public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
<start>if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}<end>

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}

//comment
mRowInfos.addAll(bucket);
count += bucket.size();
}
day++;
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}"
383,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
<start>if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}<end>

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
<start>if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);<end>

//comment
//comment
//comment
//comment
<start>killApp = true;
}<end>

//comment
<start>if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}<end>

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
384,"        @Override
public void onReceive(final Context context, final Intent intent) {
final int callbackTimeout = intent.getIntExtra(EXTRA_CALLBACK_TIMEOUT,
CALLBACK_TIMEOUT);
new Thread(new Runnable() {
@Override
public void run() {
//comment
//comment
//comment
//comment
final AttachmentService service = AttachmentService.sRunningService;
if (service != null) {
//comment
<start>if (service.mStop) {
return;
}<end>
//comment
watchdogAlarm(service, callbackTimeout);
}
}
}, ""AttachmentService AttachmentWatchdog"").start();
}","        @Override
public void onReceive(final Context context, final Intent intent) {
final int callbackTimeout = intent.getIntExtra(EXTRA_CALLBACK_TIMEOUT,
CALLBACK_TIMEOUT);
new Thread(new Runnable() {
@Override
public void run() {
//comment
//comment
//comment
//comment
final AttachmentService service = AttachmentService.sRunningService;
if (service != null) {
//comment
<start>if (service.mStop) {
return;
}<end>
//comment
watchdogAlarm(service, callbackTimeout);
}
}
}, ""AttachmentService AttachmentWatchdog"").start();
}"
385,"        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
<start>unbindService(mConnection);<end>

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}","        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
<start>unbindService(mConnection);<end>

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}"
386,"private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
<start>if (enabledPackages.equals(mCachedEnabledPackages)) {
//comment
return;
}
mCachedEnabledPackages = enabledPackages;<end>
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);
}
//comment
for (ComponentName componentName : enabledComponents) {
if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}
}
//comment
Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}
}","private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
<start>if (enabledPackages.equals(mCachedEnabledPackages)) {<end>
//comment
return;
}
mCachedEnabledPackages = enabledPackages;
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);
}
//comment
for (ComponentName componentName : enabledComponents) {
if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}
}
//comment
Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}
}"
388,"    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
MessagingNotification.nonBlockingUpdateSendFailedNotification(this);
} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
<start>Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);<end>
}
//comment
//comment
//comment
<start>registerForServiceStateChanges();<end>
//comment
Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
<start>mToastHandler.post(new Runnable() {
public void run() {<end>
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}","    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
MessagingNotification.nonBlockingUpdateSendFailedNotification(this);
} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);
}
//comment
//comment
//comment
registerForServiceStateChanges();
//comment
<start>Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});<end>
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}"
389,"    public String getCurrentCountryIso() {
if (mCountryIso == null) {
Country country = mCountryDetector.detectCountry();

<start>if (country == null) {
//comment
return Locale.getDefault().getCountry();
}<end>

mCountryIso = country.getCountryIso();
}
return mCountryIso;
}","    public String getCurrentCountryIso() {
if (mCountryIso == null) {
<start>Country country = mCountryDetector.detectCountry();

if (country == null) {
//comment
return Locale.getDefault().getCountry();
}<end>

mCountryIso = country.getCountryIso();
}
return mCountryIso;
}"
391,"<start>    private void releaseWakeLock() {<end>
//comment
if (mWakeLock != null && mWakeLock.isHeld()) {
<start>Log.v(TAG, ""mms releaseWakeLock"");
mWakeLock.release();<end>
}
}","    private void releaseWakeLock() {
//comment
<start>if (mWakeLock != null && mWakeLock.isHeld()) {
Log.v(TAG, ""mms releaseWakeLock"");
mWakeLock.release();
}<end>
}"
393,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
<start>mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);<end>
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
<start>mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);<end>
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}"
394,"private boolean checkForEmptyRange(int address,
RegisterSpec endedLocal) {
int at = result.size() - 1;
Entry entry;

//comment
for (; at >= 0; at--) {
entry = result.get(at);

if (entry == null) {
continue;
}

if (entry.getAddress() != address) {
//comment
return false;
}

if (entry.matches(endedLocal)) {
break;
}
}

//comment
//comment
//comment
//comment

regs.remove(endedLocal);
result.set(at, null);
nullResultCount++;

int regNum = endedLocal.getReg();
boolean found = false;
entry = null;

//comment
for (at--; at >= 0; at--) {
entry = result.get(at);

if (entry == null) {
continue;
}

if (entry.getRegisterSpec().getReg() == regNum) {
found = true;
break;
}
}

if (found) {
//comment
endIndices[regNum] = at;

if (entry.getAddress() == address) {
//comment
//comment
//comment
//comment
result.set(at,
entry.withDisposition(Disposition.END_SIMPLY));
}
}

return true;
}","private boolean checkForEmptyRange(int address,
RegisterSpec endedLocal) {
int at = result.size() - 1;
Entry entry;

//comment
for (; at >= 0; at--) {
entry = result.get(at);

if (entry == null) {
continue;
}

if (entry.getAddress() != address) {
//comment
return false;
}

if (entry.matches(endedLocal)) {
break;
}
}

//comment
//comment
//comment
//comment

regs.remove(endedLocal);
result.set(at, null);
nullResultCount++;

int regNum = endedLocal.getReg();
boolean found = false;
entry = null;

//comment
<start>for (at--; at >= 0; at--) {
entry = result.get(at);

if (entry == null) {
continue;
}

if (entry.getRegisterSpec().getReg() == regNum) {
found = true;
break;
}
}<end>

if (found) {
//comment
endIndices[regNum] = at;

if (entry.getAddress() == address) {
//comment
//comment
//comment
//comment
result.set(at,
entry.withDisposition(Disposition.END_SIMPLY));
}
}

return true;
}"
395,"    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
<start>if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();
} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();<end>
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}","    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
<start>if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {<end>
//comment
//comment
if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();
} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
<start>} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}<end>
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}"
397,"public void setWatchdogAlarm(final Context context, final long delay,
final int callbackTimeout) {
//comment
if (mWatchdogPendingIntent == null) {
Intent intent = new Intent(context, AttachmentWatchdog.class);
intent.putExtra(EXTRA_CALLBACK_TIMEOUT, callbackTimeout);
mWatchdogPendingIntent =
PendingIntent.getBroadcast(context, 0, intent, 0);
}
//comment
<start>final AlarmManager am = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delay,
mWatchdogPendingIntent);<end>
debugTrace(""Set up a watchdog for %d millis in the future"", delay);
}","public void setWatchdogAlarm(final Context context, final long delay,
final int callbackTimeout) {
//comment
if (mWatchdogPendingIntent == null) {
Intent intent = new Intent(context, AttachmentWatchdog.class);
intent.putExtra(EXTRA_CALLBACK_TIMEOUT, callbackTimeout);
mWatchdogPendingIntent =
PendingIntent.getBroadcast(context, 0, intent, 0);
}
//comment
<start>final AlarmManager am = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delay,
mWatchdogPendingIntent);
debugTrace(""Set up a watchdog for %d millis in the future"", delay);<end>
}"
399,"    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
<start>if (permission.isGranted()) {
permission.setGranted(false);
}<end>

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}","    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
<start>if (permission.isGranted()) {
permission.setGranted(false);
}<end>

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}"
400,"private void addObserver(Uri uri, int index, ContentObserver observer,
boolean notifyForDescendents) {
//comment
if (index == countUriSegments(uri)) {
mObservers.add(new MockObserverEntry(observer, notifyForDescendents));
return;
}

//comment
String segment = getUriSegment(uri, index);
if (segment == null) {
throw new IllegalArgumentException(""Invalid Uri ("" + uri + "") used for observer"");
}
int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (node.mName.equals(segment)) {
node.addObserver(uri, index + 1, observer, notifyForDescendents);
return;
}
}

//comment
<start>MockObserverNode node = new MockObserverNode(segment);<end>
mChildren.add(node);
node.addObserver(uri, index + 1, observer, notifyForDescendents);
}","private void addObserver(Uri uri, int index, ContentObserver observer,
boolean notifyForDescendents) {
//comment
if (index == countUriSegments(uri)) {
mObservers.add(new MockObserverEntry(observer, notifyForDescendents));
return;
}

//comment
String segment = getUriSegment(uri, index);
if (segment == null) {
throw new IllegalArgumentException(""Invalid Uri ("" + uri + "") used for observer"");
}
int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (node.mName.equals(segment)) {
node.addObserver(uri, index + 1, observer, notifyForDescendents);
return;
}
}

//comment
<start>MockObserverNode node = new MockObserverNode(segment);
mChildren.add(node);<end>
node.addObserver(uri, index + 1, observer, notifyForDescendents);
}"
403,"    static boolean hangupRingingAndActive(Phone phone) {
boolean hungUpRingingCall = false;
boolean hungUpFgCall = false;
CallManager cm = PhoneGlobals.getInstance().mCM;
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();

//comment
if (!ringingCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Ringing Call"");
hungUpRingingCall = hangupRingingCall(ringingCall);
}

//comment
if (!fgCall.isIdle()) {
<start>log(""hangupRingingAndActive: Hang up Foreground Call"");
hungUpFgCall = hangupActiveCall(fgCall);<end>
}

return hungUpRingingCall || hungUpFgCall;
}","    static boolean hangupRingingAndActive(Phone phone) {
boolean hungUpRingingCall = false;
boolean hungUpFgCall = false;
CallManager cm = PhoneGlobals.getInstance().mCM;
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();

//comment
if (!ringingCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Ringing Call"");
hungUpRingingCall = hangupRingingCall(ringingCall);
}

//comment
if (!fgCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Foreground Call"");
<start>hungUpFgCall = hangupActiveCall(fgCall);<end>
}

return hungUpRingingCall || hungUpFgCall;
}"
407,"    protected void onTypeSelectionChange(int position) {
<start>EditType selected = mEditTypeAdapter.getItem(position);
//comment
if (mEditTypeAdapter.hasCustomSelection() && selected == CUSTOM_SELECTION) {
return;
}<end>

if (mType == selected && mType.customColumn == null) {
return;
}

if (selected.customColumn != null) {
showDialog(DIALOG_ID_CUSTOM);
} else {
//comment
mType = selected;
mEntry.put(mKind.typeColumn, mType.rawValue);
mSelectedLabelIndex = position;
rebuildLabel();
requestFocusForFirstEditField();
onLabelRebuilt();
}
}","    protected void onTypeSelectionChange(int position) {
EditType selected = mEditTypeAdapter.getItem(position);
//comment
<start>if (mEditTypeAdapter.hasCustomSelection() && selected == CUSTOM_SELECTION) {
return;
}<end>

if (mType == selected && mType.customColumn == null) {
return;
}

if (selected.customColumn != null) {
showDialog(DIALOG_ID_CUSTOM);
} else {
//comment
mType = selected;
mEntry.put(mKind.typeColumn, mType.rawValue);
mSelectedLabelIndex = position;
rebuildLabel();
requestFocusForFirstEditField();
onLabelRebuilt();
}
}"
408,"@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
<start>mFrontCameraId = mVideoCallManager.getFrontCameraId();<end>
chooseCamera(true);

//comment
<start>mNumberOfCameras = mVideoCallManager.getNumberOfCameras();<end>
if (mNumberOfCameras > 1) {
<start>mCameraPicker.setVisibility(View.VISIBLE);<end>
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}","@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
<start>mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}<end>

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}"
409,"    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
<start>StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);
//comment
setSelection(mStkMenu.defaultItem);<end>
}
}","    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
<start>StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);<end>
//comment
setSelection(mStkMenu.defaultItem);
}
}"
410,"private void completeSetCustomShortcut(Intent data) {
Intent intent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);
//comment
intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME));
<start>String appUri = intent.toUri(0);<end>
appUri = appUri.replaceAll(""com.android.contacts.action.QUICK_CONTACT"",
""android.intent.action.VIEW"");
//comment
Bitmap bmp = null;
Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);
if (extra != null && extra instanceof Bitmap) {
bmp = (Bitmap) extra;
}
if (bmp == null) {
extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
if (extra != null && extra instanceof Intent.ShortcutIconResource) {
try {
Intent.ShortcutIconResource iconResource = (ShortcutIconResource) extra;
final PackageManager packageManager = mParent.getActivity().getPackageManager();
Resources resources =
packageManager.getResourcesForApplication(iconResource.packageName);
final int id = resources.getIdentifier(iconResource.resourceName, null, null);
bmp = BitmapFactory.decodeResource(resources, id);
} catch (Exception e) {
Log.w(""ROMControl.ShortcutPicker"", ""Could not load shortcut icon: "" + extra);
}
}
}
mListener.shortcutPicked(appUri, getFriendlyShortcutName(intent), bmp, false);
}","private void completeSetCustomShortcut(Intent data) {
Intent intent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);
//comment
<start>intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME));
String appUri = intent.toUri(0);
appUri = appUri.replaceAll(""com.android.contacts.action.QUICK_CONTACT"",
""android.intent.action.VIEW"");<end>
//comment
Bitmap bmp = null;
Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);
if (extra != null && extra instanceof Bitmap) {
bmp = (Bitmap) extra;
}
if (bmp == null) {
extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
if (extra != null && extra instanceof Intent.ShortcutIconResource) {
try {
Intent.ShortcutIconResource iconResource = (ShortcutIconResource) extra;
final PackageManager packageManager = mParent.getActivity().getPackageManager();
Resources resources =
packageManager.getResourcesForApplication(iconResource.packageName);
final int id = resources.getIdentifier(iconResource.resourceName, null, null);
bmp = BitmapFactory.decodeResource(resources, id);
} catch (Exception e) {
Log.w(""ROMControl.ShortcutPicker"", ""Could not load shortcut icon: "" + extra);
}
}
}
mListener.shortcutPicked(appUri, getFriendlyShortcutName(intent), bmp, false);
}"
412,"        @Override
public View getView(int position, View convertView, ViewGroup parent) {
final View view;
final RawContactViewHolder holder;
if (convertView == null) {
view = mInflater.inflate(R.layout.raw_contact_list_item, parent, false);
holder = new RawContactViewHolder();
holder.displayName = (TextView) view.findViewById(R.id.display_name);
holder.accountName = (TextView) view.findViewById(R.id.account_name);
holder.accountIcon = (ImageView) view.findViewById(R.id.account_icon);
holder.photo = (ImageView) view.findViewById(R.id.photo);
view.setTag(holder);
} else {
view = convertView;
holder = (RawContactViewHolder) view.getTag();
}
final RawContact rawContact = mRawContactsMetadata.rawContacts.get(position);
final AccountType account = mAccountTypeManager.getAccountType(rawContact.accountType,
rawContact.accountDataSet);

String displayName =
mPreferences.getDisplayOrder() == ContactsPreferences.DISPLAY_ORDER_PRIMARY
? rawContact.displayName : rawContact.displayNameAlt;

if (TextUtils.isEmpty(displayName)) {
displayName = mContext.getString(R.string.missing_name);
}
holder.displayName.setText(displayName);

final String accountDisplayLabel;

//comment
if (mRawContactsMetadata.isUserProfile && account.areContactsWritable()) {
final AccountInfo accountInfo =
AccountTypeManager.getInstance(getContext()).getAccountInfoForAccount(
new AccountWithDataSet(rawContact.accountName,
rawContact.accountType, rawContact.accountDataSet));
accountDisplayLabel = EditorUiUtils.getAccountHeaderLabelForMyProfile(mContext,
accountInfo);
} else if (GoogleAccountType.ACCOUNT_TYPE.equals(rawContact.accountType)
&& account.dataSet == null) {
//comment
accountDisplayLabel = rawContact.accountName;
} else {
accountDisplayLabel = account.getDisplayLabel(mContext).toString();
}

holder.accountName.setText(accountDisplayLabel);
holder.accountIcon.setImageDrawable(account.getDisplayIcon(mContext));
final ContactPhotoManager.DefaultImageRequest
request = new ContactPhotoManager.DefaultImageRequest(
displayName, String.valueOf(rawContact.id),  true);

ContactPhotoManager.getInstance(mContext).loadThumbnail(holder.photo,
rawContact.photoId,
false,
true,
request);
return view;
}","        @Override
public View getView(int position, View convertView, ViewGroup parent) {
final View view;
final RawContactViewHolder holder;
if (convertView == null) {
view = mInflater.inflate(R.layout.raw_contact_list_item, parent, false);
holder = new RawContactViewHolder();
holder.displayName = (TextView) view.findViewById(R.id.display_name);
holder.accountName = (TextView) view.findViewById(R.id.account_name);
holder.accountIcon = (ImageView) view.findViewById(R.id.account_icon);
holder.photo = (ImageView) view.findViewById(R.id.photo);
view.setTag(holder);
} else {
view = convertView;
holder = (RawContactViewHolder) view.getTag();
}
final RawContact rawContact = mRawContactsMetadata.rawContacts.get(position);
final AccountType account = mAccountTypeManager.getAccountType(rawContact.accountType,
rawContact.accountDataSet);

String displayName =
mPreferences.getDisplayOrder() == ContactsPreferences.DISPLAY_ORDER_PRIMARY
? rawContact.displayName : rawContact.displayNameAlt;

if (TextUtils.isEmpty(displayName)) {
displayName = mContext.getString(R.string.missing_name);
}
holder.displayName.setText(displayName);

final String accountDisplayLabel;

//comment
<start>if (mRawContactsMetadata.isUserProfile && account.areContactsWritable()) {
final AccountInfo accountInfo =
AccountTypeManager.getInstance(getContext()).getAccountInfoForAccount(
new AccountWithDataSet(rawContact.accountName,
rawContact.accountType, rawContact.accountDataSet));
accountDisplayLabel = EditorUiUtils.getAccountHeaderLabelForMyProfile(mContext,
accountInfo);
} else if (GoogleAccountType.ACCOUNT_TYPE.equals(rawContact.accountType)<end>
&& account.dataSet == null) {
//comment
accountDisplayLabel = rawContact.accountName;
} else {
accountDisplayLabel = account.getDisplayLabel(mContext).toString();
}

holder.accountName.setText(accountDisplayLabel);
holder.accountIcon.setImageDrawable(account.getDisplayIcon(mContext));
final ContactPhotoManager.DefaultImageRequest
request = new ContactPhotoManager.DefaultImageRequest(
displayName, String.valueOf(rawContact.id),  true);

ContactPhotoManager.getInstance(mContext).loadThumbnail(holder.photo,
rawContact.photoId,
false,
true,
request);
return view;
}"
416,"        private void processListenerQueue(ListenerRecord record) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Processing component "" + record.componentName + "", ""
+ record.taskQueue.size() + "" queued tasks"");
}
if (record.taskQueue.isEmpty()) {
return;
}
if (!ensureServiceBound(record) || record.service == null) {
//comment
scheduleListenerRetry(record);
return;
}
//comment
while (true) {
<start>Task task = record.taskQueue.peek();<end>
if (task == null) {
break;
}
try {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Sending task "" + task);
}
task.send(record.service);
record.taskQueue.remove();
} catch (DeadObjectException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Remote service has died: "" + record.componentName);
}
break;
} catch (RemoteException e) {
Log.w(TAG, ""RemoteException communicating with "" + record.componentName, e);
break;
}
}
if (!record.taskQueue.isEmpty()) {
//comment
scheduleListenerRetry(record);
}
}","        private void processListenerQueue(ListenerRecord record) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Processing component "" + record.componentName + "", ""
+ record.taskQueue.size() + "" queued tasks"");
}
if (record.taskQueue.isEmpty()) {
return;
}
if (!ensureServiceBound(record) || record.service == null) {
//comment
scheduleListenerRetry(record);
return;
}
//comment
<start>while (true) {
Task task = record.taskQueue.peek();
if (task == null) {
break;
}
try {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Sending task "" + task);
}
task.send(record.service);
record.taskQueue.remove();
} catch (DeadObjectException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Remote service has died: "" + record.componentName);
}
break;
} catch (RemoteException e) {
Log.w(TAG, ""RemoteException communicating with "" + record.componentName, e);
break;
}
}<end>
if (!record.taskQueue.isEmpty()) {
//comment
scheduleListenerRetry(record);
}
}"
420,"private void cacheBitmap(Object key, byte[] bytes, boolean preloading, int requestedExtent) {
if (DEBUG) {
BitmapHolder prev = mBitmapHolderCache.get(key);
if (prev != null && prev.bytes != null) {
Log.d(TAG, ""Overwriting cache: key="" + key + (prev.fresh ? "" FRESH"" : "" stale""));
if (prev.fresh) {
mFreshCacheOverwrite.incrementAndGet();
} else {
mStaleCacheOverwrite.incrementAndGet();
}
}
Log.d(TAG, ""Caching data: key="" + key + "", "" +
(bytes == null ? ""<null>"" : btk(bytes.length)));
}
BitmapHolder holder = new BitmapHolder(bytes,
bytes == null ? -1 : BitmapUtil.getSmallerExtentFromBytes(bytes));

//comment
//comment
<start>if (!preloading) {
inflateBitmap(holder, requestedExtent);
}<end>

if (bytes != null) {
mBitmapHolderCache.put(key, holder);
if (mBitmapHolderCache.get(key) != holder) {
Log.w(TAG, ""Bitmap too big to fit in cache."");
mBitmapHolderCache.put(key, BITMAP_UNAVAILABLE);
}
} else {
mBitmapHolderCache.put(key, BITMAP_UNAVAILABLE);
}

mBitmapHolderCacheAllUnfresh = false;
}","private void cacheBitmap(Object key, byte[] bytes, boolean preloading, int requestedExtent) {
if (DEBUG) {
BitmapHolder prev = mBitmapHolderCache.get(key);
if (prev != null && prev.bytes != null) {
Log.d(TAG, ""Overwriting cache: key="" + key + (prev.fresh ? "" FRESH"" : "" stale""));
if (prev.fresh) {
mFreshCacheOverwrite.incrementAndGet();
} else {
mStaleCacheOverwrite.incrementAndGet();
}
}
Log.d(TAG, ""Caching data: key="" + key + "", "" +
(bytes == null ? ""<null>"" : btk(bytes.length)));
}
BitmapHolder holder = new BitmapHolder(bytes,
bytes == null ? -1 : BitmapUtil.getSmallerExtentFromBytes(bytes));

//comment
//comment
<start>if (!preloading) {
inflateBitmap(holder, requestedExtent);
}<end>

if (bytes != null) {
mBitmapHolderCache.put(key, holder);
if (mBitmapHolderCache.get(key) != holder) {
Log.w(TAG, ""Bitmap too big to fit in cache."");
mBitmapHolderCache.put(key, BITMAP_UNAVAILABLE);
}
} else {
mBitmapHolderCache.put(key, BITMAP_UNAVAILABLE);
}

mBitmapHolderCacheAllUnfresh = false;
}"
421,"    @Override
public void close() {
//comment
<start>mLocalDictionaryController.lock();<end>
try {
<start>if (mBinaryDictionary != null) {
mBinaryDictionary.close();
mBinaryDictionary = null;
}<end>
} finally {
mLocalDictionaryController.unlock();
}
}","    @Override
public void close() {
//comment
<start>mLocalDictionaryController.lock();<end>
try {
if (mBinaryDictionary != null) {
mBinaryDictionary.close();
mBinaryDictionary = null;
}
} finally {
mLocalDictionaryController.unlock();
}
}"
423,"        @Override
public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
if (mInForeground) {
//comment
<start>ErrorConsoleView errorConsole = getErrorConsole(true);
errorConsole.addErrorMessage(consoleMessage);
if (mWebViewController.shouldShowErrorConsole()
&& errorConsole.getShowState() !=
ErrorConsoleView.SHOW_MAXIMIZED) {
errorConsole.showConsole(ErrorConsoleView.SHOW_MINIMIZED);
}<end>
}

//comment
if (isPrivateBrowsingEnabled()) return true;

String message = ""Console: "" + consoleMessage.message() + "" ""
+ consoleMessage.sourceId() +  "":""
+ consoleMessage.lineNumber();

switch (consoleMessage.messageLevel()) {
case TIP:
Log.v(CONSOLE_LOGTAG, message);
break;
case LOG:
Log.i(CONSOLE_LOGTAG, message);
break;
case WARNING:
Log.w(CONSOLE_LOGTAG, message);
break;
case ERROR:
Log.e(CONSOLE_LOGTAG, message);
break;
case DEBUG:
Log.d(CONSOLE_LOGTAG, message);
break;
}

return true;
}","        @Override
public boolean onConsoleMessage(ConsoleMessage consoleMessage) {
if (mInForeground) {
//comment
<start>ErrorConsoleView errorConsole = getErrorConsole(true);
errorConsole.addErrorMessage(consoleMessage);<end>
if (mWebViewController.shouldShowErrorConsole()
&& errorConsole.getShowState() !=
ErrorConsoleView.SHOW_MAXIMIZED) {
errorConsole.showConsole(ErrorConsoleView.SHOW_MINIMIZED);
}
}

//comment
if (isPrivateBrowsingEnabled()) return true;

String message = ""Console: "" + consoleMessage.message() + "" ""
+ consoleMessage.sourceId() +  "":""
+ consoleMessage.lineNumber();

switch (consoleMessage.messageLevel()) {
case TIP:
Log.v(CONSOLE_LOGTAG, message);
break;
case LOG:
Log.i(CONSOLE_LOGTAG, message);
break;
case WARNING:
Log.w(CONSOLE_LOGTAG, message);
break;
case ERROR:
Log.e(CONSOLE_LOGTAG, message);
break;
case DEBUG:
Log.d(CONSOLE_LOGTAG, message);
break;
}

return true;
}"
424,"    private void dismissWhenReady() {
//comment
<start>final long shownTime = System.currentTimeMillis() - mShowTime;
if (shownTime >= mMinDisplayTime) {
//comment
mHandler.post(mDismisser);
} else {
//comment
final long sleepTime = mMinDisplayTime - shownTime;
mHandler.postDelayed(mDismisser, sleepTime);
}<end>
}","    private void dismissWhenReady() {
//comment
<start>final long shownTime = System.currentTimeMillis() - mShowTime;<end>
if (shownTime >= mMinDisplayTime) {
//comment
mHandler.post(mDismisser);
} else {
//comment
final long sleepTime = mMinDisplayTime - shownTime;
mHandler.postDelayed(mDismisser, sleepTime);
}
}"
425,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
<start>Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);<end>
MmsWidgetProvider.notifyDatasetChanged(mContext);
<start>} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));<end>
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
<start>Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);<end>
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
426,"@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
super.onScrollChanged(l, t, oldl, oldt);

//comment
//comment
//comment
if (isHardwareAccelerated()) {
<start>int count = mContentView.getChildCount();<end>
for (int i = 0; i < count; i++) {
<start>mContentView.getChildAt(i).invalidate();<end>
}
}
}","@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
super.onScrollChanged(l, t, oldl, oldt);

//comment
//comment
//comment
<start>if (isHardwareAccelerated()) {
int count = mContentView.getChildCount();
for (int i = 0; i < count; i++) {
mContentView.getChildAt(i).invalidate();
}
}<end>
}"
427,"        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
<start>mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();<end>
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}","        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
<start>if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}<end>

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}"
429,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
<start>} else if (visibilityStore == null) {<end>
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
<start>} else if (visibilityStore == null) {
//comment
allow = false;
} else {<end>
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
430,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
<start>String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}<end>
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

<start>if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}<end>
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
<start>} else {<end>
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}"
432,"    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
<start>if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
updateVoiceNumberField();
return null;
}<end>

String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
return null;
}

//comment
if (DBG) log(""updating default for call forwarding dialogs"");
return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;
}","    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
<start>updateVoiceNumberField();<end>
return null;
}

String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
return null;
}

//comment
if (DBG) log(""updating default for call forwarding dialogs"");
return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;
}"
433,"@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

Intent intent = getIntent();
if (!intent.getAction().equals(BluetoothDevice.ACTION_PAIRING_REQUEST))
{
Log.e(TAG, ""Error: this activity may be started only with intent "" +
BluetoothDevice.ACTION_PAIRING_REQUEST);
finish();
return;
}

LocalBluetoothManager manager = LocalBluetoothManager.getInstance(this);
if (manager == null) {
Log.e(TAG, ""Error: BluetoothAdapter not supported by system"");
finish();
return;
}
CachedBluetoothDeviceManager deviceManager = manager.getCachedDeviceManager();

mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
mType = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);
mIsSecurityHigh = intent.getBooleanExtra(BluetoothDevice.EXTRA_SECURE_PAIRING, false);
Log.i(TAG, ""Secure is "" + mIsSecurityHigh);

switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_PIN:
case BluetoothDevice.PAIRING_VARIANT_PASSKEY:
createUserEntryDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION:
int passkey =
intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_KEY, BluetoothDevice.ERROR);
if (passkey == BluetoothDevice.ERROR) {
Log.e(TAG, ""Invalid Confirmation Passkey received, not showing any dialog"");
return;
}
mPairingKey = String.format(Locale.US, ""%06d"", passkey);
createConfirmationDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_CONSENT:
case BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT:
createConsentDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY:
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN:
int pairingKey =
intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_KEY, BluetoothDevice.ERROR);
if (pairingKey == BluetoothDevice.ERROR) {
Log.e(TAG, ""Invalid Confirmation Passkey or PIN received, not showing any dialog"");
return;
}
if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY) {
mPairingKey = String.format(""%06d"", pairingKey);
} else {
mPairingKey = String.format(""%04d"", pairingKey);
}
createDisplayPasskeyOrPinDialog(deviceManager);
break;

default:
Log.e(TAG, ""Incorrect pairing type received, not showing any dialog"");
}

//comment
//comment
//comment
//comment
<start>registerReceiver(mReceiver, new IntentFilter(BluetoothDevice.ACTION_PAIRING_CANCEL));
registerReceiver(mReceiver, new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED));<end>
}","@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

Intent intent = getIntent();
if (!intent.getAction().equals(BluetoothDevice.ACTION_PAIRING_REQUEST))
{
Log.e(TAG, ""Error: this activity may be started only with intent "" +
BluetoothDevice.ACTION_PAIRING_REQUEST);
finish();
return;
}

LocalBluetoothManager manager = LocalBluetoothManager.getInstance(this);
if (manager == null) {
Log.e(TAG, ""Error: BluetoothAdapter not supported by system"");
finish();
return;
}
CachedBluetoothDeviceManager deviceManager = manager.getCachedDeviceManager();

mDevice = intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
mType = intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT, BluetoothDevice.ERROR);
mIsSecurityHigh = intent.getBooleanExtra(BluetoothDevice.EXTRA_SECURE_PAIRING, false);
Log.i(TAG, ""Secure is "" + mIsSecurityHigh);

switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_PIN:
case BluetoothDevice.PAIRING_VARIANT_PASSKEY:
createUserEntryDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION:
int passkey =
intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_KEY, BluetoothDevice.ERROR);
if (passkey == BluetoothDevice.ERROR) {
Log.e(TAG, ""Invalid Confirmation Passkey received, not showing any dialog"");
return;
}
mPairingKey = String.format(Locale.US, ""%06d"", passkey);
createConfirmationDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_CONSENT:
case BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT:
createConsentDialog(deviceManager);
break;

case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY:
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN:
int pairingKey =
intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_KEY, BluetoothDevice.ERROR);
if (pairingKey == BluetoothDevice.ERROR) {
Log.e(TAG, ""Invalid Confirmation Passkey or PIN received, not showing any dialog"");
return;
}
if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY) {
mPairingKey = String.format(""%06d"", pairingKey);
} else {
mPairingKey = String.format(""%04d"", pairingKey);
}
createDisplayPasskeyOrPinDialog(deviceManager);
break;

default:
Log.e(TAG, ""Incorrect pairing type received, not showing any dialog"");
}

//comment
//comment
//comment
//comment
<start>registerReceiver(mReceiver, new IntentFilter(BluetoothDevice.ACTION_PAIRING_CANCEL));
registerReceiver(mReceiver, new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED));<end>
}"
436,"@Override
public void onLoadResource(WebView view, String url) {
if (url != null && url.length() > 0) {
//comment
//comment
if (mCurrentState.mSecurityState == SecurityState.SECURITY_STATE_SECURE) {
//comment
if (!(URLUtil.isHttpsUrl(url) || URLUtil.isDataUrl(url)
|| URLUtil.isAboutUrl(url))) {
<start>mCurrentState.mSecurityState = SecurityState.SECURITY_STATE_MIXED;<end>
}
}
}
}","@Override
public void onLoadResource(WebView view, String url) {
if (url != null && url.length() > 0) {
//comment
//comment
<start>if (mCurrentState.mSecurityState == SecurityState.SECURITY_STATE_SECURE) {<end>
//comment
if (!(URLUtil.isHttpsUrl(url) || URLUtil.isDataUrl(url)
|| URLUtil.isAboutUrl(url))) {
mCurrentState.mSecurityState = SecurityState.SECURITY_STATE_MIXED;
}
}
}
}"
438,"    public void onCodeInput(final int code, final int autoCaps) {
if (DEBUG_EVENT) {
Log.d(TAG, ""onCodeInput: code="" + Constants.printableCode(code)
+ "" autoCaps="" + autoCaps + "" "" + this);
}

switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
if (code == Constants.CODE_SWITCH_ALPHA_SYMBOL) {
//comment
if (mIsAlphabetMode) {
mSwitchState = SWITCH_STATE_ALPHA;
} else {
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
}
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
if (code == Constants.CODE_SHIFT) {
//comment
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
break;
case SWITCH_STATE_SYMBOL_BEGIN:
if (!isSpaceCharacter(code) && (Constants.isLetterCode(code)
|| code == Constants.CODE_OUTPUT_TEXT)) {
mSwitchState = SWITCH_STATE_SYMBOL;
}
break;
case SWITCH_STATE_SYMBOL:
//comment
//comment
if (isSpaceCharacter(code)) {
toggleAlphabetAndSymbols();
mPrevSymbolsKeyboardWasShifted = false;
}
break;
}

//comment
<start>if (Constants.isLetterCode(code)) {
updateAlphabetShiftState(autoCaps, RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE);
}<end>
}","    public void onCodeInput(final int code, final int autoCaps) {
if (DEBUG_EVENT) {
Log.d(TAG, ""onCodeInput: code="" + Constants.printableCode(code)
+ "" autoCaps="" + autoCaps + "" "" + this);
}

switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
if (code == Constants.CODE_SWITCH_ALPHA_SYMBOL) {
//comment
if (mIsAlphabetMode) {
mSwitchState = SWITCH_STATE_ALPHA;
} else {
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
}
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
if (code == Constants.CODE_SHIFT) {
//comment
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
break;
case SWITCH_STATE_SYMBOL_BEGIN:
if (!isSpaceCharacter(code) && (Constants.isLetterCode(code)
|| code == Constants.CODE_OUTPUT_TEXT)) {
mSwitchState = SWITCH_STATE_SYMBOL;
}
break;
case SWITCH_STATE_SYMBOL:
//comment
//comment
if (isSpaceCharacter(code)) {
toggleAlphabetAndSymbols();
mPrevSymbolsKeyboardWasShifted = false;
}
break;
}

//comment
<start>if (Constants.isLetterCode(code)) {
updateAlphabetShiftState(autoCaps, RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE);
}<end>
}"
439,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
<start>if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}<end>
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
<start>if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}<end>
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
446,"        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
synchronized (mWriteScheduleLock) {
mWriteScheduled = false;
if (mWriteInProgress) {
//comment
<start>maybeWriteStatusToDiskAsync();<end>
return;
}
mWriteInProgress = true;
}
synchronized (mLock) {
//comment
mJobSet.forEachJob(null, (job) -> {
if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}
});
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
- startElapsed) + ""ms"");
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}
}","        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
synchronized (mWriteScheduleLock) {
mWriteScheduled = false;
<start>if (mWriteInProgress) {
//comment
maybeWriteStatusToDiskAsync();
return;
}<end>
mWriteInProgress = true;
}
synchronized (mLock) {
//comment
mJobSet.forEachJob(null, (job) -> {
if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}
});
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
- startElapsed) + ""ms"");
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}
}"
448,"private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
if (attachment.mContentBytes != null) {
<start>inStream = new ByteArrayInputStream(attachment.mContentBytes);<end>
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}","private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
<start>if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();<end>
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}"
449,"@Override
public InputStream getAsStream() {
checkNotDestroyed();
try {
return new FileInputStream(mFile);
<start>} catch (FileNotFoundException e) {
//comment
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Temp file not found"");<end>

//comment
return new ByteArrayInputStream(new byte[0]);
}
}","@Override
public InputStream getAsStream() {
checkNotDestroyed();
try {
return new FileInputStream(mFile);
<start>} catch (FileNotFoundException e) {<end>
//comment
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Temp file not found"");

//comment
return new ByteArrayInputStream(new byte[0]);
}
}"
450,"<start>protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {<end>
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}","protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
<start>final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;<end>

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}"
451,"private void completeSetCustomShortcut(Intent data) {
Intent intent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);
//comment
intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME));
String appUri = intent.toUri(0);
appUri = appUri.replaceAll(""com.android.contacts.action.QUICK_CONTACT"",
""android.intent.action.VIEW"");
//comment
Bitmap bmp = null;
<start>Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);<end>
if (extra != null && extra instanceof Bitmap) {
<start>bmp = (Bitmap) extra;<end>
}
if (bmp == null) {
extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
if (extra != null && extra instanceof Intent.ShortcutIconResource) {
try {
Intent.ShortcutIconResource iconResource = (ShortcutIconResource) extra;
final PackageManager packageManager = mParent.getActivity().getPackageManager();
Resources resources =
packageManager.getResourcesForApplication(iconResource.packageName);
final int id = resources.getIdentifier(iconResource.resourceName, null, null);
bmp = BitmapFactory.decodeResource(resources, id);
} catch (Exception e) {
Log.w(""ROMControl.ShortcutPicker"", ""Could not load shortcut icon: "" + extra);
}
}
}
mListener.shortcutPicked(appUri, getFriendlyShortcutName(intent), bmp, false);
}","private void completeSetCustomShortcut(Intent data) {
Intent intent = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_INTENT);
//comment
intent.putExtra(Intent.EXTRA_SHORTCUT_NAME,
data.getStringExtra(Intent.EXTRA_SHORTCUT_NAME));
String appUri = intent.toUri(0);
appUri = appUri.replaceAll(""com.android.contacts.action.QUICK_CONTACT"",
""android.intent.action.VIEW"");
//comment
<start>Bitmap bmp = null;
Parcelable extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON);
if (extra != null && extra instanceof Bitmap) {
bmp = (Bitmap) extra;
}<end>
if (bmp == null) {
extra = data.getParcelableExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE);
if (extra != null && extra instanceof Intent.ShortcutIconResource) {
try {
Intent.ShortcutIconResource iconResource = (ShortcutIconResource) extra;
final PackageManager packageManager = mParent.getActivity().getPackageManager();
Resources resources =
packageManager.getResourcesForApplication(iconResource.packageName);
final int id = resources.getIdentifier(iconResource.resourceName, null, null);
bmp = BitmapFactory.decodeResource(resources, id);
} catch (Exception e) {
Log.w(""ROMControl.ShortcutPicker"", ""Could not load shortcut icon: "" + extra);
}
}
}
mListener.shortcutPicked(appUri, getFriendlyShortcutName(intent), bmp, false);
}"
453,"public void initialize(List<List<Entry>> entries, int numInitialVisibleEntries,
boolean isExpanded, boolean isAlwaysExpanded, ExpandingEntryCardViewListener listener,
ViewGroup animationViewGroup) {
LayoutInflater layoutInflater = LayoutInflater.from(getContext());
mIsExpanded = isExpanded;
mIsAlwaysExpanded = isAlwaysExpanded;
//comment
mIsExpanded |= mIsAlwaysExpanded;
mEntryViews = new ArrayList<List<View>>(entries.size());
mEntries = entries;
mNumEntries = 0;
mAllEntriesInflated = false;
for (List<Entry> entryList : mEntries) {
mNumEntries += entryList.size();
mEntryViews.add(new ArrayList<View>());
}
mCollapsedEntriesCount = Math.min(numInitialVisibleEntries, mNumEntries);
//comment
if (entries.size() > 1) {
mSeparators = new ArrayList<>(entries.size() - 1);
}
<start>mListener = listener;<end>
mAnimationViewGroup = animationViewGroup;

if (mIsExpanded) {
updateExpandCollapseButton(getCollapseButtonText(),  0);
inflateAllEntries(layoutInflater);
} else {
updateExpandCollapseButton(getExpandButtonText(),  0);
inflateInitialEntries(layoutInflater);
}
insertEntriesIntoViewGroup();
applyColor();
}","public void initialize(List<List<Entry>> entries, int numInitialVisibleEntries,
boolean isExpanded, boolean isAlwaysExpanded, ExpandingEntryCardViewListener listener,
ViewGroup animationViewGroup) {
LayoutInflater layoutInflater = LayoutInflater.from(getContext());
mIsExpanded = isExpanded;
mIsAlwaysExpanded = isAlwaysExpanded;
//comment
mIsExpanded |= mIsAlwaysExpanded;
mEntryViews = new ArrayList<List<View>>(entries.size());
mEntries = entries;
mNumEntries = 0;
mAllEntriesInflated = false;
for (List<Entry> entryList : mEntries) {
mNumEntries += entryList.size();
mEntryViews.add(new ArrayList<View>());
}
mCollapsedEntriesCount = Math.min(numInitialVisibleEntries, mNumEntries);
//comment
<start>if (entries.size() > 1) {
mSeparators = new ArrayList<>(entries.size() - 1);
}<end>
mListener = listener;
mAnimationViewGroup = animationViewGroup;

if (mIsExpanded) {
updateExpandCollapseButton(getCollapseButtonText(),  0);
inflateAllEntries(layoutInflater);
} else {
updateExpandCollapseButton(getExpandButtonText(),  0);
inflateInitialEntries(layoutInflater);
}
insertEntriesIntoViewGroup();
applyColor();
}"
454,"    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
updateVoiceNumberField();
return null;
}

String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
<start>return null;<end>
}

//comment
if (DBG) log(""updating default for call forwarding dialogs"");
return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;
}","    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
updateVoiceNumberField();
return null;
}

<start>String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
return null;
}<end>

//comment
if (DBG) log(""updating default for call forwarding dialogs"");
return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;
}"
455,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
<start>mTextIn.setText(mStkInput.defaultText);<end>
} else {
//comment
<start>mTextIn.setText("""", BufferType.EDITABLE);<end>
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
<start>if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {<end>
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
462,"    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}","    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
<start>if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}<end>

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}"
464,"    @Override
protected void onRestoreInstanceState(Bundle savedInstanceState) {
CatLog.d(LOG_TAG, ""onRestoreInstanceState: "" + mSlotId);
mState = savedInstanceState.getInt(STATE_KEY);
mAcceptUsersInput = savedInstanceState.getBoolean(ACCEPT_USERS_INPUT_KEY);
if (!mAcceptUsersInput) {
//comment
if ((mState == STATE_MAIN) && appService.isMainMenuAvailable(mSlotId)) {
mAcceptUsersInput = true;
} else {
showProgressBar(true);
}
}
mIsResponseSent = savedInstanceState.getBoolean(RESPONSE_SENT_KEY);

mAlarmTime = savedInstanceState.getLong(ALARM_TIME_KEY, NO_SELECT_ALARM);
if (mAlarmTime != NO_SELECT_ALARM) {
startTimeOut();
}
}","    @Override
protected void onRestoreInstanceState(Bundle savedInstanceState) {
CatLog.d(LOG_TAG, ""onRestoreInstanceState: "" + mSlotId);
mState = savedInstanceState.getInt(STATE_KEY);
mAcceptUsersInput = savedInstanceState.getBoolean(ACCEPT_USERS_INPUT_KEY);
if (!mAcceptUsersInput) {
//comment
<start>if ((mState == STATE_MAIN) && appService.isMainMenuAvailable(mSlotId)) {
mAcceptUsersInput = true;
} else {<end>
showProgressBar(true);
}
}
mIsResponseSent = savedInstanceState.getBoolean(RESPONSE_SENT_KEY);

mAlarmTime = savedInstanceState.getLong(ALARM_TIME_KEY, NO_SELECT_ALARM);
if (mAlarmTime != NO_SELECT_ALARM) {
startTimeOut();
}
}"
468,"    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
<start>int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);<end>
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}","    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
<start>int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);<end>
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}"
473,"private void writeJobsMapImpl(List<JobStatus> jobList) {
int numJobs = 0;
int numSystemJobs = 0;
int numSyncJobs = 0;
try {
mEventLogger.setStartTime(SystemClock.uptimeMillis());
ByteArrayOutputStream baos = new ByteArrayOutputStream();
XmlSerializer out = new FastXmlSerializer();
out.setOutput(baos, StandardCharsets.UTF_8.name());
out.startDocument(null, true);
out.setFeature(""http://xmlpull.org/v1/doc/features.html#indent-output"", true);

out.startTag(null, ""job-info"");
out.attribute(null, ""version"", Integer.toString(JOBS_FILE_VERSION));
for (int i=0; i<jobList.size(); i++) {
JobStatus jobStatus = jobList.get(i);
if (DEBUG) {
Slog.d(TAG, ""Saving job "" + jobStatus.getJobId());
}
out.startTag(null, ""job"");
addAttributesToJobTag(out, jobStatus);
writeConstraintsToXml(out, jobStatus);
writeExecutionCriteriaToXml(out, jobStatus);
writeBundleToXml(jobStatus.getJob().getExtras(), out);
out.endTag(null, ""job"");

numJobs++;
if (jobStatus.getUid() == Process.SYSTEM_UID) {
numSystemJobs++;
if (isSyncJob(jobStatus)) {
numSyncJobs++;
}
}
}
out.endTag(null, ""job-info"");
out.endDocument();

//comment
<start>FileOutputStream fos = mJobsFile.startWrite();
fos.write(baos.toByteArray());<end>
mJobsFile.finishWrite(fos);
<start>} catch (IOException e) {<end>
if (DEBUG) {
Slog.v(TAG, ""Error writing out job data."", e);
}
} catch (XmlPullParserException e) {
if (DEBUG) {
Slog.d(TAG, ""Error persisting bundle."", e);
}
} finally {
mPersistInfo.countAllJobsSaved = numJobs;
mPersistInfo.countSystemServerJobsSaved = numSystemJobs;
mPersistInfo.countSystemSyncManagerJobsSaved = numSyncJobs;
}
}","private void writeJobsMapImpl(List<JobStatus> jobList) {
int numJobs = 0;
int numSystemJobs = 0;
int numSyncJobs = 0;
try {
mEventLogger.setStartTime(SystemClock.uptimeMillis());
ByteArrayOutputStream baos = new ByteArrayOutputStream();
XmlSerializer out = new FastXmlSerializer();
out.setOutput(baos, StandardCharsets.UTF_8.name());
out.startDocument(null, true);
out.setFeature(""http://xmlpull.org/v1/doc/features.html#indent-output"", true);

out.startTag(null, ""job-info"");
out.attribute(null, ""version"", Integer.toString(JOBS_FILE_VERSION));
for (int i=0; i<jobList.size(); i++) {
JobStatus jobStatus = jobList.get(i);
if (DEBUG) {
Slog.d(TAG, ""Saving job "" + jobStatus.getJobId());
}
out.startTag(null, ""job"");
addAttributesToJobTag(out, jobStatus);
writeConstraintsToXml(out, jobStatus);
writeExecutionCriteriaToXml(out, jobStatus);
writeBundleToXml(jobStatus.getJob().getExtras(), out);
out.endTag(null, ""job"");

numJobs++;
if (jobStatus.getUid() == Process.SYSTEM_UID) {
numSystemJobs++;
if (isSyncJob(jobStatus)) {
numSyncJobs++;
}
}
}
out.endTag(null, ""job-info"");
out.endDocument();

//comment
<start>FileOutputStream fos = mJobsFile.startWrite();
fos.write(baos.toByteArray());
mJobsFile.finishWrite(fos);<end>
} catch (IOException e) {
if (DEBUG) {
Slog.v(TAG, ""Error writing out job data."", e);
}
} catch (XmlPullParserException e) {
if (DEBUG) {
Slog.d(TAG, ""Error persisting bundle."", e);
}
} finally {
mPersistInfo.countAllJobsSaved = numJobs;
mPersistInfo.countSystemServerJobsSaved = numSystemJobs;
mPersistInfo.countSystemSyncManagerJobsSaved = numSyncJobs;
}
}"
474,"@Override
protected Dialog onCreateDialog(int id) {
if (id == BUSY_READING_DIALOG || id == BUSY_SAVING_DIALOG) {
ProgressDialog dialog = new ProgressDialog(this);
dialog.setTitle(getText(R.string.updating_title));
dialog.setIndeterminate(true);

switch(id) {
case BUSY_READING_DIALOG:
dialog.setCancelable(true);
dialog.setOnCancelListener(this);
dialog.setMessage(getText(R.string.reading_settings));
return dialog;
case BUSY_SAVING_DIALOG:
dialog.setCancelable(false);
dialog.setMessage(getText(R.string.updating_settings));
return dialog;
}
return null;
}

if (id == RESPONSE_ERROR || id == RADIO_OFF_ERROR || id == EXCEPTION_ERROR
|| id == FDN_CHECK_FAILURE || id == STK_CC_SS_TO_DIAL_ERROR
|| id == STK_CC_SS_TO_USSD_ERROR || id == STK_CC_SS_TO_SS_ERROR) {
AlertDialog.Builder builder = new AlertDialog.Builder(this);

int msgId;
int titleId = R.string.error_updating_title;

switch (id) {
case RESPONSE_ERROR:
msgId = R.string.response_error;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case RADIO_OFF_ERROR:
msgId = R.string.radio_off_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismissAndFinish);
break;
case FDN_CHECK_FAILURE:
msgId = R.string.fdn_check_failure;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_DIAL_ERROR:
msgId = R.string.stk_cc_ss_to_dial_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_USSD_ERROR:
msgId = R.string.stk_cc_ss_to_ussd_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_SS_ERROR:
msgId = R.string.stk_cc_ss_to_ss_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case EXCEPTION_ERROR:
msgId = R.string.exception_error;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
default:
msgId = R.string.exception_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismissAndFinish);
break;
}

builder.setTitle(getText(titleId));
builder.setMessage(getText(msgId));
builder.setCancelable(false);
AlertDialog dialog = builder.create();

//comment
<start>dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);<end>

return dialog;
}
return null;
}","@Override
protected Dialog onCreateDialog(int id) {
if (id == BUSY_READING_DIALOG || id == BUSY_SAVING_DIALOG) {
ProgressDialog dialog = new ProgressDialog(this);
dialog.setTitle(getText(R.string.updating_title));
dialog.setIndeterminate(true);

switch(id) {
case BUSY_READING_DIALOG:
dialog.setCancelable(true);
dialog.setOnCancelListener(this);
dialog.setMessage(getText(R.string.reading_settings));
return dialog;
case BUSY_SAVING_DIALOG:
dialog.setCancelable(false);
dialog.setMessage(getText(R.string.updating_settings));
return dialog;
}
return null;
}

if (id == RESPONSE_ERROR || id == RADIO_OFF_ERROR || id == EXCEPTION_ERROR
|| id == FDN_CHECK_FAILURE || id == STK_CC_SS_TO_DIAL_ERROR
|| id == STK_CC_SS_TO_USSD_ERROR || id == STK_CC_SS_TO_SS_ERROR) {
AlertDialog.Builder builder = new AlertDialog.Builder(this);

int msgId;
int titleId = R.string.error_updating_title;

switch (id) {
case RESPONSE_ERROR:
msgId = R.string.response_error;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case RADIO_OFF_ERROR:
msgId = R.string.radio_off_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismissAndFinish);
break;
case FDN_CHECK_FAILURE:
msgId = R.string.fdn_check_failure;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_DIAL_ERROR:
msgId = R.string.stk_cc_ss_to_dial_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_USSD_ERROR:
msgId = R.string.stk_cc_ss_to_ussd_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case STK_CC_SS_TO_SS_ERROR:
msgId = R.string.stk_cc_ss_to_ss_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
case EXCEPTION_ERROR:
msgId = R.string.exception_error;
builder.setPositiveButton(R.string.close_dialog, mDismiss);
break;
default:
msgId = R.string.exception_error;
//comment
builder.setPositiveButton(R.string.close_dialog, mDismissAndFinish);
break;
}

builder.setTitle(getText(titleId));
builder.setMessage(getText(msgId));
builder.setCancelable(false);
AlertDialog dialog = builder.create();

//comment
<start>dialog.getWindow().addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);<end>

return dialog;
}
return null;
}"
475,"<start>private void initFromIntent(Intent intent) {
//comment
//comment
CatLog.d(LOG_TAG, ""initFromIntent - slot id: "" + mSlotId);<end>
if (intent != null) {
mStkInput = intent.getParcelableExtra(""INPUT"");
mSlotId = intent.getIntExtra(StkAppService.SLOT_ID, -1);
CatLog.d(LOG_TAG, ""onCreate - slot id: "" + mSlotId);
if (mStkInput == null) {
finish();
} else {
mState = mStkInput.yesNo ? STATE_YES_NO :
STATE_TEXT;
configInputDisplay();
}
} else {
finish();
}
}","private void initFromIntent(Intent intent) {
//comment
//comment
CatLog.d(LOG_TAG, ""initFromIntent - slot id: "" + mSlotId);
<start>if (intent != null) {
mStkInput = intent.getParcelableExtra(""INPUT"");
mSlotId = intent.getIntExtra(StkAppService.SLOT_ID, -1);
CatLog.d(LOG_TAG, ""onCreate - slot id: "" + mSlotId);
if (mStkInput == null) {
finish();
} else {
mState = mStkInput.yesNo ? STATE_YES_NO :
STATE_TEXT;
configInputDisplay();
}
} else {
finish();
}<end>
}"
477,"private Manifest makeManifest() throws IOException {
byte[] manifestBytes = outputResources.get(MANIFEST_NAME);
Manifest manifest;
Attributes attribs;

if (manifestBytes == null) {
//comment
<start>manifest = new Manifest();
attribs = manifest.getMainAttributes();<end>
attribs.put(Attributes.Name.MANIFEST_VERSION, ""1.0"");
} else {
manifest = new Manifest(new ByteArrayInputStream(manifestBytes));
attribs = manifest.getMainAttributes();
outputResources.remove(MANIFEST_NAME);
}

String createdBy = attribs.getValue(CREATED_BY);
if (createdBy == null) {
createdBy = """";
} else {
createdBy += "" + "";
}
createdBy += ""dx "" + Version.VERSION;

attribs.put(CREATED_BY, createdBy);
attribs.putValue(""Dex-Location"", DexFormat.DEX_IN_JAR_NAME);

return manifest;
}","private Manifest makeManifest() throws IOException {
byte[] manifestBytes = outputResources.get(MANIFEST_NAME);
Manifest manifest;
Attributes attribs;

if (manifestBytes == null) {
//comment
<start>manifest = new Manifest();
attribs = manifest.getMainAttributes();
attribs.put(Attributes.Name.MANIFEST_VERSION, ""1.0"");<end>
} else {
manifest = new Manifest(new ByteArrayInputStream(manifestBytes));
attribs = manifest.getMainAttributes();
outputResources.remove(MANIFEST_NAME);
}

String createdBy = attribs.getValue(CREATED_BY);
if (createdBy == null) {
createdBy = """";
} else {
createdBy += "" + "";
}
createdBy += ""dx "" + Version.VERSION;

attribs.put(CREATED_BY, createdBy);
attribs.putValue(""Dex-Location"", DexFormat.DEX_IN_JAR_NAME);

return manifest;
}"
479," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}

//comment
//comment
//comment
//comment
//comment
if ((ringingCall.getState() != Call.State.IDLE)
&& !fgCall.getState().isDialing()) {
//comment
//comment
updateRingingCall(cm);
} else if ((fgCall.getState() != Call.State.IDLE)
|| (bgCall.getState() != Call.State.IDLE)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
} else {
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}

//comment
//comment
//comment
//comment
//comment
<start>if ((ringingCall.getState() != Call.State.IDLE)
&& !fgCall.getState().isDialing()) {<end>
//comment
//comment
updateRingingCall(cm);
<start>} else if ((fgCall.getState() != Call.State.IDLE)<end>
|| (bgCall.getState() != Call.State.IDLE)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
<start>} else {<end>
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"
481,"    private static void cleanup(Context context) {
if (mHasCleaned)
return;
mHasCleaned = true;
try {
//comment
<start>String[] files = context.getFilesDir().list();
if (files == null)
return;<end>
for (String file : files) {
if (!file.endsWith("".urlimage""))
<start>continue;<end>

File f = new File(context.getFilesDir().getAbsolutePath() + '/' + file);
if (System.currentTimeMillis() > f.lastModified() + CACHE_DURATION_ONE_WEEK)
f.delete();
}
}
catch (Exception e) {
e.printStackTrace();
}
}","    private static void cleanup(Context context) {
if (mHasCleaned)
return;
mHasCleaned = true;
try {
//comment
<start>String[] files = context.getFilesDir().list();
if (files == null)
return;
for (String file : files) {
if (!file.endsWith("".urlimage""))
continue;

File f = new File(context.getFilesDir().getAbsolutePath() + '/' + file);
if (System.currentTimeMillis() > f.lastModified() + CACHE_DURATION_ONE_WEEK)
f.delete();
}<end>
}
catch (Exception e) {
e.printStackTrace();
}
}"
482,"    private static View makeTitleView(Context context) {
<start>final TextView textView = new TextView(context);
//comment
//comment
TextViewCompat.setTextAppearance(textView, R.style.AccessibilityDialogTitle);
textView.setGravity(Gravity.CENTER);<end>
return textView;
}","    private static View makeTitleView(Context context) {
final TextView textView = new TextView(context);
//comment
//comment
<start>TextViewCompat.setTextAppearance(textView, R.style.AccessibilityDialogTitle);<end>
textView.setGravity(Gravity.CENTER);
return textView;
}"
483,"    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
updateVoiceNumberField();
return null;
}

String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
return null;
}

//comment
<start>if (DBG) log(""updating default for call forwarding dialogs"");<end>
return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;
}","    @Override
public String onGetDefaultNumber(EditPhoneNumberPreference preference) {
if (preference == mSubMenuVoicemailSettings) {
//comment
//comment
if (DBG) log(""updating default for voicemail dialog"");
updateVoiceNumberField();
return null;
}

String vmDisplay = mPhone.getVoiceMailNumber();
if (TextUtils.isEmpty(vmDisplay)) {
//comment
//comment
return null;
}

//comment
if (DBG) log(""updating default for call forwarding dialogs"");
<start>return getString(R.string.voicemail_abbreviated) + "" "" + vmDisplay;<end>
}"
486,"@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
//comment
if (mGestureNavigationEnabled) {
<start>switch (keyCode) {<end>
case KeyEvent.KEYCODE_NAVIGATE_PREVIOUS:
fling(0, -mMinFlingVelocity);
<start>return true;<end>
case KeyEvent.KEYCODE_NAVIGATE_NEXT:
fling(0, mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_IN:
return tapCenterView();
case KeyEvent.KEYCODE_NAVIGATE_OUT:
//comment
//comment
return false;
}
}
return super.onKeyDown(keyCode, event);
}","@Override
public boolean onKeyDown(int keyCode, KeyEvent event) {
//comment
<start>if (mGestureNavigationEnabled) {
switch (keyCode) {
case KeyEvent.KEYCODE_NAVIGATE_PREVIOUS:
fling(0, -mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_NEXT:
fling(0, mMinFlingVelocity);
return true;
case KeyEvent.KEYCODE_NAVIGATE_IN:
return tapCenterView();
case KeyEvent.KEYCODE_NAVIGATE_OUT:
//comment
//comment
return false;
}
}<end>
return super.onKeyDown(keyCode, event);
}"
488,"private void goTo(Time goToTime, boolean ignoreTime, boolean animateToday) {
if (mViewSwitcher == null) {
//comment
<start>mSelectedDay.set(goToTime);<end>
return;
}

DayView currentView = (DayView) mViewSwitcher.getCurrentView();

//comment
int diff = currentView.compareToVisibleTimeRange(goToTime);

if (diff == 0) {
//comment
currentView.setSelected(goToTime, ignoreTime, animateToday);
} else {
//comment
if (diff > 0) {
mViewSwitcher.setInAnimation(mInAnimationForward);
mViewSwitcher.setOutAnimation(mOutAnimationForward);
} else {
mViewSwitcher.setInAnimation(mInAnimationBackward);
mViewSwitcher.setOutAnimation(mOutAnimationBackward);
}

DayView next = (DayView) mViewSwitcher.getNextView();
if (ignoreTime) {
next.setFirstVisibleHour(currentView.getFirstVisibleHour());
}

next.setSelected(goToTime, ignoreTime, animateToday);
next.reloadEvents();
mViewSwitcher.showNext();
next.requestFocus();
next.updateTitle();
next.restartCurrentTimeUpdates();
}
}","private void goTo(Time goToTime, boolean ignoreTime, boolean animateToday) {
<start>if (mViewSwitcher == null) {
//comment
mSelectedDay.set(goToTime);
return;
}<end>

DayView currentView = (DayView) mViewSwitcher.getCurrentView();

//comment
int diff = currentView.compareToVisibleTimeRange(goToTime);

if (diff == 0) {
//comment
currentView.setSelected(goToTime, ignoreTime, animateToday);
} else {
//comment
if (diff > 0) {
mViewSwitcher.setInAnimation(mInAnimationForward);
mViewSwitcher.setOutAnimation(mOutAnimationForward);
} else {
mViewSwitcher.setInAnimation(mInAnimationBackward);
mViewSwitcher.setOutAnimation(mOutAnimationBackward);
}

DayView next = (DayView) mViewSwitcher.getNextView();
if (ignoreTime) {
next.setFirstVisibleHour(currentView.getFirstVisibleHour());
}

next.setSelected(goToTime, ignoreTime, animateToday);
next.reloadEvents();
mViewSwitcher.showNext();
next.requestFocus();
next.updateTitle();
next.restartCurrentTimeUpdates();
}
}"
489,"@RestrictTo(LIBRARY_GROUP)
@SuppressWarnings(""deprecation"")
public void addToShortcutIntent(@NonNull Intent outIntent, @Nullable Drawable badge,
@NonNull Context c) {
Bitmap icon;
switch (mType) {
case TYPE_BITMAP:
icon = (Bitmap) mObj1;
if (badge != null) {
//comment
icon = icon.copy(icon.getConfig(), true);
}
break;
case TYPE_ADAPTIVE_BITMAP:
icon = createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, true);
break;
case TYPE_RESOURCE:
try {
Context context = c.createPackageContext((String) mObj1, 0);
if (badge == null) {
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
Intent.ShortcutIconResource.fromContext(context, mInt1));
return;
} else {
Drawable dr = ContextCompat.getDrawable(context, mInt1);
if (dr.getIntrinsicWidth() <= 0 || dr.getIntrinsicHeight() <= 0) {
int size = ((ActivityManager) context.getSystemService(
Context.ACTIVITY_SERVICE)).getLauncherLargeIconSize();
icon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
} else {
icon = Bitmap.createBitmap(dr.getIntrinsicWidth(),
dr.getIntrinsicHeight(),
Bitmap.Config.ARGB_8888);
}
dr.setBounds(0, 0, icon.getWidth(), icon.getHeight());
dr.draw(new Canvas(icon));
}
} catch (PackageManager.NameNotFoundException e) {
throw new IllegalArgumentException(""Can't find package "" + mObj1, e);
}
break;
default:
throw new IllegalArgumentException(""Icon type not supported for intent shortcuts"");
}
if (badge != null) {
//comment
int w = icon.getWidth();
int h = icon.getHeight();
badge.setBounds(w / 2, h / 2, w, h);
badge.draw(new Canvas(icon));
}
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, icon);
}","@RestrictTo(LIBRARY_GROUP)
@SuppressWarnings(""deprecation"")
public void addToShortcutIntent(@NonNull Intent outIntent, @Nullable Drawable badge,
@NonNull Context c) {
Bitmap icon;
switch (mType) {
case TYPE_BITMAP:
icon = (Bitmap) mObj1;
<start>if (badge != null) {
//comment
icon = icon.copy(icon.getConfig(), true);
}<end>
break;
case TYPE_ADAPTIVE_BITMAP:
icon = createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, true);
break;
case TYPE_RESOURCE:
try {
Context context = c.createPackageContext((String) mObj1, 0);
if (badge == null) {
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
Intent.ShortcutIconResource.fromContext(context, mInt1));
return;
} else {
Drawable dr = ContextCompat.getDrawable(context, mInt1);
if (dr.getIntrinsicWidth() <= 0 || dr.getIntrinsicHeight() <= 0) {
int size = ((ActivityManager) context.getSystemService(
Context.ACTIVITY_SERVICE)).getLauncherLargeIconSize();
icon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
} else {
icon = Bitmap.createBitmap(dr.getIntrinsicWidth(),
dr.getIntrinsicHeight(),
Bitmap.Config.ARGB_8888);
}
dr.setBounds(0, 0, icon.getWidth(), icon.getHeight());
dr.draw(new Canvas(icon));
}
} catch (PackageManager.NameNotFoundException e) {
throw new IllegalArgumentException(""Can't find package "" + mObj1, e);
}
break;
default:
throw new IllegalArgumentException(""Icon type not supported for intent shortcuts"");
}
if (badge != null) {
//comment
int w = icon.getWidth();
int h = icon.getHeight();
badge.setBounds(w / 2, h / 2, w, h);
badge.draw(new Canvas(icon));
}
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, icon);
}"
490,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
<start>final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();<end>

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
<start>final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();<end>

//comment
d.show();
return true;
}"
491,"private CallStatusCode checkIfOkToInitiateOutgoingCall(int state) {
if (VDBG) log(""checkIfOkToInitiateOutgoingCall: ServiceState = "" + state);

switch (state) {
case ServiceState.STATE_IN_SERVICE:
//comment
return CallStatusCode.SUCCESS;

<start>case ServiceState.STATE_POWER_OFF:
//comment
return CallStatusCode.POWER_OFF;<end>

case ServiceState.STATE_EMERGENCY_ONLY:
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
return CallStatusCode.EMERGENCY_ONLY;

case ServiceState.STATE_OUT_OF_SERVICE:
//comment
return CallStatusCode.OUT_OF_SERVICE;

default:
throw new IllegalStateException(""Unexpected ServiceState: "" + state);
}
}","private CallStatusCode checkIfOkToInitiateOutgoingCall(int state) {
if (VDBG) log(""checkIfOkToInitiateOutgoingCall: ServiceState = "" + state);

switch (state) {
case ServiceState.STATE_IN_SERVICE:
//comment
return CallStatusCode.SUCCESS;

case ServiceState.STATE_POWER_OFF:
//comment
<start>return CallStatusCode.POWER_OFF;<end>

case ServiceState.STATE_EMERGENCY_ONLY:
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
return CallStatusCode.EMERGENCY_ONLY;

case ServiceState.STATE_OUT_OF_SERVICE:
//comment
return CallStatusCode.OUT_OF_SERVICE;

default:
throw new IllegalStateException(""Unexpected ServiceState: "" + state);
}
}"
493,"protected void onNewRingingConnection(AsyncResult r) {
Connection c = (Connection) r.result;
log(""onNewRingingConnection(): state = "" + mCM.getState() + "", conn = { "" + c + "" }"");
Call ringing = c.getCall();
Phone phone = ringing.getPhone();

//comment
if (ignoreAllIncomingCalls(phone)) {
//comment
//comment
//comment
//comment
PhoneUtils.hangupRingingCall(ringing);
return;
}

if (!c.isRinging()) {
Log.i(LOG_TAG, ""CallNotifier.onNewRingingConnection(): connection not ringing!"");
//comment
//comment
//comment
//comment
//comment
return;
}

//comment
String number = c.getAddress();
if (TextUtils.isEmpty(number)) {
number = Blacklist.PRIVATE_NUMBER;
}
if (DBG) log(""Incoming number is: "" + number);
//comment
//comment
int listType = mApplication.blackList.isListed(number);
if (listType != Blacklist.MATCH_NONE) {
//comment
if (DBG) log(""Incoming call from "" + number + "" blocked."");
c.setUserData(BLACKLIST);
try {
c.hangup();
mApplication.notificationMgr.notifyBlacklistedCall(number,
c.getCreateTime(), listType);
} catch (CallStateException e) {
e.printStackTrace();
}
return;
}

//comment
<start>stopSignalInfoTone();<end>

Call.State state = c.getState();
//comment
if (VDBG) log(""- connection is ringing!  state = "" + state);
//comment

//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
if (VDBG) log(""Holding wake lock on new incoming connection."");
mApplication.requestWakeState(PhoneGlobals.WakeState.PARTIAL);

//comment
//comment
if (PhoneUtils.isRealIncomingCall(state)) {
startIncomingCallQuery(c);
} else {
if (PhoneUtils.PhoneSettings.vibCallWaiting(mApplication)) {
mApplication.vibrate(200,300,500);
}
if (VDBG) log(""- starting call waiting tone..."");
if (mCallWaitingTonePlayer == null) {
mCallWaitingTonePlayer = new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING);
mCallWaitingTonePlayer.start();
}
//comment
//comment
if (DBG) log(""- showing incoming call (this is a WAITING call)..."");
showIncomingCall();
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

if (VDBG) log(""- onNewRingingConnection() done."");
}","protected void onNewRingingConnection(AsyncResult r) {
Connection c = (Connection) r.result;
log(""onNewRingingConnection(): state = "" + mCM.getState() + "", conn = { "" + c + "" }"");
Call ringing = c.getCall();
Phone phone = ringing.getPhone();

//comment
if (ignoreAllIncomingCalls(phone)) {
//comment
//comment
//comment
//comment
PhoneUtils.hangupRingingCall(ringing);
return;
}

if (!c.isRinging()) {
Log.i(LOG_TAG, ""CallNotifier.onNewRingingConnection(): connection not ringing!"");
//comment
//comment
//comment
//comment
//comment
return;
}

//comment
String number = c.getAddress();
if (TextUtils.isEmpty(number)) {
number = Blacklist.PRIVATE_NUMBER;
}
if (DBG) log(""Incoming number is: "" + number);
//comment
//comment
int listType = mApplication.blackList.isListed(number);
if (listType != Blacklist.MATCH_NONE) {
//comment
if (DBG) log(""Incoming call from "" + number + "" blocked."");
c.setUserData(BLACKLIST);
try {
c.hangup();
mApplication.notificationMgr.notifyBlacklistedCall(number,
c.getCreateTime(), listType);
} catch (CallStateException e) {
e.printStackTrace();
}
return;
}

//comment
<start>stopSignalInfoTone();<end>

Call.State state = c.getState();
//comment
if (VDBG) log(""- connection is ringing!  state = "" + state);
//comment

//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
if (VDBG) log(""Holding wake lock on new incoming connection."");
mApplication.requestWakeState(PhoneGlobals.WakeState.PARTIAL);

//comment
//comment
if (PhoneUtils.isRealIncomingCall(state)) {
startIncomingCallQuery(c);
} else {
if (PhoneUtils.PhoneSettings.vibCallWaiting(mApplication)) {
mApplication.vibrate(200,300,500);
}
if (VDBG) log(""- starting call waiting tone..."");
if (mCallWaitingTonePlayer == null) {
mCallWaitingTonePlayer = new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING);
mCallWaitingTonePlayer.start();
}
//comment
//comment
if (DBG) log(""- showing incoming call (this is a WAITING call)..."");
showIncomingCall();
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

if (VDBG) log(""- onNewRingingConnection() done."");
}"
494,"private void rebuildCache() {
if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""rebuildCache"");
}

HashSet<Long> newDraftSet = new HashSet<Long>();

Cursor cursor = SqliteWrapper.query(
mContext,
mContext.getContentResolver(),
MmsSms.CONTENT_DRAFT_URI,
DRAFT_PROJECTION, null, null, null);

if (cursor != null) {
try {
if (cursor.moveToFirst()) {
for (; !cursor.isAfterLast(); cursor.moveToNext()) {
long threadId = cursor.getLong(COLUMN_DRAFT_THREAD_ID);
newDraftSet.add(threadId);
if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""rebuildCache: add tid="" + threadId);
}
}
}
} finally {
cursor.close();
}
}

Set<Long> added;
Set<Long> removed;
synchronized (mDraftSetLock) {
HashSet<Long> oldDraftSet = mDraftSet;
mDraftSet = newDraftSet;

if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
dump();
}

//comment
//comment
synchronized (mChangeListenersLock) {
if (mChangeListeners.size() < 1) {
return;
}
}

//comment
//comment
<start>added = new HashSet<Long>(newDraftSet);<end>
added.removeAll(oldDraftSet);
removed = new HashSet<Long>(oldDraftSet);
removed.removeAll(newDraftSet);
}

synchronized (mChangeListenersLock) {
for (OnDraftChangedListener l : mChangeListeners) {
for (long threadId : added) {
l.onDraftChanged(threadId, true);
}
for (long threadId : removed) {
l.onDraftChanged(threadId, false);
}
}
}
}","private void rebuildCache() {
if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""rebuildCache"");
}

HashSet<Long> newDraftSet = new HashSet<Long>();

Cursor cursor = SqliteWrapper.query(
mContext,
mContext.getContentResolver(),
MmsSms.CONTENT_DRAFT_URI,
DRAFT_PROJECTION, null, null, null);

if (cursor != null) {
try {
if (cursor.moveToFirst()) {
for (; !cursor.isAfterLast(); cursor.moveToNext()) {
long threadId = cursor.getLong(COLUMN_DRAFT_THREAD_ID);
newDraftSet.add(threadId);
if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""rebuildCache: add tid="" + threadId);
}
}
}
} finally {
cursor.close();
}
}

Set<Long> added;
Set<Long> removed;
synchronized (mDraftSetLock) {
HashSet<Long> oldDraftSet = mDraftSet;
mDraftSet = newDraftSet;

if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
dump();
}

//comment
//comment
synchronized (mChangeListenersLock) {
if (mChangeListeners.size() < 1) {
return;
}
}

//comment
//comment
<start>added = new HashSet<Long>(newDraftSet);
added.removeAll(oldDraftSet);
removed = new HashSet<Long>(oldDraftSet);
removed.removeAll(newDraftSet);<end>
}

synchronized (mChangeListenersLock) {
for (OnDraftChangedListener l : mChangeListeners) {
for (long threadId : added) {
l.onDraftChanged(threadId, true);
}
for (long threadId : removed) {
l.onDraftChanged(threadId, false);
}
}
}
}"
497,"public void initialize(List<List<Entry>> entries, int numInitialVisibleEntries,
boolean isExpanded, boolean isAlwaysExpanded, ExpandingEntryCardViewListener listener,
ViewGroup animationViewGroup) {
LayoutInflater layoutInflater = LayoutInflater.from(getContext());
mIsExpanded = isExpanded;
<start>mIsAlwaysExpanded = isAlwaysExpanded;
//comment
mIsExpanded |= mIsAlwaysExpanded;<end>
mEntryViews = new ArrayList<List<View>>(entries.size());
mEntries = entries;
<start>mNumEntries = 0;<end>
mAllEntriesInflated = false;
for (List<Entry> entryList : mEntries) {
mNumEntries += entryList.size();
mEntryViews.add(new ArrayList<View>());
}
mCollapsedEntriesCount = Math.min(numInitialVisibleEntries, mNumEntries);
//comment
if (entries.size() > 1) {
mSeparators = new ArrayList<>(entries.size() - 1);
}
mListener = listener;
mAnimationViewGroup = animationViewGroup;

if (mIsExpanded) {
updateExpandCollapseButton(getCollapseButtonText(),  0);
inflateAllEntries(layoutInflater);
} else {
updateExpandCollapseButton(getExpandButtonText(),  0);
inflateInitialEntries(layoutInflater);
}
insertEntriesIntoViewGroup();
applyColor();
}","public void initialize(List<List<Entry>> entries, int numInitialVisibleEntries,
boolean isExpanded, boolean isAlwaysExpanded, ExpandingEntryCardViewListener listener,
ViewGroup animationViewGroup) {
LayoutInflater layoutInflater = LayoutInflater.from(getContext());
mIsExpanded = isExpanded;
mIsAlwaysExpanded = isAlwaysExpanded;
//comment
<start>mIsExpanded |= mIsAlwaysExpanded;<end>
mEntryViews = new ArrayList<List<View>>(entries.size());
mEntries = entries;
mNumEntries = 0;
mAllEntriesInflated = false;
for (List<Entry> entryList : mEntries) {
mNumEntries += entryList.size();
mEntryViews.add(new ArrayList<View>());
}
mCollapsedEntriesCount = Math.min(numInitialVisibleEntries, mNumEntries);
//comment
if (entries.size() > 1) {
mSeparators = new ArrayList<>(entries.size() - 1);
}
mListener = listener;
mAnimationViewGroup = animationViewGroup;

if (mIsExpanded) {
updateExpandCollapseButton(getCollapseButtonText(),  0);
inflateAllEntries(layoutInflater);
} else {
updateExpandCollapseButton(getExpandButtonText(),  0);
inflateInitialEntries(layoutInflater);
}
insertEntriesIntoViewGroup();
applyColor();
}"
499,"    private void onReleaseSymbol(final boolean withSliding) {
if (mSymbolKeyState.isChording()) {
//comment
//comment
toggleAlphabetAndSymbols();
} else if (!withSliding) {
//comment
//comment
//comment
mPrevSymbolsKeyboardWasShifted = false;
}
<start>mSymbolKeyState.onRelease();<end>
}","    private void onReleaseSymbol(final boolean withSliding) {
<start>if (mSymbolKeyState.isChording()) {
//comment
//comment
toggleAlphabetAndSymbols();<end>
} else if (!withSliding) {
//comment
//comment
//comment
mPrevSymbolsKeyboardWasShifted = false;
}
mSymbolKeyState.onRelease();
}"
502,"        @Override
public void onClick(View v) {
if (Utils.isMonkeyRunning()) {
return;
}

//comment
if (mSubId != SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
SubscriptionManager mgr = getSubscriptionManager();
//comment
stopMonitorSubscriptionChange(mgr);
if (!isSubscriptionRemainActive(mgr, mSubId)) {
Log.w(TAG, ""subId "" + mSubId + "" disappear when confirm"");
mActivity.finish();
return;
}
}

mProgressDialog = getProgressDialog(mActivity);
mProgressDialog.show();

mResetNetworkTask = new ResetNetworkTask(mActivity);
mResetNetworkTask.execute();
}","        @Override
public void onClick(View v) {
if (Utils.isMonkeyRunning()) {
return;
}

//comment
<start>if (mSubId != SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
SubscriptionManager mgr = getSubscriptionManager();
//comment
stopMonitorSubscriptionChange(mgr);
if (!isSubscriptionRemainActive(mgr, mSubId)) {
Log.w(TAG, ""subId "" + mSubId + "" disappear when confirm"");
mActivity.finish();
return;
}
}<end>

mProgressDialog = getProgressDialog(mActivity);
mProgressDialog.show();

mResetNetworkTask = new ResetNetworkTask(mActivity);
mResetNetworkTask.execute();
}"
503,"        private void buildConstraintsFromXml(JobInfo.Builder jobBuilder, XmlPullParser parser)
throws XmlPullParserException, IOException {
String val;
String netCapabilitiesLong = null;
String netForbiddenCapabilitiesLong = null;
String netTransportTypesLong = null;

final String netCapabilitiesIntArray = parser.getAttributeValue(
null, ""net-capabilities-csv"");
final String netForbiddenCapabilitiesIntArray = parser.getAttributeValue(
null, ""net-forbidden-capabilities-csv"");
final String netTransportTypesIntArray = parser.getAttributeValue(
null, ""net-transport-types-csv"");
if (netCapabilitiesIntArray == null || netTransportTypesIntArray == null) {
netCapabilitiesLong = parser.getAttributeValue(null, ""net-capabilities"");
netForbiddenCapabilitiesLong = parser.getAttributeValue(
null, ""net-unwanted-capabilities"");
netTransportTypesLong = parser.getAttributeValue(null, ""net-transport-types"");
}

if ((netCapabilitiesIntArray != null) && (netTransportTypesIntArray != null)) {
final NetworkRequest.Builder builder = new NetworkRequest.Builder()
.clearCapabilities();

for (int capability : stringToIntArray(netCapabilitiesIntArray)) {
builder.addCapability(capability);
}

for (int forbiddenCapability : stringToIntArray(netForbiddenCapabilitiesIntArray)) {
builder.addForbiddenCapability(forbiddenCapability);
}

for (int transport : stringToIntArray(netTransportTypesIntArray)) {
builder.addTransportType(transport);
}
jobBuilder.setRequiredNetwork(builder.build());
} else if (netCapabilitiesLong != null && netTransportTypesLong != null) {
final NetworkRequest.Builder builder = new NetworkRequest.Builder()
.clearCapabilities();
final int maxNetCapabilityInR = NET_CAPABILITY_TEMPORARILY_NOT_METERED;
//comment
for (int capability : BitUtils.unpackBits(Long.parseLong(
netCapabilitiesLong))) {
if (capability <= maxNetCapabilityInR) {
builder.addCapability(capability);
}
}
for (int forbiddenCapability : BitUtils.unpackBits(Long.parseLong(
netForbiddenCapabilitiesLong))) {
if (forbiddenCapability <= maxNetCapabilityInR) {
builder.addForbiddenCapability(forbiddenCapability);
}
}

final int maxTransportInR = TRANSPORT_TEST;
for (int transport : BitUtils.unpackBits(Long.parseLong(
netTransportTypesLong))) {
if (transport <= maxTransportInR) {
builder.addTransportType(transport);
}
}
jobBuilder.setRequiredNetwork(builder.build());
} else {
//comment
<start>val = parser.getAttributeValue(null, ""connectivity"");
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);
}<end>
val = parser.getAttributeValue(null, ""metered"");
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_METERED);
}
val = parser.getAttributeValue(null, ""unmetered"");
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED);
}
val = parser.getAttributeValue(null, ""not-roaming"");
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_NOT_ROAMING);
}
}

val = parser.getAttributeValue(null, ""idle"");
if (val != null) {
jobBuilder.setRequiresDeviceIdle(true);
}
val = parser.getAttributeValue(null, ""charging"");
if (val != null) {
jobBuilder.setRequiresCharging(true);
}
val = parser.getAttributeValue(null, ""battery-not-low"");
if (val != null) {
jobBuilder.setRequiresBatteryNotLow(true);
}
val = parser.getAttributeValue(null, ""storage-not-low"");
if (val != null) {
jobBuilder.setRequiresStorageNotLow(true);
}
}","        private void buildConstraintsFromXml(JobInfo.Builder jobBuilder, XmlPullParser parser)
throws XmlPullParserException, IOException {
String val;
String netCapabilitiesLong = null;
String netForbiddenCapabilitiesLong = null;
String netTransportTypesLong = null;

final String netCapabilitiesIntArray = parser.getAttributeValue(
null, ""net-capabilities-csv"");
final String netForbiddenCapabilitiesIntArray = parser.getAttributeValue(
null, ""net-forbidden-capabilities-csv"");
final String netTransportTypesIntArray = parser.getAttributeValue(
null, ""net-transport-types-csv"");
if (netCapabilitiesIntArray == null || netTransportTypesIntArray == null) {
netCapabilitiesLong = parser.getAttributeValue(null, ""net-capabilities"");
netForbiddenCapabilitiesLong = parser.getAttributeValue(
null, ""net-unwanted-capabilities"");
netTransportTypesLong = parser.getAttributeValue(null, ""net-transport-types"");
}

if ((netCapabilitiesIntArray != null) && (netTransportTypesIntArray != null)) {
final NetworkRequest.Builder builder = new NetworkRequest.Builder()
.clearCapabilities();

for (int capability : stringToIntArray(netCapabilitiesIntArray)) {
builder.addCapability(capability);
}

for (int forbiddenCapability : stringToIntArray(netForbiddenCapabilitiesIntArray)) {
builder.addForbiddenCapability(forbiddenCapability);
}

for (int transport : stringToIntArray(netTransportTypesIntArray)) {
builder.addTransportType(transport);
}
jobBuilder.setRequiredNetwork(builder.build());
} else if (netCapabilitiesLong != null && netTransportTypesLong != null) {
final NetworkRequest.Builder builder = new NetworkRequest.Builder()
.clearCapabilities();
final int maxNetCapabilityInR = NET_CAPABILITY_TEMPORARILY_NOT_METERED;
//comment
for (int capability : BitUtils.unpackBits(Long.parseLong(
netCapabilitiesLong))) {
if (capability <= maxNetCapabilityInR) {
builder.addCapability(capability);
}
}
for (int forbiddenCapability : BitUtils.unpackBits(Long.parseLong(
netForbiddenCapabilitiesLong))) {
if (forbiddenCapability <= maxNetCapabilityInR) {
builder.addForbiddenCapability(forbiddenCapability);
}
}

final int maxTransportInR = TRANSPORT_TEST;
for (int transport : BitUtils.unpackBits(Long.parseLong(
netTransportTypesLong))) {
if (transport <= maxTransportInR) {
builder.addTransportType(transport);
}
}
jobBuilder.setRequiredNetwork(builder.build());
} else {
//comment
<start>val = parser.getAttributeValue(null, ""connectivity"");<end>
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_ANY);
}
<start>val = parser.getAttributeValue(null, ""metered"");<end>
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_METERED);
}
<start>val = parser.getAttributeValue(null, ""unmetered"");<end>
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_UNMETERED);
}
<start>val = parser.getAttributeValue(null, ""not-roaming"");<end>
if (val != null) {
jobBuilder.setRequiredNetworkType(JobInfo.NETWORK_TYPE_NOT_ROAMING);
}
}

val = parser.getAttributeValue(null, ""idle"");
if (val != null) {
jobBuilder.setRequiresDeviceIdle(true);
}
val = parser.getAttributeValue(null, ""charging"");
if (val != null) {
jobBuilder.setRequiresCharging(true);
}
val = parser.getAttributeValue(null, ""battery-not-low"");
if (val != null) {
jobBuilder.setRequiresBatteryNotLow(true);
}
val = parser.getAttributeValue(null, ""storage-not-low"");
if (val != null) {
jobBuilder.setRequiresStorageNotLow(true);
}
}"
504,"    @Override
protected void onStart() {
super.onStart();
long now = SystemClock.uptimeMillis();
if (mTimerSet <= now) {
//comment
mHandler.sendEmptyMessage(ON_AUTO_SAVE);
} else {
<start>mHandler.sendEmptyMessageAtTime(ON_AUTO_SAVE, mTimerSet);<end>
if (false) {
Log.d(TAG, ""onRestart time = "" + Long.toString(mTimerSet) + "" ""
+ this.toString());
}
}
}","    @Override
protected void onStart() {
super.onStart();
long now = SystemClock.uptimeMillis();
<start>if (mTimerSet <= now) {
//comment
mHandler.sendEmptyMessage(ON_AUTO_SAVE);
} else {<end>
mHandler.sendEmptyMessageAtTime(ON_AUTO_SAVE, mTimerSet);
if (false) {
Log.d(TAG, ""onRestart time = "" + Long.toString(mTimerSet) + "" ""
+ this.toString());
}
}
}"
505,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();<end>
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
<start>mShiftKeyState.onPressOnShifted();<end>
} else {
//comment
setShifted(MANUAL_SHIFT);
<start>mShiftKeyState.onPress();<end>
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
<start>if (mAlphabetShiftState.isShiftLocked()) {<end>
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();<end>
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
506,"    private void onReleaseSymbol(final boolean withSliding) {
if (mSymbolKeyState.isChording()) {
//comment
//comment
toggleAlphabetAndSymbols();
} else if (!withSliding) {
//comment
//comment
//comment
<start>mPrevSymbolsKeyboardWasShifted = false;<end>
}
<start>mSymbolKeyState.onRelease();<end>
}","    private void onReleaseSymbol(final boolean withSliding) {
<start>if (mSymbolKeyState.isChording()) {<end>
//comment
//comment
toggleAlphabetAndSymbols();
<start>} else if (!withSliding) {
//comment
//comment
//comment
mPrevSymbolsKeyboardWasShifted = false;
}<end>
mSymbolKeyState.onRelease();
}"
507,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
<start>if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}<end>

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
<start>if (isPermissionReviewRequired(packageName, permission, context)) {<end>
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}"
508,"public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
<start>int checkedCount = getListView().getCheckedItemCount();<end>
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
if (!checkedItems.get(i)) {
//comment
continue;
}
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}
mode.finish();
break;

case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
lv.setItemChecked(i, true);
}
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}","public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
<start>SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
int checkedCount = getListView().getCheckedItemCount();<end>
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
<start>if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
if (!checkedItems.get(i)) {
//comment
continue;
}
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}<end>
mode.finish();
break;

case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
lv.setItemChecked(i, true);
}
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}"
512,"        @Override
public void onReceive(final Context context, final Intent intent) {
final int callbackTimeout = intent.getIntExtra(EXTRA_CALLBACK_TIMEOUT,
CALLBACK_TIMEOUT);
new Thread(new Runnable() {
@Override
public void run() {
//comment
//comment
//comment
//comment
final AttachmentService service = AttachmentService.sRunningService;
if (service != null) {
//comment
if (service.mStop) {
return;
}
//comment
<start>watchdogAlarm(service, callbackTimeout);<end>
}
}
}, ""AttachmentService AttachmentWatchdog"").start();
}","        @Override
public void onReceive(final Context context, final Intent intent) {
final int callbackTimeout = intent.getIntExtra(EXTRA_CALLBACK_TIMEOUT,
CALLBACK_TIMEOUT);
new Thread(new Runnable() {
@Override
public void run() {
//comment
//comment
//comment
//comment
final AttachmentService service = AttachmentService.sRunningService;
if (service != null) {
//comment
if (service.mStop) {
return;
}
//comment
<start>watchdogAlarm(service, callbackTimeout);<end>
}
}
}, ""AttachmentService AttachmentWatchdog"").start();
}"
515,"<start>boolean startActivityForUrl(Tab tab, String url) {<end>
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
<start>ResolveInfo r = null;<end>
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
<start>return false;<end>
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}","boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
<start>ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}<end>
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}"
516,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

<start>Tab current = mTabControl.getCurrentTab();<end>
//comment
//comment
if (current == null) {
//comment
<start>current = mTabControl.getTab(0);<end>
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

<start>Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}<end>
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
517,"        @Override
public void onQueryComplete(int token, Object cookie, CallerInfo ci) {
if (DBG) log(""callerinfo query complete, updating UI."" + ci);

Connection connection = (Connection) cookie;
int presentation = connection.getNumberPresentation();

//comment
<start>ViewGroup viewGroup = mConferenceCallList[mConferencCallListIndex];<end>
viewGroup.setVisibility(View.VISIBLE);

//comment
displayCallerInfoForConferenceRow(ci, presentation,
(TextView) viewGroup.findViewById(R.id.conferenceCallerName),
(TextView) viewGroup.findViewById(R.id.conferenceCallerNumberType),
(TextView) viewGroup.findViewById(R.id.conferenceCallerNumber));
}","        @Override
public void onQueryComplete(int token, Object cookie, CallerInfo ci) {
if (DBG) log(""callerinfo query complete, updating UI."" + ci);

Connection connection = (Connection) cookie;
int presentation = connection.getNumberPresentation();

//comment
<start>ViewGroup viewGroup = mConferenceCallList[mConferencCallListIndex];
viewGroup.setVisibility(View.VISIBLE);<end>

//comment
displayCallerInfoForConferenceRow(ci, presentation,
(TextView) viewGroup.findViewById(R.id.conferenceCallerName),
(TextView) viewGroup.findViewById(R.id.conferenceCallerNumberType),
(TextView) viewGroup.findViewById(R.id.conferenceCallerNumber));
}"
518,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

<start>textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);<end>

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
<start>textInput.setCounterEnabled(false);<end>

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
519,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
<start>toggleShiftInSymbols();<end>
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
<start>if (mIsAlphabetMode) {<end>
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
<start>} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}<end>
}"
520,"    public void setImageRegion(int left, int top, int width, int height) {
//comment
<start>if (mImageView != null && !mConformanceMode) {
mImageView.setLayoutParams(new LayoutParams(width, height, left, top));
}<end>
}","    public void setImageRegion(int left, int top, int width, int height) {
//comment
<start>if (mImageView != null && !mConformanceMode) {
mImageView.setLayoutParams(new LayoutParams(width, height, left, top));
}<end>
}"
521,"    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
<start>generateBinaryDictionary();
loadBinaryDictionary();<end>
} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}","    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
<start>if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();
} else {<end>
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}"
522,"private boolean allowAppOp(Permission permission, int uid) {
boolean wasChanged = false;

if (permission.isBackgroundPermission()) {
ArrayList<Permission> foregroundPermissions = permission.getForegroundPermissions();

int numForegroundPermissions = foregroundPermissions.size();
<start>for (int i = 0; i < numForegroundPermissions; i++) {
Permission foregroundPermission = foregroundPermissions.get(i);
if (foregroundPermission.isAppOpAllowed()) {
wasChanged |= setAppOpMode(foregroundPermission.getAppOp(), uid, MODE_ALLOWED);
}
}<end>
} else {
if (permission.hasBackgroundPermission()) {
<start>Permission backgroundPermission = permission.getBackgroundPermission();<end>

if (backgroundPermission == null) {
//comment
//comment
//comment
<start>wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_FOREGROUND);<end>
} else {
<start>if (backgroundPermission.isAppOpAllowed()) {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_ALLOWED);
} else {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_FOREGROUND);
}<end>
}
} else {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_ALLOWED);
}
}

return wasChanged;
}","private boolean allowAppOp(Permission permission, int uid) {
boolean wasChanged = false;

if (permission.isBackgroundPermission()) {
ArrayList<Permission> foregroundPermissions = permission.getForegroundPermissions();

int numForegroundPermissions = foregroundPermissions.size();
for (int i = 0; i < numForegroundPermissions; i++) {
Permission foregroundPermission = foregroundPermissions.get(i);
if (foregroundPermission.isAppOpAllowed()) {
wasChanged |= setAppOpMode(foregroundPermission.getAppOp(), uid, MODE_ALLOWED);
}
}
} else {
if (permission.hasBackgroundPermission()) {
Permission backgroundPermission = permission.getBackgroundPermission();

<start>if (backgroundPermission == null) {
//comment
//comment
//comment
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_FOREGROUND);
} else {<end>
if (backgroundPermission.isAppOpAllowed()) {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_ALLOWED);
} else {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_FOREGROUND);
}
}
} else {
wasChanged = setAppOpMode(permission.getAppOp(), uid, MODE_ALLOWED);
}
}

return wasChanged;
}"
523,"    private @NonNull ArrayList<BackupPackageState> parseFromXml(@NonNull XmlPullParser parser)
throws IOException, XmlPullParserException {
ArrayList<BackupPackageState> pkgStates = new ArrayList<>();

skipToTag(parser, TAG_PERMISSION_BACKUP);

int backupPlatformVersion;
try {
backupPlatformVersion = Integer.parseInt(
parser.getAttributeValue(null, ATTR_PLATFORM_VERSION));
} catch (NumberFormatException ignored) {
//comment
backupPlatformVersion = Build.VERSION_CODES.P;
}

skipToTag(parser, TAG_ALL_GRANTS);

if (parser.getEventType() != START_TAG && !parser.getName().equals(TAG_ALL_GRANTS)) {
throw new XmlPullParserException(""Could not find "" + TAG_PERMISSION_BACKUP + "" > ""
+ TAG_ALL_GRANTS);
}

//comment
int type;
do {
type = parser.next();

switch (type) {
case START_TAG:
switch (parser.getName()) {
case TAG_GRANT:
try {
pkgStates.add(BackupPackageState.parseFromXml(parser, mContext,
backupPlatformVersion));
} catch (XmlPullParserException e) {
Log.e(LOG_TAG, ""Could not parse permissions "", e);
skipToEndOfTag(parser);
}
break;
default:
//comment
Log.w(LOG_TAG, ""Found unexpected tag "" + parser.getName()
+ "" during restore"");
skipToEndOfTag(parser);
}
}
} while (type != END_DOCUMENT);

return pkgStates;
}","    private @NonNull ArrayList<BackupPackageState> parseFromXml(@NonNull XmlPullParser parser)
throws IOException, XmlPullParserException {
ArrayList<BackupPackageState> pkgStates = new ArrayList<>();

skipToTag(parser, TAG_PERMISSION_BACKUP);

int backupPlatformVersion;
try {
backupPlatformVersion = Integer.parseInt(
parser.getAttributeValue(null, ATTR_PLATFORM_VERSION));
} catch (NumberFormatException ignored) {
//comment
backupPlatformVersion = Build.VERSION_CODES.P;
}

skipToTag(parser, TAG_ALL_GRANTS);

if (parser.getEventType() != START_TAG && !parser.getName().equals(TAG_ALL_GRANTS)) {
throw new XmlPullParserException(""Could not find "" + TAG_PERMISSION_BACKUP + "" > ""
+ TAG_ALL_GRANTS);
}

//comment
int type;
<start>do {
type = parser.next();

switch (type) {
case START_TAG:
switch (parser.getName()) {
case TAG_GRANT:
try {
pkgStates.add(BackupPackageState.parseFromXml(parser, mContext,
backupPlatformVersion));
} catch (XmlPullParserException e) {
Log.e(LOG_TAG, ""Could not parse permissions "", e);
skipToEndOfTag(parser);
}
break;
default:
//comment
Log.w(LOG_TAG, ""Found unexpected tag "" + parser.getName()
+ "" during restore"");
skipToEndOfTag(parser);
}
}
} while (type != END_DOCUMENT);<end>

return pkgStates;
}"
525,"@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
<start>if (topChild != null) {
//comment
mHeader.setMinimumHeight(topChild.getMeasuredHeight());
}<end>
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
int partitionStart = getPositionForPartition(mIndexedPartition);
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}

//comment
int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;
listView.setFadingHeader(index, listPosition, isLastInSection);
}
}
}","@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
if (topChild != null) {
//comment
<start>mHeader.setMinimumHeight(topChild.getMeasuredHeight());<end>
}
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
int partitionStart = getPositionForPartition(mIndexedPartition);
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}

//comment
int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;
listView.setFadingHeader(index, listPosition, isLastInSection);
}
}
}"
527,"    @VisibleForTesting
boolean shouldWipePersistentDataBlock(PersistentDataBlockManager pdbManager) {
if (pdbManager == null) {
return false;
}
//comment
if (isDeviceStillBeingProvisioned()) {
return false;
}
//comment
//comment
if (isOemUnlockedAllowed()) {
return false;
}
<start>final DevicePolicyManager dpm = (DevicePolicyManager) getActivity()
.getSystemService(Context.DEVICE_POLICY_SERVICE);
//comment
//comment
if (!dpm.isFactoryResetProtectionPolicySupported()) {
return false;
}
//comment
//comment
//comment
FactoryResetProtectionPolicy frpPolicy = dpm.getFactoryResetProtectionPolicy(null);
if (dpm.isOrganizationOwnedDeviceWithManagedProfile() && frpPolicy != null
&& frpPolicy.isNotEmpty()) {
return false;
}<end>
return true;
}","    @VisibleForTesting
boolean shouldWipePersistentDataBlock(PersistentDataBlockManager pdbManager) {
if (pdbManager == null) {
return false;
}
//comment
if (isDeviceStillBeingProvisioned()) {
return false;
}
//comment
//comment
if (isOemUnlockedAllowed()) {
return false;
}
final DevicePolicyManager dpm = (DevicePolicyManager) getActivity()
.getSystemService(Context.DEVICE_POLICY_SERVICE);
//comment
//comment
if (!dpm.isFactoryResetProtectionPolicySupported()) {
return false;
}
//comment
//comment
//comment
<start>FactoryResetProtectionPolicy frpPolicy = dpm.getFactoryResetProtectionPolicy(null);
if (dpm.isOrganizationOwnedDeviceWithManagedProfile() && frpPolicy != null
&& frpPolicy.isNotEmpty()) {
return false;
}<end>
return true;
}"
528,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
<start>if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {<end>
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
530,"    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

mList = getListView();
mAddSlideItem = createAddSlideItem();
mList.addFooterView(mAddSlideItem);
mAddSlideItem.setVisibility(View.GONE);

if (icicle != null) {
//comment
mState = icicle.getBundle(STATE);
}

if (mState != null) {
mUri = Uri.parse(mState.getString(MESSAGE_URI));
} else {
mUri = getIntent().getData();
}

if (mUri == null) {
Log.e(TAG, ""Cannot startup activity, null Uri."");
finish();
return;
}

//comment
<start>mResultIntent = new Intent();<end>
mResultIntent.setData(mUri);

try {
initSlideList();
adjustAddSlideVisibility();
} catch (MmsException e) {
Log.e(TAG, ""Failed to initialize the slide-list."", e);
finish();
}

registerForContextMenu(mList);
}","    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

mList = getListView();
mAddSlideItem = createAddSlideItem();
mList.addFooterView(mAddSlideItem);
mAddSlideItem.setVisibility(View.GONE);

if (icicle != null) {
//comment
mState = icicle.getBundle(STATE);
}

if (mState != null) {
mUri = Uri.parse(mState.getString(MESSAGE_URI));
} else {
mUri = getIntent().getData();
}

if (mUri == null) {
Log.e(TAG, ""Cannot startup activity, null Uri."");
finish();
return;
}

//comment
<start>mResultIntent = new Intent();
mResultIntent.setData(mUri);<end>

try {
initSlideList();
adjustAddSlideVisibility();
} catch (MmsException e) {
Log.e(TAG, ""Failed to initialize the slide-list."", e);
finish();
}

registerForContextMenu(mList);
}"
535,"public boolean addRequest(final DownloadRequest request)
throws NullPointerException {
//comment
if (request == null) {
//comment
//comment
throw new NullPointerException();
}
final long requestId = request.mAttachmentId;
if (requestId < 0) {
//comment
LogUtils.d(LOG_TAG, ""Not adding a DownloadRequest with an invalid attachment id"");
return false;
}
debugTrace(""Queuing DownloadRequest #%d"", requestId);
<start>synchronized (mLock) {
//comment
final boolean exists = mRequestMap.containsKey(requestId);
if (!exists) {
mRequestQueue.offer(request);
mRequestMap.put(requestId, request);
} else {
debugTrace(""DownloadRequest #%d was already in the queue"");
}<end>
}
return true;
}","public boolean addRequest(final DownloadRequest request)
throws NullPointerException {
//comment
if (request == null) {
//comment
//comment
throw new NullPointerException();
}
final long requestId = request.mAttachmentId;
if (requestId < 0) {
//comment
LogUtils.d(LOG_TAG, ""Not adding a DownloadRequest with an invalid attachment id"");
return false;
}
debugTrace(""Queuing DownloadRequest #%d"", requestId);
synchronized (mLock) {
//comment
<start>final boolean exists = mRequestMap.containsKey(requestId);
if (!exists) {<end>
mRequestQueue.offer(request);
mRequestMap.put(requestId, request);
} else {
debugTrace(""DownloadRequest #%d was already in the queue"");
}
}
return true;
}"
537,"<start>    private Uri storeMessage(SmsMessage sms) {
//comment
ContentValues values = extractContentValues(sms);<end>
values.put(Inbox.BODY, sms.getDisplayMessageBody());
ContentResolver resolver = getContentResolver();
if (false) {
Log.d(TAG, ""storeMessage "" + this.toString());
}
return SqliteWrapper.insert(this, resolver, Inbox.CONTENT_URI, values);
}","    private Uri storeMessage(SmsMessage sms) {
//comment
<start>ContentValues values = extractContentValues(sms);
values.put(Inbox.BODY, sms.getDisplayMessageBody());<end>
ContentResolver resolver = getContentResolver();
if (false) {
Log.d(TAG, ""storeMessage "" + this.toString());
}
return SqliteWrapper.insert(this, resolver, Inbox.CONTENT_URI, values);
}"
540,"    public synchronized void sendFirstQueuedMessage() {
boolean success = true;
//comment
final Uri uri = Uri.parse(""content://sms/queued"");
ContentResolver resolver = getContentResolver();
Cursor c = SqliteWrapper.query(this, resolver, uri,
SEND_PROJECTION, null, null, ""date ASC"");
//comment
//comment
if (c != null) {
try {
if (c.moveToFirst()) {
String msgText = c.getString(SEND_COLUMN_BODY);
String address = c.getString(SEND_COLUMN_ADDRESS);
int threadId = c.getInt(SEND_COLUMN_THREAD_ID);
int status = c.getInt(SEND_COLUMN_STATUS);

int msgId = c.getInt(SEND_COLUMN_ID);
Uri msgUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);

SmsMessageSender sender = new SmsSingleRecipientSender(this,
address, msgText, threadId, status == Sms.STATUS_PENDING,
msgUri);

if (LogTag.DEBUG_SEND ||
LogTag.VERBOSE ||
Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""sendFirstQueuedMessage "" + msgUri +
"", address: "" + address +
"", threadId: "" + threadId);
}

try {
sender.sendMessage(SendingProgressTokenManager.NO_TOKEN);;
mSending = true;
} catch (MmsException e) {
Log.e(TAG, ""sendFirstQueuedMessage: failed to send message "" + msgUri
+ "", caught "", e);
mSending = false;
messageFailedToSend(msgUri, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
success = false;
//comment
//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_MESSAGE,
null,
this,
SmsReceiver.class));
}
}
} finally {
c.close();
}
}
<start>if (success) {
//comment
//comment
unRegisterForServiceStateChanges();
}<end>
}","    public synchronized void sendFirstQueuedMessage() {
boolean success = true;
//comment
final Uri uri = Uri.parse(""content://sms/queued"");
ContentResolver resolver = getContentResolver();
Cursor c = SqliteWrapper.query(this, resolver, uri,
SEND_PROJECTION, null, null, ""date ASC"");
//comment
//comment
if (c != null) {
try {
if (c.moveToFirst()) {
String msgText = c.getString(SEND_COLUMN_BODY);
String address = c.getString(SEND_COLUMN_ADDRESS);
int threadId = c.getInt(SEND_COLUMN_THREAD_ID);
int status = c.getInt(SEND_COLUMN_STATUS);

int msgId = c.getInt(SEND_COLUMN_ID);
Uri msgUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);

SmsMessageSender sender = new SmsSingleRecipientSender(this,
address, msgText, threadId, status == Sms.STATUS_PENDING,
msgUri);

if (LogTag.DEBUG_SEND ||
LogTag.VERBOSE ||
Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""sendFirstQueuedMessage "" + msgUri +
"", address: "" + address +
"", threadId: "" + threadId);
}

try {
sender.sendMessage(SendingProgressTokenManager.NO_TOKEN);;
mSending = true;
} catch (MmsException e) {
Log.e(TAG, ""sendFirstQueuedMessage: failed to send message "" + msgUri
+ "", caught "", e);
mSending = false;
messageFailedToSend(msgUri, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
success = false;
//comment
//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_MESSAGE,
null,
this,
SmsReceiver.class));
}
}
} finally {
c.close();
}
}
<start>if (success) {
//comment
//comment
unRegisterForServiceStateChanges();
}<end>
}"
543,"    private synchronized void close(final Runnable onClosed) {
mExecutor.submit(new Callable<Object>() {
@Override
public Object call() throws Exception {
try {
if (mJsonWriter == null) return null;
//comment
//comment
//comment
if (!mHasWrittenData) {
mJsonWriter.beginArray();
}
mJsonWriter.endArray();
mHasWrittenData = false;
mJsonWriter.flush();
mJsonWriter.close();
if (DEBUG) {
Log.d(TAG, ""closed "" + mFile);
}
} catch (final Exception e) {
Log.d(TAG, ""error when closing ResearchLog:"", e);
} finally {
//comment
//comment
<start>if (mFile != null && mFile.exists()) {
mFile.setWritable(false, false);
}<end>
if (onClosed != null) {
onClosed.run();
}
}
return null;
}
});
removeAnyScheduledFlush();
mExecutor.shutdown();
}","    private synchronized void close(final Runnable onClosed) {
mExecutor.submit(new Callable<Object>() {
@Override
public Object call() throws Exception {
try {
if (mJsonWriter == null) return null;
//comment
//comment
//comment
if (!mHasWrittenData) {
mJsonWriter.beginArray();
}
mJsonWriter.endArray();
mHasWrittenData = false;
mJsonWriter.flush();
mJsonWriter.close();
if (DEBUG) {
Log.d(TAG, ""closed "" + mFile);
}
} catch (final Exception e) {
Log.d(TAG, ""error when closing ResearchLog:"", e);
} finally {
//comment
//comment
<start>if (mFile != null && mFile.exists()) {
mFile.setWritable(false, false);
}<end>
if (onClosed != null) {
onClosed.run();
}
}
return null;
}
});
removeAnyScheduledFlush();
mExecutor.shutdown();
}"
545,"private void confirmPermissionsReview() {
final List<PreferenceGroup> preferenceGroups = new ArrayList<>();
if (mNewPermissionsCategory != null) {
preferenceGroups.add(mNewPermissionsCategory);
preferenceGroups.add(mCurrentPermissionsCategory);
} else {
PreferenceScreen preferenceScreen = getPreferenceScreen();
if (preferenceScreen != null) {
preferenceGroups.add(preferenceScreen);
}
}

final int preferenceGroupCount = preferenceGroups.size();
long changeIdForLogging = new Random().nextLong();

for (int groupNum = 0; groupNum < preferenceGroupCount; groupNum++) {
final PreferenceGroup preferenceGroup = preferenceGroups.get(groupNum);

final int preferenceCount = preferenceGroup.getPreferenceCount();
for (int prefNum = 0; prefNum < preferenceCount; prefNum++) {
Preference preference = preferenceGroup.getPreference(prefNum);
if (preference instanceof PermissionReviewPreference) {
PermissionReviewPreference permPreference =
(PermissionReviewPreference) preference;
AppPermissionGroup group = permPreference.getGroup();

//comment
if (group.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(group);
}
logReviewPermissionsFragmentResult(changeIdForLogging, group);

AppPermissionGroup backgroundGroup = group.getBackgroundPermissions();
if (backgroundGroup != null) {
//comment
<start>if (backgroundGroup.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(backgroundGroup);
}
logReviewPermissionsFragmentResult(changeIdForLogging, backgroundGroup);<end>
}
}
}
}
mAppPermissions.persistChanges(true);

//comment
//comment
PackageManager pm = getContext().getPackageManager();
PackageInfo pkg = mAppPermissions.getPackageInfo();
UserHandle user = UserHandle.getUserHandleForUid(pkg.applicationInfo.uid);

for (String perm : pkg.requestedPermissions) {
try {
pm.updatePermissionFlags(perm, pkg.packageName, FLAG_PERMISSION_REVIEW_REQUIRED,
0, user);
} catch (IllegalArgumentException e) {
Log.e(LOG_TAG, ""Cannot unmark "" + perm + "" requested by "" + pkg.packageName
+ "" as review required"", e);
}
}
}","private void confirmPermissionsReview() {
final List<PreferenceGroup> preferenceGroups = new ArrayList<>();
if (mNewPermissionsCategory != null) {
preferenceGroups.add(mNewPermissionsCategory);
preferenceGroups.add(mCurrentPermissionsCategory);
} else {
PreferenceScreen preferenceScreen = getPreferenceScreen();
if (preferenceScreen != null) {
preferenceGroups.add(preferenceScreen);
}
}

final int preferenceGroupCount = preferenceGroups.size();
long changeIdForLogging = new Random().nextLong();

for (int groupNum = 0; groupNum < preferenceGroupCount; groupNum++) {
final PreferenceGroup preferenceGroup = preferenceGroups.get(groupNum);

final int preferenceCount = preferenceGroup.getPreferenceCount();
for (int prefNum = 0; prefNum < preferenceCount; prefNum++) {
Preference preference = preferenceGroup.getPreference(prefNum);
if (preference instanceof PermissionReviewPreference) {
PermissionReviewPreference permPreference =
(PermissionReviewPreference) preference;
AppPermissionGroup group = permPreference.getGroup();

//comment
if (group.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(group);
}
logReviewPermissionsFragmentResult(changeIdForLogging, group);

AppPermissionGroup backgroundGroup = group.getBackgroundPermissions();
if (backgroundGroup != null) {
//comment
<start>if (backgroundGroup.isReviewRequired() && !permPreference.wasChanged()) {
grantReviewedPermission(backgroundGroup);
}<end>
logReviewPermissionsFragmentResult(changeIdForLogging, backgroundGroup);
}
}
}
}
mAppPermissions.persistChanges(true);

//comment
//comment
PackageManager pm = getContext().getPackageManager();
PackageInfo pkg = mAppPermissions.getPackageInfo();
UserHandle user = UserHandle.getUserHandleForUid(pkg.applicationInfo.uid);

for (String perm : pkg.requestedPermissions) {
try {
pm.updatePermissionFlags(perm, pkg.packageName, FLAG_PERMISSION_REVIEW_REQUIRED,
0, user);
} catch (IllegalArgumentException e) {
Log.e(LOG_TAG, ""Cannot unmark "" + perm + "" requested by "" + pkg.packageName
+ "" as review required"", e);
}
}
}"
546,"public void notifyMyObservers(Uri uri, int index, ContentObserver observer,
boolean selfNotify) {
String segment = null;
int segmentCount = countUriSegments(uri);
if (index >= segmentCount) {
//comment
<start>notifyMyObservers(true, observer, selfNotify);
} else if (index < segmentCount){<end>
segment = getUriSegment(uri, index);
//comment
<start>notifyMyObservers(false, observer, selfNotify);<end>
}

int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (segment == null || node.mName.equals(segment)) {
//comment
node.notifyMyObservers(uri, index + 1, observer, selfNotify);
if (segment != null) {
break;
}
}
}
}","public void notifyMyObservers(Uri uri, int index, ContentObserver observer,
boolean selfNotify) {
String segment = null;
<start>int segmentCount = countUriSegments(uri);
if (index >= segmentCount) {
//comment
notifyMyObservers(true, observer, selfNotify);
} else if (index < segmentCount){<end>
segment = getUriSegment(uri, index);
//comment
notifyMyObservers(false, observer, selfNotify);
}

int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (segment == null || node.mName.equals(segment)) {
//comment
node.notifyMyObservers(uri, index + 1, observer, selfNotify);
if (segment != null) {
break;
}
}
}
}"
547,"    @Override
public void changeCursor(int partitionIndex, Cursor cursor) {
<start>if (partitionIndex >= getPartitionCount()) {
//comment
return;
}<end>

Partition partition = getPartition(partitionIndex);
if (partition instanceof DirectoryPartition) {
((DirectoryPartition)partition).setStatus(DirectoryPartition.STATUS_LOADED);
}

if (mDisplayPhotos && mPhotoLoader != null && isPhotoSupported(partitionIndex)) {
mPhotoLoader.refreshCache();
}

super.changeCursor(partitionIndex, cursor);

if (isSectionHeaderDisplayEnabled() && partitionIndex == getIndexedPartition()) {
updateIndexer(cursor);
}

//comment
mPhotoLoader.cancelPendingRequests(mFragmentRootView);
}","    @Override
public void changeCursor(int partitionIndex, Cursor cursor) {
<start>if (partitionIndex >= getPartitionCount()) {
//comment
return;
}<end>

Partition partition = getPartition(partitionIndex);
if (partition instanceof DirectoryPartition) {
((DirectoryPartition)partition).setStatus(DirectoryPartition.STATUS_LOADED);
}

if (mDisplayPhotos && mPhotoLoader != null && isPhotoSupported(partitionIndex)) {
mPhotoLoader.refreshCache();
}

super.changeCursor(partitionIndex, cursor);

if (isSectionHeaderDisplayEnabled() && partitionIndex == getIndexedPartition()) {
updateIndexer(cursor);
}

//comment
mPhotoLoader.cancelPendingRequests(mFragmentRootView);
}"
548,"private List<View> getViewsToDisplay(boolean isExpanded) {
final List<View> viewsToDisplay = new ArrayList<View>();
if (isExpanded) {
for (int i = 0; i < mEntryViews.size(); i++) {
List<View> viewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(viewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
for (View view : viewList) {
viewsToDisplay.add(view);
}
}
} else {
//comment
//comment
//comment
int numInViewGroup = 0;
int extraEntries = mCollapsedEntriesCount - mEntryViews.size();
for (int i = 0; i < mEntryViews.size() && numInViewGroup < mCollapsedEntriesCount;
<start>i++) {<end>
List<View> entryViewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(entryViewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
viewsToDisplay.add(entryViewList.get(0));
numInViewGroup++;

//comment
for (int j = 1; j < entryViewList.size() && numInViewGroup < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
viewsToDisplay.add(entryViewList.get(j));
numInViewGroup++;
extraEntries--;
}
}
}

formatEntryIfFirst(viewsToDisplay);
return viewsToDisplay;
}","private List<View> getViewsToDisplay(boolean isExpanded) {
final List<View> viewsToDisplay = new ArrayList<View>();
if (isExpanded) {
for (int i = 0; i < mEntryViews.size(); i++) {
List<View> viewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(viewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
for (View view : viewList) {
viewsToDisplay.add(view);
}
}
} else {
//comment
//comment
//comment
int numInViewGroup = 0;
int extraEntries = mCollapsedEntriesCount - mEntryViews.size();
for (int i = 0; i < mEntryViews.size() && numInViewGroup < mCollapsedEntriesCount;
i++) {
List<View> entryViewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(entryViewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
viewsToDisplay.add(entryViewList.get(0));
numInViewGroup++;

//comment
<start>for (int j = 1; j < entryViewList.size() && numInViewGroup < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
viewsToDisplay.add(entryViewList.get(j));
numInViewGroup++;
extraEntries--;
}<end>
}
}

formatEntryIfFirst(viewsToDisplay);
return viewsToDisplay;
}"
552,"<start>        public void visitPlainCstInsn(PlainCstInsn insn) {<end>
SourcePosition pos = insn.getPosition();
Dop opcode = RopToDop.dopFor(insn);
Rop rop = insn.getOpcode();
int ropOpcode = rop.getOpcode();
DalvInsn di;

if (rop.getBranchingness() != Rop.BRANCH_NONE) {
throw new RuntimeException(""shouldn't happen"");
}

if (ropOpcode == RegOps.MOVE_PARAM) {
if (!paramsAreInOrder) {
//comment
//comment
//comment
//comment

RegisterSpec dest = insn.getResult();
int param =
((CstInteger) insn.getConstant()).getValue();
RegisterSpec source =
RegisterSpec.make(regCount - paramSize + param,
dest.getType());
di = new SimpleInsn(opcode, pos,
RegisterSpecList.make(dest, source));
addOutput(di);
}
} else {
//comment
RegisterSpecList regs = getRegs(insn);
di = new CstInsn(opcode, pos, regs, insn.getConstant());
addOutput(di);
}
}","        public void visitPlainCstInsn(PlainCstInsn insn) {
SourcePosition pos = insn.getPosition();
Dop opcode = RopToDop.dopFor(insn);
Rop rop = insn.getOpcode();
int ropOpcode = rop.getOpcode();
DalvInsn di;

if (rop.getBranchingness() != Rop.BRANCH_NONE) {
throw new RuntimeException(""shouldn't happen"");
}

if (ropOpcode == RegOps.MOVE_PARAM) {
<start>if (!paramsAreInOrder) {<end>
//comment
//comment
//comment
//comment

<start>RegisterSpec dest = insn.getResult();
int param =
((CstInteger) insn.getConstant()).getValue();
RegisterSpec source =
RegisterSpec.make(regCount - paramSize + param,
dest.getType());
di = new SimpleInsn(opcode, pos,
RegisterSpecList.make(dest, source));
addOutput(di);
}<end>
} else {
//comment
RegisterSpecList regs = getRegs(insn);
di = new CstInsn(opcode, pos, regs, insn.getConstant());
addOutput(di);
}
}"
560,"    static boolean hangupRingingAndActive(Phone phone) {
boolean hungUpRingingCall = false;
boolean hungUpFgCall = false;
CallManager cm = PhoneGlobals.getInstance().mCM;
Call ringingCall = cm.getFirstActiveRingingCall();
<start>Call fgCall = cm.getActiveFgCall();<end>

//comment
if (!ringingCall.isIdle()) {
<start>log(""hangupRingingAndActive: Hang up Ringing Call"");
hungUpRingingCall = hangupRingingCall(ringingCall);<end>
}

//comment
if (!fgCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Foreground Call"");
hungUpFgCall = hangupActiveCall(fgCall);
}

return hungUpRingingCall || hungUpFgCall;
}","    static boolean hangupRingingAndActive(Phone phone) {
boolean hungUpRingingCall = false;
boolean hungUpFgCall = false;
CallManager cm = PhoneGlobals.getInstance().mCM;
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();

//comment
if (!ringingCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Ringing Call"");
<start>hungUpRingingCall = hangupRingingCall(ringingCall);<end>
}

//comment
if (!fgCall.isIdle()) {
log(""hangupRingingAndActive: Hang up Foreground Call"");
hungUpFgCall = hangupActiveCall(fgCall);
}

return hungUpRingingCall || hungUpFgCall;
}"
561,"public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
<start>newOriginQuota += quotaIncrease;<end>

<start>if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}<end>
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}","public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;

<start>if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}<end>
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}"
563,"public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
int checkedCount = getListView().getCheckedItemCount();
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
if (!checkedItems.get(i)) {
//comment
continue;
}
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}
mode.finish();
break;

case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
<start>lv.setItemChecked(i, true);<end>
}
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}","public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
int checkedCount = getListView().getCheckedItemCount();
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
if (!checkedItems.get(i)) {
//comment
continue;
}
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}
mode.finish();
break;

<start>case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
lv.setItemChecked(i, true);
}<end>
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}"
565,"    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
<start>final Bundle accountExtras = account.getExtras();<end>
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}","    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
<start>final Bundle accountExtras = account.getExtras();
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);<end>
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}"
566,"@Override
public boolean onPreferenceStartFragment(PreferenceFragment caller, Preference pref) {
//comment
<start>int titleRes = pref.getTitleRes();<end>

startPreferencePanel(pref.getFragment(), pref.getExtras(), titleRes, null, null, 0);
return true;
}","@Override
public boolean onPreferenceStartFragment(PreferenceFragment caller, Preference pref) {
//comment
<start>int titleRes = pref.getTitleRes();<end>

startPreferencePanel(pref.getFragment(), pref.getExtras(), titleRes, null, null, 0);
return true;
}"
567,"String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {
//comment
ImapResponse response = readResponse();
//comment
<start>if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}<end>
}
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}","String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {
//comment
ImapResponse response = readResponse();
//comment
<start>if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}<end>
}
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}"
569,"private List<RestrictedPreference> getInstalledAccessibilityList(Context context) {
final AccessibilityManager a11yManager = AccessibilityManager.getInstance(context);
final RestrictedPreferenceHelper preferenceHelper = new RestrictedPreferenceHelper(context);

final List<AccessibilityShortcutInfo> installedShortcutList =
a11yManager.getInstalledAccessibilityShortcutListAsUser(context,
UserHandle.myUserId());

//comment
//comment
<start>final List<AccessibilityServiceInfo> installedServiceList = new ArrayList<>(
a11yManager.getInstalledAccessibilityServiceList());
installedServiceList.removeIf(
target -> containsTargetNameInList(installedShortcutList, target));<end>

final List<RestrictedPreference> activityList =
preferenceHelper.createAccessibilityActivityPreferenceList(installedShortcutList);

final List<RestrictedPreference> serviceList =
preferenceHelper.createAccessibilityServicePreferenceList(installedServiceList);

final List<RestrictedPreference> preferenceList = new ArrayList<>();
preferenceList.addAll(activityList);
preferenceList.addAll(serviceList);

return preferenceList;
}","private List<RestrictedPreference> getInstalledAccessibilityList(Context context) {
final AccessibilityManager a11yManager = AccessibilityManager.getInstance(context);
final RestrictedPreferenceHelper preferenceHelper = new RestrictedPreferenceHelper(context);

final List<AccessibilityShortcutInfo> installedShortcutList =
a11yManager.getInstalledAccessibilityShortcutListAsUser(context,
UserHandle.myUserId());

//comment
//comment
<start>final List<AccessibilityServiceInfo> installedServiceList = new ArrayList<>(
a11yManager.getInstalledAccessibilityServiceList());
installedServiceList.removeIf(
target -> containsTargetNameInList(installedShortcutList, target));<end>

final List<RestrictedPreference> activityList =
preferenceHelper.createAccessibilityActivityPreferenceList(installedShortcutList);

final List<RestrictedPreference> serviceList =
preferenceHelper.createAccessibilityServicePreferenceList(installedServiceList);

final List<RestrictedPreference> preferenceList = new ArrayList<>();
preferenceList.addAll(activityList);
preferenceList.addAll(serviceList);

return preferenceList;
}"
570,"    @Override
public void onDestroy() {
super.onDestroy();
unregisterReceiver(mEcmExitReceiver);
//comment
<start>mPhone.unregisterForEcmTimerReset(mTimerResetHandler);<end>
}","    @Override
public void onDestroy() {
super.onDestroy();
unregisterReceiver(mEcmExitReceiver);
//comment
<start>mPhone.unregisterForEcmTimerReset(mTimerResetHandler);<end>
}"
572,"    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
if (mShowNav) {
detachTab(mActiveTab);
}

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
<start>Log.e(LOGTAG, ""active tab with no webview detected"");<end>
return;
}
//comment
if (mUseQuickControls) {
<start>mPieControl.forceToTop(mContentView);<end>
view.setTitleBar(null);
mTitleBar.setShowProgressOnly(true);
} else {
view.setTitleBar(mTitleBar);
}
//comment
mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}","    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
if (mShowNav) {
detachTab(mActiveTab);
}

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
Log.e(LOGTAG, ""active tab with no webview detected"");
return;
}
//comment
<start>if (mUseQuickControls) {
mPieControl.forceToTop(mContentView);
view.setTitleBar(null);
mTitleBar.setShowProgressOnly(true);
} else {
view.setTitleBar(mTitleBar);
}<end>
//comment
mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}"
575,"public void insert(long key, byte[] data) throws IOException {
if (DATA_HEADER_SIZE + BLOB_HEADER_SIZE + data.length > mMaxBytes) {
throw new RuntimeException(""blob is too large!"");
}

if (mActiveBytes + BLOB_HEADER_SIZE + data.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
flipRegion();
}

if (!lookupInternal(key, mActiveHashStart)) {
//comment
//comment
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
}

insertInternal(key, data, data.length);
updateIndexHeader();
}","public void insert(long key, byte[] data) throws IOException {
if (DATA_HEADER_SIZE + BLOB_HEADER_SIZE + data.length > mMaxBytes) {
throw new RuntimeException(""blob is too large!"");
}

if (mActiveBytes + BLOB_HEADER_SIZE + data.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
flipRegion();
}

<start>if (!lookupInternal(key, mActiveHashStart)) {
//comment
//comment
mActiveEntries++;<end>
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
<start>}<end>

insertInternal(key, data, data.length);
updateIndexHeader();
}"
576,"private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
<start>mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);<end>
}
}","private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
<start>mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);<end>
}
}"
578,"public void commitCompletion(final CompletionInfo completionInfo) {
if (DEBUG_BATCH_NESTING) checkBatchEdit();
if (DEBUG_PREVIOUS_TEXT) checkConsistencyForDebug();
<start>CharSequence text = completionInfo.getText();
//comment
if (null == text) text = """";
mCommittedTextBeforeComposingText.append(text);<end>
mCurrentCursorPosition += text.length() - mComposingText.length();
mComposingText.setLength(0);
if (null != mIC) {
mIC.commitCompletion(completionInfo);
if (ProductionFlag.USES_DEVELOPMENT_ONLY_DIAGNOSTICS) {
ResearchLogger.richInputConnection_commitCompletion(completionInfo);
}
}
if (DEBUG_PREVIOUS_TEXT) checkConsistencyForDebug();
}","public void commitCompletion(final CompletionInfo completionInfo) {
if (DEBUG_BATCH_NESTING) checkBatchEdit();
if (DEBUG_PREVIOUS_TEXT) checkConsistencyForDebug();
CharSequence text = completionInfo.getText();
//comment
<start>if (null == text) text = """";<end>
mCommittedTextBeforeComposingText.append(text);
mCurrentCursorPosition += text.length() - mComposingText.length();
mComposingText.setLength(0);
if (null != mIC) {
mIC.commitCompletion(completionInfo);
if (ProductionFlag.USES_DEVELOPMENT_ONLY_DIAGNOSTICS) {
ResearchLogger.richInputConnection_commitCompletion(completionInfo);
}
}
if (DEBUG_PREVIOUS_TEXT) checkConsistencyForDebug();
}"
580,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate - mIsResponseSent["" + mIsResponseSent + ""]"");

//comment
//comment
if (appService == null) {
<start>CatLog.d(LOG_TAG, ""onCreate - appService is null"");<end>
finish();
return;
}

//comment
setContentView(R.layout.stk_input);
setSupportActionBar((Toolbar) findViewById(R.id.toolbar));

if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) {
getSupportActionBar().hide();

mMoreOptions = findViewById(R.id.more);
mMoreOptions.setVisibility(View.VISIBLE);
mMoreOptions.setOnClickListener(this);
}

//comment
mTextIn = (EditText) this.findViewById(R.id.in_text);
mPromptView = (TextView) this.findViewById(R.id.prompt);
//comment
Button okButton = (Button) findViewById(R.id.button_ok);
Button cancelButton = (Button) findViewById(R.id.button_cancel);
Button yesButton = (Button) findViewById(R.id.button_yes);
Button noButton = (Button) findViewById(R.id.button_no);

okButton.setOnClickListener(this);
cancelButton.setOnClickListener(this);
yesButton.setOnClickListener(this);
noButton.setOnClickListener(this);

mYesNoLayout = findViewById(R.id.yes_no_layout);
mNormalLayout = findViewById(R.id.normal_layout);
initFromIntent(getIntent());
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate - mIsResponseSent["" + mIsResponseSent + ""]"");

//comment
//comment
<start>if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}<end>

//comment
setContentView(R.layout.stk_input);
setSupportActionBar((Toolbar) findViewById(R.id.toolbar));

if (getResources().getBoolean(R.bool.show_menu_title_only_on_menu)) {
getSupportActionBar().hide();

mMoreOptions = findViewById(R.id.more);
mMoreOptions.setVisibility(View.VISIBLE);
mMoreOptions.setOnClickListener(this);
}

//comment
mTextIn = (EditText) this.findViewById(R.id.in_text);
mPromptView = (TextView) this.findViewById(R.id.prompt);
//comment
Button okButton = (Button) findViewById(R.id.button_ok);
Button cancelButton = (Button) findViewById(R.id.button_cancel);
Button yesButton = (Button) findViewById(R.id.button_yes);
Button noButton = (Button) findViewById(R.id.button_no);

okButton.setOnClickListener(this);
cancelButton.setOnClickListener(this);
yesButton.setOnClickListener(this);
noButton.setOnClickListener(this);

mYesNoLayout = findViewById(R.id.yes_no_layout);
mNormalLayout = findViewById(R.id.normal_layout);
initFromIntent(getIntent());
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}"
582,"    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
<start>filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);<end>
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
<start>mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);<end>

//comment
updateAndReportActiveLocked();
}","    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
<start>mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);<end>

//comment
updateAndReportActiveLocked();
}"
584,"public static void configureStarredMenuItem(MenuItem starredMenuItem, boolean isDirectoryEntry,
boolean isUserProfile, boolean isStarred) {
//comment
if (!isDirectoryEntry && !isUserProfile) {
starredMenuItem.setVisible(true);
<start>final int resId = isStarred
? R.drawable.quantum_ic_star_vd_theme_24
: R.drawable.quantum_ic_star_border_vd_theme_24;<end>
starredMenuItem.setIcon(resId);
starredMenuItem.setChecked(isStarred);
starredMenuItem.setTitle(isStarred ? R.string.menu_removeStar : R.string.menu_addStar);
} else {
starredMenuItem.setVisible(false);
}
}","public static void configureStarredMenuItem(MenuItem starredMenuItem, boolean isDirectoryEntry,
boolean isUserProfile, boolean isStarred) {
//comment
<start>if (!isDirectoryEntry && !isUserProfile) {
starredMenuItem.setVisible(true);
final int resId = isStarred
? R.drawable.quantum_ic_star_vd_theme_24
: R.drawable.quantum_ic_star_border_vd_theme_24;
starredMenuItem.setIcon(resId);
starredMenuItem.setChecked(isStarred);
starredMenuItem.setTitle(isStarred ? R.string.menu_removeStar : R.string.menu_addStar);
} else {
starredMenuItem.setVisible(false);
}<end>
}"
585,"        private Pair<Long, Long> buildRtcExecutionTimesFromXml(XmlPullParser parser)
throws NumberFormatException {
String val;
//comment
val = parser.getAttributeValue(null, ""delay"");
final long earliestRunTimeRtc = (val != null)
? Long.parseLong(val)
: JobStatus.NO_EARLIEST_RUNTIME;
val = parser.getAttributeValue(null, ""deadline"");
final long latestRunTimeRtc = (val != null)
? Long.parseLong(val)
: JobStatus.NO_LATEST_RUNTIME;
return Pair.create(earliestRunTimeRtc, latestRunTimeRtc);
}","        private Pair<Long, Long> buildRtcExecutionTimesFromXml(XmlPullParser parser)
throws NumberFormatException {
String val;
//comment
<start>val = parser.getAttributeValue(null, ""delay"");
final long earliestRunTimeRtc = (val != null)
? Long.parseLong(val)
: JobStatus.NO_EARLIEST_RUNTIME;
val = parser.getAttributeValue(null, ""deadline"");
final long latestRunTimeRtc = (val != null)
? Long.parseLong(val)
: JobStatus.NO_LATEST_RUNTIME;
return Pair.create(earliestRunTimeRtc, latestRunTimeRtc);<end>
}"
586,"    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
byte[] tranId = rc.getTransactionId();
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);

//comment
String lineNumber = MessageUtils.getLocalNumber();
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));

//comment
if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}
}
}","    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
byte[] tranId = rc.getTransactionId();
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);

//comment
String lineNumber = MessageUtils.getLocalNumber();
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));

//comment
<start>if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}<end>
}
}"
587,"void open() throws IOException, MessagingException {
if (mTransport != null && mTransport.isOpen()) {
return;
}

try {
//comment
if (mTransport == null) {
mTransport = mImapStore.cloneTransport();
}

mTransport.open();

createParser();

//comment
mParser.readResponse();

//comment
ImapResponse capabilities = queryCapabilities();

boolean hasStartTlsCapability =
capabilities.contains(ImapConstants.STARTTLS);

//comment
ImapResponse newCapabilities = doStartTls(hasStartTlsCapability);
if (newCapabilities != null) {
capabilities = newCapabilities;
}

//comment
//comment
//comment
setCapabilities(capabilities);
String capabilityString = capabilities.flatten();

//comment
doSendId(isCapable(CAPABILITY_ID), capabilityString);

//comment
doLogin();

//comment
doGetNamespace(isCapable(CAPABILITY_NAMESPACE));

//comment
<start>doGetPathSeparator();<end>

mImapStore.ensurePrefixIsValid();
} catch (SSLException e) {
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, e, ""SSLException"");
}
throw new CertificateValidationException(e.getMessage(), e);
} catch (IOException ioe) {
//comment
//comment
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ioe, ""IOException"");
}
throw ioe;
} finally {
destroyResponses();
}
}","void open() throws IOException, MessagingException {
if (mTransport != null && mTransport.isOpen()) {
return;
}

try {
//comment
if (mTransport == null) {
mTransport = mImapStore.cloneTransport();
}

mTransport.open();

createParser();

//comment
mParser.readResponse();

//comment
ImapResponse capabilities = queryCapabilities();

boolean hasStartTlsCapability =
capabilities.contains(ImapConstants.STARTTLS);

//comment
ImapResponse newCapabilities = doStartTls(hasStartTlsCapability);
if (newCapabilities != null) {
capabilities = newCapabilities;
}

//comment
//comment
//comment
setCapabilities(capabilities);
String capabilityString = capabilities.flatten();

//comment
doSendId(isCapable(CAPABILITY_ID), capabilityString);

//comment
doLogin();

//comment
doGetNamespace(isCapable(CAPABILITY_NAMESPACE));

//comment
<start>doGetPathSeparator();<end>

mImapStore.ensurePrefixIsValid();
} catch (SSLException e) {
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, e, ""SSLException"");
}
throw new CertificateValidationException(e.getMessage(), e);
} catch (IOException ioe) {
//comment
//comment
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ioe, ""IOException"");
}
throw ioe;
} finally {
destroyResponses();
}
}"
588,"private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
<start>if (x == 0.0 || y == 0.0 || z == 0.0) return;<end>

//comment
double xy = Math.sqrt(x*x + y*y);
//comment
<start>double angle = Math.atan2(xy, z);<end>
//comment
angle = angle * 180.0 / Math.PI;
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
<start>setOrientation(orientation);<end>
}","private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
<start>if (x == 0.0 || y == 0.0 || z == 0.0) return;<end>

//comment
double xy = Math.sqrt(x*x + y*y);
//comment
double angle = Math.atan2(xy, z);
//comment
angle = angle * 180.0 / Math.PI;
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}"
589,"    private static Sender findSender(Context context, int resourceId, Account account)
throws MessagingException {
Sender sender = null;
try {
XmlResourceParser xml = context.getResources().getXml(resourceId);
int xmlEventType;
HostAuth sendAuth = account.getOrCreateHostAuthSend(context);
//comment
while ((xmlEventType = xml.next()) != XmlResourceParser.END_DOCUMENT) {
if (xmlEventType == XmlResourceParser.START_TAG &&
""sender"".equals(xml.getName())) {
String xmlScheme = xml.getAttributeValue(null, ""scheme"");
if (sendAuth.mProtocol != null && sendAuth.mProtocol.startsWith(xmlScheme)) {
//comment
//comment
<start>String className = xml.getAttributeValue(null, ""class"");
sender = instantiateSender(context, className, account);<end>
}
}
}
} catch (XmlPullParserException e) {
//comment
} catch (IOException e) {
//comment
}
return sender;
}","    private static Sender findSender(Context context, int resourceId, Account account)
throws MessagingException {
Sender sender = null;
try {
XmlResourceParser xml = context.getResources().getXml(resourceId);
int xmlEventType;
HostAuth sendAuth = account.getOrCreateHostAuthSend(context);
//comment
while ((xmlEventType = xml.next()) != XmlResourceParser.END_DOCUMENT) {
if (xmlEventType == XmlResourceParser.START_TAG &&
""sender"".equals(xml.getName())) {
String xmlScheme = xml.getAttributeValue(null, ""scheme"");
<start>if (sendAuth.mProtocol != null && sendAuth.mProtocol.startsWith(xmlScheme)) {
//comment
//comment
String className = xml.getAttributeValue(null, ""class"");
sender = instantiateSender(context, className, account);
}<end>
}
}
} catch (XmlPullParserException e) {
//comment
} catch (IOException e) {
//comment
}
return sender;
}"
591,"@Override
public void setValues(DataKind kind, ValuesDelta entry, RawContactDelta state, boolean readOnly,
ViewIdGenerator vig) {
mKind = kind;
mEntry = entry;
mState = state;
mReadOnly = readOnly;
mViewIdGenerator = vig;
setId(vig.getId(state, kind, entry, ViewIdGenerator.NO_VIEW_INDEX));

<start>if (!entry.isVisible()) {
//comment
setVisibility(View.GONE);
return;
}
setVisibility(View.VISIBLE);<end>

//comment
final boolean hasTypes = RawContactModifier.hasEditTypes(kind);
setupLabelButton(hasTypes);
mLabel.setEnabled(!readOnly && isEnabled());
if (mKind.titleRes > 0) {
mLabel.setContentDescription(getContext().getResources().getString(mKind.titleRes));
}
mType = RawContactModifier.getCurrentType(entry, kind);
rebuildLabel();
}","@Override
public void setValues(DataKind kind, ValuesDelta entry, RawContactDelta state, boolean readOnly,
ViewIdGenerator vig) {
mKind = kind;
mEntry = entry;
mState = state;
mReadOnly = readOnly;
mViewIdGenerator = vig;
setId(vig.getId(state, kind, entry, ViewIdGenerator.NO_VIEW_INDEX));

<start>if (!entry.isVisible()) {
//comment
setVisibility(View.GONE);
return;
}<end>
setVisibility(View.VISIBLE);

//comment
final boolean hasTypes = RawContactModifier.hasEditTypes(kind);
setupLabelButton(hasTypes);
mLabel.setEnabled(!readOnly && isEnabled());
if (mKind.titleRes > 0) {
mLabel.setContentDescription(getContext().getResources().getString(mKind.titleRes));
}
mType = RawContactModifier.getCurrentType(entry, kind);
rebuildLabel();
}"
593,"@Override
public void onResume() {
super.onResume();
CatLog.d(LOG_TAG, ""onResume - mIsResponseSent["" + mIsResponseSent +
""], sim id: "" + mSlotId);
//comment
//comment
//comment
//comment
//comment
//comment
if (StkApp.calculateDurationInMilis(mTextMsg.duration) == 0 &&
!mTextMsg.responseNeeded && mTextMsg.userClear) {
CatLog.d(LOG_TAG, ""User should clear text..showing message forever"");
return;
}

appService.setDisplayTextDlgVisibility(true, mSlotId);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>if (mAlarmTime == NO_DIALOG_ALARM) {
startTimeOut();
}<end>
}","@Override
public void onResume() {
super.onResume();
CatLog.d(LOG_TAG, ""onResume - mIsResponseSent["" + mIsResponseSent +
""], sim id: "" + mSlotId);
//comment
//comment
//comment
//comment
//comment
//comment
if (StkApp.calculateDurationInMilis(mTextMsg.duration) == 0 &&
!mTextMsg.responseNeeded && mTextMsg.userClear) {
CatLog.d(LOG_TAG, ""User should clear text..showing message forever"");
return;
}

appService.setDisplayTextDlgVisibility(true, mSlotId);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>if (mAlarmTime == NO_DIALOG_ALARM) {
startTimeOut();
}<end>
}"
594,"    @Override
public void handleMessage(Message msg) {
if (VDBG) log(""handleMessage: "" + msg);
switch (msg.what) {

case THREEWAY_CALLERINFO_DISPLAY_DONE:
if (DBG) log(""THREEWAY_CALLERINFO_DISPLAY_DONE..."");

if (mApp.cdmaPhoneCallState.getCurrentCallState()
<start>== CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {<end>
//comment
mApp.cdmaPhoneCallState.setThreeWayCallOrigState(false);

//comment
<start>mApp.updateInCallScreen();<end>
}
break;

default:
Log.wtf(TAG, ""handleMessage: unexpected code: "" + msg);
break;
}
}","    @Override
public void handleMessage(Message msg) {
if (VDBG) log(""handleMessage: "" + msg);
switch (msg.what) {

case THREEWAY_CALLERINFO_DISPLAY_DONE:
if (DBG) log(""THREEWAY_CALLERINFO_DISPLAY_DONE..."");

if (mApp.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.THRWAY_ACTIVE) {
//comment
mApp.cdmaPhoneCallState.setThreeWayCallOrigState(false);

//comment
<start>mApp.updateInCallScreen();<end>
}
break;

default:
Log.wtf(TAG, ""handleMessage: unexpected code: "" + msg);
break;
}
}"
596,"@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
if (savedInstanceState != null) {
mDialogId = savedInstanceState.getInt(KEY_DIALOG_ID, 0);
int mParentFragmentId = savedInstanceState.getInt(KEY_PARENT_FRAGMENT_ID, -1);
if (mParentFragmentId > -1) {
mParentFragment = getFragmentManager().findFragmentById(mParentFragmentId);
<start>if (!(mParentFragment instanceof DialogCreatable)) {
throw new IllegalArgumentException(
KEY_PARENT_FRAGMENT_ID + "" must implement ""
+ DialogCreatable.class.getName());
}<end>
}
//comment
<start>if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
((AOKPPreferenceFragment) mParentFragment).mDialogFragment = this;
}<end>
}
return ((DialogCreatable) mParentFragment).onCreateDialog(mDialogId);
}","@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
if (savedInstanceState != null) {
mDialogId = savedInstanceState.getInt(KEY_DIALOG_ID, 0);
int mParentFragmentId = savedInstanceState.getInt(KEY_PARENT_FRAGMENT_ID, -1);
if (mParentFragmentId > -1) {
mParentFragment = getFragmentManager().findFragmentById(mParentFragmentId);
if (!(mParentFragment instanceof DialogCreatable)) {
throw new IllegalArgumentException(
KEY_PARENT_FRAGMENT_ID + "" must implement ""
+ DialogCreatable.class.getName());
}
}
//comment
if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
<start>((AOKPPreferenceFragment) mParentFragment).mDialogFragment = this;<end>
}
}
return ((DialogCreatable) mParentFragment).onCreateDialog(mDialogId);
}"
597,"@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
<start>options.inJustDecodeBounds = true;<end>
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
<start>int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;<end>
int bmHeight = options.outHeight;

int scale = 1;
<start>while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}<end>
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
inputstream.close();
inputstream = openStream();
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}","@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
<start>maxWidth *= 1.25;
maxHeight *= 1.25;<end>
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
inputstream.close();
inputstream = openStream();
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}"
599,"<start>    private void updateButton() {<end>
//comment
Button okButton = (Button) findViewById(R.id.button_ok);
<start>okButton.setEnabled((mTextIn.getText().length() < mStkInput.minLen) ? false : true);<end>
}","    private void updateButton() {
//comment
<start>Button okButton = (Button) findViewById(R.id.button_ok);
okButton.setEnabled((mTextIn.getText().length() < mStkInput.minLen) ? false : true);<end>
}"
600,"    @Override
protected void showDialog(Bundle state) {
if (Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
//comment
} else {
super.showDialog(state);
}
}","    @Override
protected void showDialog(Bundle state) {
<start>if (Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {<end>
//comment
} else {
super.showDialog(state);
}
}"
601,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
<start>if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}<end>
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

<start>if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}<end>

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
604,"    private void initializeCamera() {
if (DBG) log(""Initializing camera id="" + mCameraId);

if (mCameraId == CAMERA_UNKNOWN) {
loge(""initializeCamera: Not initializing camera as mCameraId is unknown"");
return;
}

//comment
<start>if (false == openCamera(mCameraId)) {
return;
}<end>
initializeZoom();
initializeCameraParams();
startPreviewAndRecording();
}","    private void initializeCamera() {
if (DBG) log(""Initializing camera id="" + mCameraId);

if (mCameraId == CAMERA_UNKNOWN) {
loge(""initializeCamera: Not initializing camera as mCameraId is unknown"");
return;
}

//comment
<start>if (false == openCamera(mCameraId)) {
return;
}
initializeZoom();
initializeCameraParams();
startPreviewAndRecording();<end>
}"
613,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}

mHandler = new Handler();

//comment
//comment
Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();

//comment
<start>IntentFilter filter = new IntentFilter();<end>
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

//comment
if (!Boolean.parseBoolean(
SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE))) {
finish();
}

mHandler = new Handler();

//comment
//comment
Thread waitForConnectionCompleteThread = new Thread(null, mTask,
""EcmExitDialogWaitThread"");
waitForConnectionCompleteThread.start();

//comment
<start>IntentFilter filter = new IntentFilter();
filter.addAction(TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED);
registerReceiver(mEcmExitReceiver, filter);<end>
}"
615,"        private JobInfo.Builder buildBuilderFromXml(XmlPullParser parser) throws NumberFormatException {
//comment
<start>int jobId = Integer.parseInt(parser.getAttributeValue(null, ""jobid""));
String packageName = parser.getAttributeValue(null, ""package"");<end>
String className = parser.getAttributeValue(null, ""class"");
ComponentName cname = new ComponentName(packageName, className);

return new JobInfo.Builder(jobId, cname);
}","        private JobInfo.Builder buildBuilderFromXml(XmlPullParser parser) throws NumberFormatException {
//comment
<start>int jobId = Integer.parseInt(parser.getAttributeValue(null, ""jobid""));
String packageName = parser.getAttributeValue(null, ""package"");
String className = parser.getAttributeValue(null, ""class"");
ComponentName cname = new ComponentName(packageName, className);

return new JobInfo.Builder(jobId, cname);<end>
}"
618,"        boolean validateDownloadRequest(final DownloadRequest dr, final int callbackTimeout,
final long now) {
//comment
<start>final long timeSinceCallback = now - dr.mLastCallbackTime;<end>
if (timeSinceCallback > callbackTimeout) {
LogUtils.d(LOG_TAG, ""Timeout for DownloadRequest #%d "", dr.mAttachmentId);
return true;
}
return false;
}","        boolean validateDownloadRequest(final DownloadRequest dr, final int callbackTimeout,
final long now) {
//comment
<start>final long timeSinceCallback = now - dr.mLastCallbackTime;
if (timeSinceCallback > callbackTimeout) {<end>
LogUtils.d(LOG_TAG, ""Timeout for DownloadRequest #%d "", dr.mAttachmentId);
return true;
}
return false;
}"
620,"@Override
public void serviceProcessingStarted() {
synchronized (this) {
//comment
if (!mServiceProcessing) {
<start>mServiceProcessing = true;
//comment
//comment
mRunWakeLock.acquire(10 * 60 * 1000L);<end>
mLaunchWakeLock.release();
}
}
}","@Override
public void serviceProcessingStarted() {
synchronized (this) {
//comment
if (!mServiceProcessing) {
mServiceProcessing = true;
//comment
//comment
<start>mRunWakeLock.acquire(10 * 60 * 1000L);<end>
mLaunchWakeLock.release();
}
}
}"
621,"    public static boolean maybeDoOtaCall(Context context, Handler handler, int request) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

if (ActivityManager.isRunningInTestHarness()) {
Log.i(LOG_TAG, ""Don't run provisioning when in test harness"");
return true;
}

if (!TelephonyCapabilities.supportsOtasp(phone)) {
//comment
if (DBG) log(""maybeDoOtaCall: OTASP not supported on this device"");
return true;
}

if (!phone.isMinInfoReady()) {
if (DBG) log(""MIN is not ready. Registering to receive notification."");
phone.registerForSubscriptionInfoReady(handler, request, null);
return false;
}
phone.unregisterForSubscriptionInfoReady(handler);

if (getLteOnCdmaMode(context) == PhoneConstants.LTE_ON_CDMA_UNKNOWN) {
if (sOtaCallLteRetries < OTA_CALL_LTE_RETRIES_MAX) {
if (DBG) log(""maybeDoOtaCall: LTE state still unknown: retrying"");
handler.sendEmptyMessageDelayed(request, OTA_CALL_LTE_RETRY_PERIOD);
sOtaCallLteRetries++;
return false;
} else {
Log.w(LOG_TAG, ""maybeDoOtaCall: LTE state still unknown: giving up"");
return true;
}
}

boolean phoneNeedsActivation = phone.needsOtaServiceProvisioning();
if (DBG) log(""phoneNeedsActivation is set to "" + phoneNeedsActivation);

int otaShowActivationScreen = context.getResources().getInteger(
R.integer.OtaShowActivationScreen);
if (DBG) log(""otaShowActivationScreen: "" + otaShowActivationScreen);

//comment
//comment
if (PhoneGlobals.sVoiceCapable) {
<start>if (phoneNeedsActivation
&& (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
app.cdmaOtaProvisionData.isOtaCallIntentProcessed = false;
sIsWizardMode = false;

if (DBG) Log.d(LOG_TAG, ""==> Starting interactive CDMA provisioning..."");
OtaUtils.startInteractiveOtasp(context);

if (DBG) log(""maybeDoOtaCall: voice capable; activation started."");
} else {
if (DBG) log(""maybeDoOtaCall: voice capable; activation NOT started."");
}<end>
} else {
if (phoneNeedsActivation) {
app.cdmaOtaProvisionData.isOtaCallIntentProcessed = false;
Intent newIntent = new Intent(ACTION_PERFORM_VOICELESS_CDMA_PROVISIONING);
newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
newIntent.putExtra(EXTRA_VOICELESS_PROVISIONING_OFFER_DONTSHOW, true);
try {
context.startActivity(newIntent);
} catch (ActivityNotFoundException e) {
loge(""No activity Handling PERFORM_VOICELESS_CDMA_PROVISIONING!"");
return false;
}
if (DBG) log(""maybeDoOtaCall: non-interactive; activation intent sent."");
} else {
if (DBG) log(""maybeDoOtaCall: non-interactive, no need for OTASP."");
}
}
return true;
}","    public static boolean maybeDoOtaCall(Context context, Handler handler, int request) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

if (ActivityManager.isRunningInTestHarness()) {
Log.i(LOG_TAG, ""Don't run provisioning when in test harness"");
return true;
}

if (!TelephonyCapabilities.supportsOtasp(phone)) {
//comment
if (DBG) log(""maybeDoOtaCall: OTASP not supported on this device"");
return true;
}

if (!phone.isMinInfoReady()) {
if (DBG) log(""MIN is not ready. Registering to receive notification."");
phone.registerForSubscriptionInfoReady(handler, request, null);
return false;
}
phone.unregisterForSubscriptionInfoReady(handler);

if (getLteOnCdmaMode(context) == PhoneConstants.LTE_ON_CDMA_UNKNOWN) {
if (sOtaCallLteRetries < OTA_CALL_LTE_RETRIES_MAX) {
if (DBG) log(""maybeDoOtaCall: LTE state still unknown: retrying"");
handler.sendEmptyMessageDelayed(request, OTA_CALL_LTE_RETRY_PERIOD);
sOtaCallLteRetries++;
return false;
} else {
Log.w(LOG_TAG, ""maybeDoOtaCall: LTE state still unknown: giving up"");
return true;
}
}

boolean phoneNeedsActivation = phone.needsOtaServiceProvisioning();
if (DBG) log(""phoneNeedsActivation is set to "" + phoneNeedsActivation);

int otaShowActivationScreen = context.getResources().getInteger(
R.integer.OtaShowActivationScreen);
if (DBG) log(""otaShowActivationScreen: "" + otaShowActivationScreen);

//comment
//comment
<start>if (PhoneGlobals.sVoiceCapable) {
if (phoneNeedsActivation
&& (otaShowActivationScreen == OTA_SHOW_ACTIVATION_SCREEN_ON)) {
app.cdmaOtaProvisionData.isOtaCallIntentProcessed = false;
sIsWizardMode = false;

if (DBG) Log.d(LOG_TAG, ""==> Starting interactive CDMA provisioning..."");
OtaUtils.startInteractiveOtasp(context);

if (DBG) log(""maybeDoOtaCall: voice capable; activation started."");
} else {
if (DBG) log(""maybeDoOtaCall: voice capable; activation NOT started."");
}
} else {
if (phoneNeedsActivation) {
app.cdmaOtaProvisionData.isOtaCallIntentProcessed = false;
Intent newIntent = new Intent(ACTION_PERFORM_VOICELESS_CDMA_PROVISIONING);
newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
newIntent.putExtra(EXTRA_VOICELESS_PROVISIONING_OFFER_DONTSHOW, true);
try {
context.startActivity(newIntent);
} catch (ActivityNotFoundException e) {
loge(""No activity Handling PERFORM_VOICELESS_CDMA_PROVISIONING!"");
return false;
}
if (DBG) log(""maybeDoOtaCall: non-interactive; activation intent sent."");
} else {
if (DBG) log(""maybeDoOtaCall: non-interactive, no need for OTASP."");
}
}<end>
return true;
}"
622,"@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
if (mDrawable != null) {
//comment
final int nativeDrawableWidth = mDrawable.getIntrinsicWidth();
final int nativeDrawableHeight = mDrawable.getIntrinsicHeight();
final int viewWidth = getMeasuredWidth();
final int viewHeight = getMeasuredHeight();
final float imageCirclePercentage = mImageCirclePercentage > 0
? mImageCirclePercentage : 1;

final float scaleFactor = Math.min(1f,
Math.min(
(float) nativeDrawableWidth != 0
? imageCirclePercentage * viewWidth / nativeDrawableWidth : 1,
(float) nativeDrawableHeight != 0
? imageCirclePercentage
* viewHeight / nativeDrawableHeight : 1));

//comment
<start>final int drawableWidth = Math.round(scaleFactor * nativeDrawableWidth);
final int drawableHeight = Math.round(scaleFactor * nativeDrawableHeight);<end>

//comment
final int drawableLeft = (viewWidth - drawableWidth) / 2
+ Math.round(mImageHorizontalOffcenterPercentage * drawableWidth);
final int drawableTop = (viewHeight - drawableHeight) / 2;

mDrawable.setBounds(drawableLeft, drawableTop, drawableLeft + drawableWidth,
drawableTop + drawableHeight);
}

super.onLayout(changed, left, top, right, bottom);
}","@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
if (mDrawable != null) {
//comment
final int nativeDrawableWidth = mDrawable.getIntrinsicWidth();
final int nativeDrawableHeight = mDrawable.getIntrinsicHeight();
final int viewWidth = getMeasuredWidth();
final int viewHeight = getMeasuredHeight();
final float imageCirclePercentage = mImageCirclePercentage > 0
? mImageCirclePercentage : 1;

<start>final float scaleFactor = Math.min(1f,
Math.min(
(float) nativeDrawableWidth != 0
? imageCirclePercentage * viewWidth / nativeDrawableWidth : 1,
(float) nativeDrawableHeight != 0
? imageCirclePercentage
* viewHeight / nativeDrawableHeight : 1));<end>

//comment
<start>final int drawableWidth = Math.round(scaleFactor * nativeDrawableWidth);
final int drawableHeight = Math.round(scaleFactor * nativeDrawableHeight);<end>

//comment
final int drawableLeft = (viewWidth - drawableWidth) / 2
+ Math.round(mImageHorizontalOffcenterPercentage * drawableWidth);
final int drawableTop = (viewHeight - drawableHeight) / 2;

mDrawable.setBounds(drawableLeft, drawableTop, drawableLeft + drawableWidth,
drawableTop + drawableHeight);
}

super.onLayout(changed, left, top, right, bottom);
}"
626,"public void setDraftState(long threadId, boolean hasDraft) {
if (threadId <= 0) {
return;
}

boolean changed;
synchronized (mDraftSetLock) {
if (hasDraft) {
changed = mDraftSet.add(threadId);
} else {
changed = mDraftSet.remove(threadId);
}
}

if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""setDraftState: tid="" + threadId + "", value="" + hasDraft + "", changed="" + changed);
}

if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
dump();
}

//comment
if (changed) {
<start>synchronized (mChangeListenersLock) {
for (OnDraftChangedListener l : mChangeListeners) {
l.onDraftChanged(threadId, hasDraft);
}<end>
}
}
}","public void setDraftState(long threadId, boolean hasDraft) {
if (threadId <= 0) {
return;
}

boolean changed;
synchronized (mDraftSetLock) {
if (hasDraft) {
changed = mDraftSet.add(threadId);
} else {
changed = mDraftSet.remove(threadId);
}
}

if (Log.isLoggable(LogTag.APP, Log.DEBUG)) {
log(""setDraftState: tid="" + threadId + "", value="" + hasDraft + "", changed="" + changed);
}

if (Log.isLoggable(LogTag.APP, Log.VERBOSE)) {
dump();
}

//comment
<start>if (changed) {
synchronized (mChangeListenersLock) {
for (OnDraftChangedListener l : mChangeListeners) {
l.onDraftChanged(threadId, hasDraft);
}
}
}<end>
}"
627,"<start>    private int getAccessibilityTimeoutValue() {
//comment
int timeoutValue = getSecureAccessibilityTimeoutValue(mContentResolver,
CONTROL_TIMEOUT_SETTINGS_SECURE);
return timeoutValue;<end>
}","    private int getAccessibilityTimeoutValue() {
//comment
<start>int timeoutValue = getSecureAccessibilityTimeoutValue(mContentResolver,
CONTROL_TIMEOUT_SETTINGS_SECURE);<end>
return timeoutValue;
}"
628,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
<start>sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();<end>
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
<start>sendAcknowledgeInd(retrieveConf);<end>
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
634,"    @Override
protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
<start>if (DBG) log(""onSizeChanged"");<end>
if (DBG) log(""Video Panel width:"" + xNew + "", height:"" + yNew);

<start>mTargetHeight = yNew;<end>
//comment
resizeCameraPreview(yNew);
<start>resizeFarEndView(xNew, yNew);<end>
}","    @Override
protected void onSizeChanged(int xNew, int yNew, int xOld, int yOld) {
if (DBG) log(""onSizeChanged"");
if (DBG) log(""Video Panel width:"" + xNew + "", height:"" + yNew);

mTargetHeight = yNew;
//comment
<start>resizeCameraPreview(yNew);<end>
resizeFarEndView(xNew, yNew);
}"
635,"@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
<start>ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}<end>

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}","@NonNull
public SearchResultPage globalQuery(
@NonNull String queryExpression,
@NonNull SearchSpec searchSpec,
@NonNull String callerPackageName,
@Nullable VisibilityStore visibilityStore,
int callerUid,
boolean callerHasSystemAccess,
@Nullable AppSearchLogger logger)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
SearchStats.Builder sStatsBuilder = null;
if (logger != null) {
sStatsBuilder =
new SearchStats.Builder(SearchStats.VISIBILITY_SCOPE_GLOBAL, callerPackageName);
}

mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

//comment
Set<String> packageFilters = new ArraySet<>(searchSpec.getFilterPackageNames());
Set<String> prefixFilters = new ArraySet<>();
if (packageFilters.isEmpty()) {
//comment
//comment
prefixFilters = mNamespaceMapLocked.keySet();
} else {
//comment
//comment
for (String prefix : mNamespaceMapLocked.keySet()) {
String packageName = getPackageName(prefix);
if (packageFilters.contains(packageName)) {
prefixFilters.add(prefix);
}
}
}

//comment
<start>ArraySet<String> prefixedSchemaFilters = new ArraySet<>();
for (String prefix : prefixFilters) {
List<String> schemaFilters = searchSpec.getFilterSchemas();
if (schemaFilters.isEmpty()) {
//comment
prefixedSchemaFilters.addAll(mSchemaMapLocked.get(prefix).keySet());
} else {
//comment
for (int i = 0; i < schemaFilters.size(); i++) {
prefixedSchemaFilters.add(prefix + schemaFilters.get(i));
}
}
}<end>

//comment
Iterator<String> prefixedSchemaIt = prefixedSchemaFilters.iterator();
while (prefixedSchemaIt.hasNext()) {
String prefixedSchema = prefixedSchemaIt.next();
String packageName = getPackageName(prefixedSchema);

boolean allow;
if (packageName.equals(callerPackageName)) {
//comment
allow = true;
} else if (visibilityStore == null) {
//comment
allow = false;
} else {
String databaseName = getDatabaseName(prefixedSchema);
allow =
visibilityStore.isSchemaSearchableByCaller(
packageName,
databaseName,
prefixedSchema,
callerUid,
callerHasSystemAccess);
}

if (!allow) {
prefixedSchemaIt.remove();
}
}

SearchResultPage searchResultPage =
doQueryLocked(
prefixFilters,
prefixedSchemaFilters,
queryExpression,
searchSpec,
sStatsBuilder);
addNextPageToken(callerPackageName, searchResultPage.getNextPageToken());
return searchResultPage;
} finally {
mReadWriteLock.readLock().unlock();

if (logger != null) {
sStatsBuilder.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis));
logger.logStats(sStatsBuilder.build());
}
}
}"
636,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
<start>boolean hideHelper = false;<end>
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
<start>inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);<end>
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
637,"    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
<start>mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);
mApplication.updateInCallScreen();<end>
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}","    @Override
public void handleMessage(Message msg) {
switch (msg.what) {
case PHONE_NEW_RINGING_CONNECTION:
log(""RINGING... (new)"");
onNewRingingConnection((AsyncResult) msg.obj);
mSilentRingerRequested = false;
break;

case PHONE_INCOMING_RING:
//comment
//comment
if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
PhoneBase pb =  (PhoneBase)((AsyncResult)msg.obj).result;

if ((pb.getState() == PhoneConstants.State.RINGING)
&& (mSilentRingerRequested == false)) {
if (DBG) log(""RINGING... (PHONE_INCOMING_RING event)"");
mRinger.ring();
} else {
if (DBG) log(""RING before NEW_RING, skipping"");
}
}
break;

case PHONE_STATE_CHANGED:
onPhoneStateChanged((AsyncResult) msg.obj);
break;

case PHONE_DISCONNECT:
if (DBG) log(""DISCONNECT"");
onDisconnect((AsyncResult) msg.obj);
break;

case PHONE_UNKNOWN_CONNECTION_APPEARED:
onUnknownConnectionAppeared((AsyncResult) msg.obj);
break;

case RINGER_CUSTOM_RINGTONE_QUERY_TIMEOUT:
onCustomRingtoneQueryTimeout((String) msg.obj);
break;

case PHONE_MWI_CHANGED:
onMwiChanged(mApplication.phone.getMessageWaitingIndicator());
break;

case PHONE_CDMA_CALL_WAITING:
if (DBG) log(""Received PHONE_CDMA_CALL_WAITING event"");
onCdmaCallWaiting((AsyncResult) msg.obj);
break;

case CDMA_CALL_WAITING_REJECT:
Log.i(LOG_TAG, ""Received CDMA_CALL_WAITING_REJECT event"");
onCdmaCallWaitingReject();
break;

case CALLWAITING_CALLERINFO_DISPLAY_DONE:
Log.i(LOG_TAG, ""Received CALLWAITING_CALLERINFO_DISPLAY_DONE event"");
mCallWaitingTimeOut = true;
onCdmaCallWaitingReject();
break;

case CALLWAITING_ADDCALL_DISABLE_TIMEOUT:
if (DBG) log(""Received CALLWAITING_ADDCALL_DISABLE_TIMEOUT event ..."");
//comment
<start>mApplication.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);<end>
mApplication.updateInCallScreen();
break;

case PHONE_STATE_DISPLAYINFO:
if (DBG) log(""Received PHONE_STATE_DISPLAYINFO event"");
onDisplayInfo((AsyncResult) msg.obj);
break;

case PHONE_STATE_SIGNALINFO:
if (DBG) log(""Received PHONE_STATE_SIGNALINFO event"");
onSignalInfo((AsyncResult) msg.obj);
break;

case DISPLAYINFO_NOTIFICATION_DONE:
if (DBG) log(""Received Display Info notification done event ..."");
CdmaDisplayInfo.dismissDisplayInfoRecord();
break;

case EVENT_OTA_PROVISION_CHANGE:
if (DBG) log(""EVENT_OTA_PROVISION_CHANGE..."");
mApplication.handleOtaspEvent(msg);
break;

case PHONE_ENHANCED_VP_ON:
if (DBG) log(""PHONE_ENHANCED_VP_ON..."");
if (!mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = true;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_ENHANCED_VP_OFF:
if (DBG) log(""PHONE_ENHANCED_VP_OFF..."");
if (mVoicePrivacyState) {
int toneToPlay = InCallTonePlayer.TONE_VOICE_PRIVACY;
new InCallTonePlayer(toneToPlay).start();
mVoicePrivacyState = false;
//comment
if (DBG) log(""- updating notification for VP state..."");
mApplication.notificationMgr.updateInCallNotification();
}
break;

case PHONE_RINGBACK_TONE:
onRingbackTone((AsyncResult) msg.obj);
break;

case PHONE_RESEND_MUTE:
onResendMute();
break;

case UPDATE_IN_CALL_NOTIFICATION:
mApplication.notificationMgr.updateInCallNotification();
break;

case SUPP_SERVICE_NOTIFY:
if (DBG) log(""Received Supplementary Notification"");

if (msg.obj != null && ((AsyncResult) msg.obj).result != null) {
suppSvcNotification = (SuppServiceNotification)((AsyncResult) msg.obj).result;
String callForwardText = getSuppSvcNotificationText(suppSvcNotification);
Toast.makeText(mApplication, callForwardText, Toast.LENGTH_LONG).show();
}
break;

default:
//comment
}
}"
638,"private PointF getPolar(float x, float y) {
<start>PointF res = new PointF();
//comment
res.x = (float) Math.PI / 2;
x = mCenter.x - x;
if (mCenter.x < mSlop) {
x = -x;
}<end>
y = mCenter.y - y;
res.y = (float) Math.sqrt(x * x + y * y);
if (y > 0) {
res.x = (float) Math.asin(x / res.y);
} else if (y < 0) {
res.x = (float) (Math.PI - Math.asin(x / res.y ));
}
return res;
}","private PointF getPolar(float x, float y) {
PointF res = new PointF();
//comment
<start>res.x = (float) Math.PI / 2;
x = mCenter.x - x;
if (mCenter.x < mSlop) {
x = -x;
}
y = mCenter.y - y;
res.y = (float) Math.sqrt(x * x + y * y);
if (y > 0) {
res.x = (float) Math.asin(x / res.y);
} else if (y < 0) {
res.x = (float) (Math.PI - Math.asin(x / res.y ));
}<end>
return res;
}"
639,"<start>    static boolean hangupRingingCall(Call ringing) {<end>
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

if (state == Call.State.INCOMING) {
//comment
<start>log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
} else if (state == Call.State.WAITING) {<end>
//comment
//comment
//comment
//comment
//comment
//comment
if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
//comment
//comment
log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");
final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
notifier.sendCdmaCallWaitingReject();
return true;
} else {
//comment
//comment
<start>log(""hangupRingingCall(): call-waiting call: hangup()"");<end>
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}","    static boolean hangupRingingCall(Call ringing) {
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

<start>if (state == Call.State.INCOMING) {<end>
//comment
log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
} else if (state == Call.State.WAITING) {
//comment
//comment
//comment
//comment
//comment
//comment
if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
//comment
//comment
log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");
final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
notifier.sendCdmaCallWaitingReject();
return true;
} else {
//comment
//comment
log(""hangupRingingCall(): call-waiting call: hangup()"");
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}"
640,"private void processNextError() {
if (mQueuedErrors == null) {
<start>return;<end>
}
//comment
mQueuedErrors.removeFirst();
if (mQueuedErrors.size() == 0) {
mQueuedErrors = null;
return;
}
showError(mQueuedErrors.getFirst());
}","private void processNextError() {
if (mQueuedErrors == null) {
return;
}
//comment
<start>mQueuedErrors.removeFirst();<end>
if (mQueuedErrors.size() == 0) {
mQueuedErrors = null;
return;
}
showError(mQueuedErrors.getFirst());
}"
643,"private @NonNull ArrayList<AppPermissionGroup> getRevocableGroupsForPermissions(
@NonNull ArrayList<String> permissions, @NonNull AppPermissions appPerms) {
ArrayList<AppPermissionGroup> groupsToRevoke = new ArrayList<>();
int numGroups = appPerms.getPermissionGroups().size();
for (int groupNum = 0; groupNum < numGroups; groupNum++) {
AppPermissionGroup group = appPerms.getPermissionGroups().get(groupNum);

//comment
if (group.isPolicyFixed() || group.isSystemFixed()) {
continue;
}

int numPerms = permissions.size();
for (int permNum = 0; permNum < numPerms; permNum++) {
String reqPerm = permissions.get(permNum);

if (group.hasPermission(reqPerm)) {
groupsToRevoke.add(group);

//comment
//comment
<start>AppPermissionGroup bgPerms = group.getBackgroundPermissions();
if (bgPerms != null) {
groupsToRevoke.add(bgPerms);
}<end>
} else {
AppPermissionGroup bgPerms = group.getBackgroundPermissions();
if (bgPerms != null && bgPerms.hasPermission(reqPerm)) {
groupsToRevoke.add(bgPerms);
}
}
}
}

return groupsToRevoke;
}","private @NonNull ArrayList<AppPermissionGroup> getRevocableGroupsForPermissions(
@NonNull ArrayList<String> permissions, @NonNull AppPermissions appPerms) {
ArrayList<AppPermissionGroup> groupsToRevoke = new ArrayList<>();
int numGroups = appPerms.getPermissionGroups().size();
for (int groupNum = 0; groupNum < numGroups; groupNum++) {
AppPermissionGroup group = appPerms.getPermissionGroups().get(groupNum);

//comment
if (group.isPolicyFixed() || group.isSystemFixed()) {
continue;
}

int numPerms = permissions.size();
for (int permNum = 0; permNum < numPerms; permNum++) {
String reqPerm = permissions.get(permNum);

if (group.hasPermission(reqPerm)) {
groupsToRevoke.add(group);

//comment
//comment
<start>AppPermissionGroup bgPerms = group.getBackgroundPermissions();
if (bgPerms != null) {
groupsToRevoke.add(bgPerms);
}<end>
} else {
AppPermissionGroup bgPerms = group.getBackgroundPermissions();
if (bgPerms != null && bgPerms.hasPermission(reqPerm)) {
groupsToRevoke.add(bgPerms);
}
}
}
}

return groupsToRevoke;
}"
645,"public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
int checkedCount = getListView().getCheckedItemCount();
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
<start>if (!checkedItems.get(i)) {
//comment
continue;
}<end>
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}
mode.finish();
break;

case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
lv.setItemChecked(i, true);
}
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}","public boolean onActionItemClicked(ActionMode mode, MenuItem item) {
ListView lv = getListView();
switch (item.getItemId()) {
case R.id.action_delete:
//comment
SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
int checkedCount = getListView().getCheckedItemCount();
if (checkedCount > mDataCount) {
throw new IllegalStateException(""checked item counts do not match. "" +
""checkedCount: "" + checkedCount + "", dataSize: "" + mDataCount);
}
if (mDataCount > 0) {
ArrayList<Object> toRemove = new ArrayList<Object>();
for (int i = 0; i < mDataCount; i++) {
<start>if (!checkedItems.get(i)) {<end>
//comment
continue;
}
if (StorageMeasurement.LOGV) {
Log.i(TAG, ""deleting: "" + mAdapter.getItem(i));
}
//comment
new DeleteHandler(mAdapter.getItem(i).mFileName);
toRemove.add(mAdapter.getItem(i));
}
mAdapter.removeAll(toRemove);
mAdapter.notifyDataSetChanged();
mDataCount = mAdapter.getCount();
}
mode.finish();
break;

case R.id.action_select_all:
//comment
for (int i = 0; i < mDataCount; i++) {
lv.setItemChecked(i, true);
}
//comment
onItemCheckedStateChanged(mode, 1, 0, true);
break;
}
return true;
}"
648,"    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
<start>mIsResponseSent = false;<end>

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
appService.getStkContext(mSlotId).setImmediateDialogInstance(this);
} else {
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);
} else {
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}","    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
<start>mIsResponseSent = false;<end>

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
appService.getStkContext(mSlotId).setImmediateDialogInstance(this);
} else {
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);
} else {
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}"
649,"<start>    private void acquireWakeLock() {
//comment
//comment
Log.v(TAG, ""mms acquireWakeLock"");
mWakeLock.acquire();<end>
}","    private void acquireWakeLock() {
//comment
//comment
Log.v(TAG, ""mms acquireWakeLock"");
<start>mWakeLock.acquire();<end>
}"
651,"    @Override
public Element createElement(String tagName) throws DOMException {
//comment
tagName = tagName.toLowerCase();
if (tagName.equals(""text"") ||
tagName.equals(""img"") ||
tagName.equals(""video"")) {
return new SmilRegionMediaElementImpl(this, tagName);
} else if (tagName.equals(""audio"")) {
return new SmilMediaElementImpl(this, tagName);
} else if (tagName.equals(""layout"")) {
return new SmilLayoutElementImpl(this, tagName);
} else if (tagName.equals(""root-layout"")) {
return new SmilRootLayoutElementImpl(this, tagName);
} else if (tagName.equals(""region"")) {
return new SmilRegionElementImpl(this, tagName);
} else if (tagName.equals(""ref"")) {
return new SmilRefElementImpl(this, tagName);
} else if (tagName.equals(""par"")) {
return new SmilParElementImpl(this, tagName);
} else {
//comment
//comment
return new SmilElementImpl(this, tagName);
}
}","    @Override
public Element createElement(String tagName) throws DOMException {
//comment
<start>tagName = tagName.toLowerCase();
if (tagName.equals(""text"") ||
tagName.equals(""img"") ||
tagName.equals(""video"")) {
return new SmilRegionMediaElementImpl(this, tagName);
} else if (tagName.equals(""audio"")) {
return new SmilMediaElementImpl(this, tagName);
} else if (tagName.equals(""layout"")) {
return new SmilLayoutElementImpl(this, tagName);
} else if (tagName.equals(""root-layout"")) {
return new SmilRootLayoutElementImpl(this, tagName);
} else if (tagName.equals(""region"")) {
return new SmilRegionElementImpl(this, tagName);
} else if (tagName.equals(""ref"")) {
return new SmilRefElementImpl(this, tagName);
} else if (tagName.equals(""par"")) {
return new SmilParElementImpl(this, tagName);
} else {<end>
//comment
//comment
return new SmilElementImpl(this, tagName);
}
}"
652,"protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
<start>return firstSystem != null ? firstSystem : matches.get(0);<end>
}","protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
<start>return firstSystem != null ? firstSystem : matches.get(0);<end>
}"
653,"static boolean handleCharsForLockedDevice(Context context,
String input,
Activity pukInputActivity) {
//comment
<start>String dialString = PhoneNumberUtils.stripSeparators(input);<end>

//comment
//comment
//comment
//comment
//comment

if (handlePinEntry(context, dialString, pukInputActivity)) {
return true;
}

return false;
}","static boolean handleCharsForLockedDevice(Context context,
String input,
Activity pukInputActivity) {
//comment
<start>String dialString = PhoneNumberUtils.stripSeparators(input);<end>

//comment
//comment
//comment
//comment
//comment

if (handlePinEntry(context, dialString, pukInputActivity)) {
return true;
}

return false;
}"
656,"<start>    static boolean handleChars(Context context,
String input,
Activity pukInputActivity) {<end>

//comment
<start>String dialString = PhoneNumberUtils.stripSeparators(input);<end>

if (handleIMEIDisplay(context, dialString)
|| handleRegulatoryInfoDisplay(context, dialString)
|| handlePinEntry(context, dialString, pukInputActivity)
|| handleAdnEntry(context, dialString)
|| handleSecretCode(context, dialString)) {
return true;
}

return false;
}","    static boolean handleChars(Context context,
String input,
Activity pukInputActivity) {

//comment
<start>String dialString = PhoneNumberUtils.stripSeparators(input);<end>

if (handleIMEIDisplay(context, dialString)
|| handleRegulatoryInfoDisplay(context, dialString)
|| handlePinEntry(context, dialString, pukInputActivity)
|| handleAdnEntry(context, dialString)
|| handleSecretCode(context, dialString)) {
return true;
}

return false;
}"
657,"public boolean addRequest(final DownloadRequest request)
throws NullPointerException {
//comment
if (request == null) {
//comment
//comment
<start>throw new NullPointerException();<end>
}
final long requestId = request.mAttachmentId;
if (requestId < 0) {
//comment
LogUtils.d(LOG_TAG, ""Not adding a DownloadRequest with an invalid attachment id"");
return false;
}
debugTrace(""Queuing DownloadRequest #%d"", requestId);
synchronized (mLock) {
//comment
final boolean exists = mRequestMap.containsKey(requestId);
if (!exists) {
mRequestQueue.offer(request);
mRequestMap.put(requestId, request);
} else {
debugTrace(""DownloadRequest #%d was already in the queue"");
}
}
return true;
}","public boolean addRequest(final DownloadRequest request)
throws NullPointerException {
//comment
<start>if (request == null) {
//comment
//comment
throw new NullPointerException();
}<end>
final long requestId = request.mAttachmentId;
if (requestId < 0) {
//comment
LogUtils.d(LOG_TAG, ""Not adding a DownloadRequest with an invalid attachment id"");
return false;
}
debugTrace(""Queuing DownloadRequest #%d"", requestId);
synchronized (mLock) {
//comment
final boolean exists = mRequestMap.containsKey(requestId);
if (!exists) {
mRequestQueue.offer(request);
mRequestMap.put(requestId, request);
} else {
debugTrace(""DownloadRequest #%d was already in the queue"");
}
}
return true;
}"
659,"public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
<start>mMediaController.show();<end>
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}","public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
<start>if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}<end>
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
if (res == 0) {
//comment
return -1;
}
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}"
660,"    public AuthenticationResult requestRefresh(final Context context, final String providerId,
final String refreshToken) throws MessagingException, IOException {
final OAuthProvider provider = AccountSettingsUtils.findOAuthProvider(context, providerId);
if (provider == null) {
LogUtils.e(TAG, ""invalid provider %s"", providerId);
//comment
//comment
<start>throw new AuthenticationFailedException(""Invalid provider"" + providerId);<end>
}
final HttpPost post = new HttpPost(provider.refreshEndpoint);
post.setHeader(""Content-Type"", ""application/x-www-form-urlencoded"");
final List<BasicNameValuePair> nvp = new ArrayList<BasicNameValuePair>();
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_REFRESH_TOKEN, refreshToken));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_ID, provider.clientId));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_SECRET, provider.clientSecret));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_GRANT_TYPE, ""refresh_token""));
try {
post.setEntity(new UrlEncodedFormEntity(nvp));
} catch (UnsupportedEncodingException e) {
LogUtils.e(TAG, e, ""unsupported encoding"");
//comment
//comment
throw new AuthenticationFailedException(""Unsuported encoding"", e);
}

return doRequest(post);
}","    public AuthenticationResult requestRefresh(final Context context, final String providerId,
final String refreshToken) throws MessagingException, IOException {
final OAuthProvider provider = AccountSettingsUtils.findOAuthProvider(context, providerId);
<start>if (provider == null) {<end>
LogUtils.e(TAG, ""invalid provider %s"", providerId);
//comment
//comment
<start>throw new AuthenticationFailedException(""Invalid provider"" + providerId);
}<end>
final HttpPost post = new HttpPost(provider.refreshEndpoint);
post.setHeader(""Content-Type"", ""application/x-www-form-urlencoded"");
final List<BasicNameValuePair> nvp = new ArrayList<BasicNameValuePair>();
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_REFRESH_TOKEN, refreshToken));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_ID, provider.clientId));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_CLIENT_SECRET, provider.clientSecret));
nvp.add(new BasicNameValuePair(OAUTH_REQUEST_GRANT_TYPE, ""refresh_token""));
try {
post.setEntity(new UrlEncodedFormEntity(nvp));
} catch (UnsupportedEncodingException e) {
LogUtils.e(TAG, e, ""unsupported encoding"");
//comment
//comment
throw new AuthenticationFailedException(""Unsuported encoding"", e);
}

return doRequest(post);
}"
661,"public void notifyMyObservers(Uri uri, int index, ContentObserver observer,
boolean selfNotify) {
String segment = null;
int segmentCount = countUriSegments(uri);
if (index >= segmentCount) {
//comment
notifyMyObservers(true, observer, selfNotify);
} else if (index < segmentCount){
segment = getUriSegment(uri, index);
//comment
<start>notifyMyObservers(false, observer, selfNotify);<end>
}

int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (segment == null || node.mName.equals(segment)) {
//comment
node.notifyMyObservers(uri, index + 1, observer, selfNotify);
if (segment != null) {
break;
}
}
}
}","public void notifyMyObservers(Uri uri, int index, ContentObserver observer,
boolean selfNotify) {
String segment = null;
int segmentCount = countUriSegments(uri);
if (index >= segmentCount) {
//comment
notifyMyObservers(true, observer, selfNotify);
} else if (index < segmentCount){
segment = getUriSegment(uri, index);
//comment
<start>notifyMyObservers(false, observer, selfNotify);<end>
}

int N = mChildren.size();
for (int i = 0; i < N; i++) {
MockObserverNode node = mChildren.get(i);
if (segment == null || node.mName.equals(segment)) {
//comment
node.notifyMyObservers(uri, index + 1, observer, selfNotify);
if (segment != null) {
break;
}
}
}
}"
664,"    protected void bindViewId(final ContactListItemView view, Cursor cursor, int idColumn) {
//comment
//comment
<start>long contactId = cursor.getLong(idColumn);<end>
view.setId((int) (contactId % Integer.MAX_VALUE));

}","    protected void bindViewId(final ContactListItemView view, Cursor cursor, int idColumn) {
//comment
//comment
<start>long contactId = cursor.getLong(idColumn);
view.setId((int) (contactId % Integer.MAX_VALUE));<end>

}"
666,"    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
mIsResponseSent = false;

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
appService.getStkContext(mSlotId).setImmediateDialogInstance(this);
} else {
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
<start>&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);<end>
} else {
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}","    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
mIsResponseSent = false;

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
appService.getStkContext(mSlotId).setImmediateDialogInstance(this);
} else {
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
<start>if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);
} else {<end>
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}"
667,"        public void onServiceConnected(ComponentName className, IBinder service) {
mService = ((EmergencyCallbackModeService.LocalBinder)service).getService();
//comment
<start>synchronized (EmergencyCallbackModeExitDialog.this) {
EmergencyCallbackModeExitDialog.this.notify();<end>
}
}","        public void onServiceConnected(ComponentName className, IBinder service) {
mService = ((EmergencyCallbackModeService.LocalBinder)service).getService();
//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
<start>EmergencyCallbackModeExitDialog.this.notify();<end>
}
}"
668,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
<start>== CdmaPhoneCallState.PhoneCallState.IDLE) {<end>
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);<end>

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);<end>
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
673,"private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
<start>permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);<end>
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;

if (appOpModeChanged) {
if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}
}

return permissionOrAppOpChanged;
}","private static boolean revokePermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
boolean permissionOrAppOpChanged = false;

boolean isRuntimePermissionsSupported = isRuntimePermissionsSupported(packageName, context);
if (isRuntimePermissionsSupported) {
//comment
<start>permissionOrAppOpChanged |= revokePermissionWithoutAppOp(packageName, permission,
context);<end>
}

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

//comment
//comment
int appOpMode = getDefaultAppOpMode(appOp);
boolean appOpModeChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
permissionOrAppOpChanged |= appOpModeChanged;

if (appOpModeChanged) {
if (!isRuntimePermissionsSupported && (appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED)) {
//comment
//comment
setPermissionFlags(packageName, permission,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED,
PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED, context);
}
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (!isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
continue;
}

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_FOREGROUND, context);
}
}

return permissionOrAppOpChanged;
}"
678,"public void endLocal(int address, RegisterSpec endedLocal,
Disposition disposition) {
if (DEBUG) {
System.err.printf(""%04x end %s\n"", address, endedLocal);
}

int regNum = endedLocal.getReg();

endedLocal = filterSpec(endedLocal);
aboutToProcess(address, regNum);

int endAt = endIndices[regNum];

<start>if (endAt >= 0) {
//comment
//comment
//comment
//comment
return;
}<end>

//comment
if (checkForEmptyRange(address, endedLocal)) {
return;
}

add(address, disposition, endedLocal);
}","public void endLocal(int address, RegisterSpec endedLocal,
Disposition disposition) {
if (DEBUG) {
System.err.printf(""%04x end %s\n"", address, endedLocal);
}

int regNum = endedLocal.getReg();

endedLocal = filterSpec(endedLocal);
aboutToProcess(address, regNum);

int endAt = endIndices[regNum];

<start>if (endAt >= 0) {
//comment
//comment
//comment
//comment
return;
}<end>

//comment
if (checkForEmptyRange(address, endedLocal)) {
return;
}

add(address, disposition, endedLocal);
}"
679,"String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {
//comment
ImapResponse response = readResponse();
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
}
//comment
<start>mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);<end>
}
return tag;
}","String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {
//comment
ImapResponse response = readResponse();
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
}
//comment
<start>mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);<end>
}
return tag;
}"
681,"    static boolean hangupRingingCall(Call ringing) {
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

if (state == Call.State.INCOMING) {
//comment
log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
} else if (state == Call.State.WAITING) {
//comment
//comment
//comment
//comment
//comment
//comment
if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
//comment
//comment
<start>log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");
final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
notifier.sendCdmaCallWaitingReject();<end>
return true;
} else {
//comment
//comment
<start>log(""hangupRingingCall(): call-waiting call: hangup()"");<end>
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}","    static boolean hangupRingingCall(Call ringing) {
if (DBG) log(""hangup ringing call"");
int phoneType = ringing.getPhone().getPhoneType();
Call.State state = ringing.getState();

if (state == Call.State.INCOMING) {
//comment
log(""hangupRingingCall(): regular incoming call: hangup()"");
return hangup(ringing);
} else if (state == Call.State.WAITING) {
//comment
//comment
//comment
//comment
//comment
//comment
<start>if (phoneType == PhoneConstants.PHONE_TYPE_CDMA) {<end>
//comment
//comment
//comment
log(""hangupRingingCall(): CDMA-specific call-waiting hangup"");
<start>final CallNotifier notifier = PhoneGlobals.getInstance().notifier;
notifier.sendCdmaCallWaitingReject();
return true;
} else {<end>
//comment
//comment
log(""hangupRingingCall(): call-waiting call: hangup()"");
return hangup(ringing);
}
} else {
//comment
//comment
//comment
//comment
//comment
Log.w(LOG_TAG, ""hangupRingingCall: no INCOMING or WAITING call"");
return false;
}
}"
682,"private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
<start>final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);<end>

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}","private void showNotifications(List<Rec> recs) {
createNotificationChannel();

final int recCount = recs.size();
for (int i = 0; i < recCount; i++) {
final Rec rec = recs.get(i);

//comment
final PendingIntent dialog = PendingIntent.getActivity(mContext, 0,
newDialogIntent(rec), 0);

//comment
<start>final PendingIntent deny = PendingIntent.getBroadcast(mContext, 0,
new Intent(ApprovalReceiver.ACTION_DENY, rec.report.getUri(),
mContext, ApprovalReceiver.class),
0);<end>

//comment
final Notification notification = new Notification.Builder(mContext)
.setStyle(new Notification.BigTextStyle())
.setContentTitle(
mContext.getString(R.string.incident_report_notification_title))
.setContentText(
mContext.getString(R.string.incident_report_notification_text,
rec.label))
.setSmallIcon(R.drawable.ic_bug_report_black_24dp)
.setWhen(rec.report.getTimestamp())
.setGroup(Constants.INCIDENT_NOTIFICATION_GROUP_KEY)
.setChannelId(Constants.INCIDENT_NOTIFICATION_CHANNEL_ID)
.setSortKey(getSortKey(rec.report.getTimestamp()))
.setContentIntent(dialog)
.setDeleteIntent(deny)
.setColor(mContext.getColor(
android.R.color.system_notification_accent_color))
.extend(new Notification.TvExtender())
.build();

//comment
mNm.notify(rec.report.getUri().toString(), Constants.INCIDENT_NOTIFICATION_ID,
notification);
}
}"
684,"boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
<start>selector.setComponent(null);<end>
}
//comment
if (tab != null) {
<start>if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}<end>
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}","boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}
//comment
<start>if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}<end>
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}"
690,"    @NonNull
private AppSearchUserInstance createUserInstance(
@NonNull Context userContext,
@NonNull UserHandle userHandle,
@NonNull AppSearchConfig config)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
InitializeStats.Builder initStatsBuilder = new InitializeStats.Builder();

//comment
<start>PlatformLogger logger = new PlatformLogger(userContext, config);<end>

File appSearchDir = getAppSearchDir(userHandle);
File icingDir = new File(appSearchDir, ""icing"");
Log.i(TAG, ""Creating new AppSearch instance at: "" + icingDir);
AppSearchImpl appSearchImpl = AppSearchImpl.create(
icingDir,
new FrameworkLimitConfig(config),
initStatsBuilder,
new FrameworkOptimizeStrategy(config));

long prepareVisibilityStoreLatencyStartMillis = SystemClock.elapsedRealtime();
VisibilityStoreImpl visibilityStore =
VisibilityStoreImpl.create(appSearchImpl, userContext);
long prepareVisibilityStoreLatencyEndMillis = SystemClock.elapsedRealtime();

initStatsBuilder
.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis))
.setPrepareVisibilityStoreLatencyMillis(
(int)
(prepareVisibilityStoreLatencyEndMillis
- prepareVisibilityStoreLatencyStartMillis));
logger.logStats(initStatsBuilder.build());

return new AppSearchUserInstance(logger, appSearchImpl, visibilityStore);
}","    @NonNull
private AppSearchUserInstance createUserInstance(
@NonNull Context userContext,
@NonNull UserHandle userHandle,
@NonNull AppSearchConfig config)
throws AppSearchException {
long totalLatencyStartMillis = SystemClock.elapsedRealtime();
InitializeStats.Builder initStatsBuilder = new InitializeStats.Builder();

//comment
<start>PlatformLogger logger = new PlatformLogger(userContext, config);<end>

<start>File appSearchDir = getAppSearchDir(userHandle);
File icingDir = new File(appSearchDir, ""icing"");<end>
Log.i(TAG, ""Creating new AppSearch instance at: "" + icingDir);
<start>AppSearchImpl appSearchImpl = AppSearchImpl.create(
icingDir,
new FrameworkLimitConfig(config),
initStatsBuilder,
new FrameworkOptimizeStrategy(config));<end>

long prepareVisibilityStoreLatencyStartMillis = SystemClock.elapsedRealtime();
<start>VisibilityStoreImpl visibilityStore =
VisibilityStoreImpl.create(appSearchImpl, userContext);<end>
long prepareVisibilityStoreLatencyEndMillis = SystemClock.elapsedRealtime();

initStatsBuilder
.setTotalLatencyMillis(
(int) (SystemClock.elapsedRealtime() - totalLatencyStartMillis))
.setPrepareVisibilityStoreLatencyMillis(
(int)
(prepareVisibilityStoreLatencyEndMillis
- prepareVisibilityStoreLatencyStartMillis));
logger.logStats(initStatsBuilder.build());

<start>return new AppSearchUserInstance(logger, appSearchImpl, visibilityStore);<end>
}"
693,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);<end>

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
<start>SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);<end>

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
696,"@RequiresApi(23)
public Icon toIcon() {
Icon icon;
switch (mType) {
case TYPE_UNKOWN:
//comment
return (Icon) mObj1;
<start>case TYPE_BITMAP:
icon = Icon.createWithBitmap((Bitmap) mObj1);<end>
break;
case TYPE_ADAPTIVE_BITMAP:
if (Build.VERSION.SDK_INT >= 26) {
icon = Icon.createWithAdaptiveBitmap((Bitmap) mObj1);
} else {
icon = Icon.createWithBitmap(
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
}
break;
case TYPE_RESOURCE:
icon = Icon.createWithResource((String) mObj1, mInt1);
break;
case TYPE_DATA:
icon = Icon.createWithData((byte[]) mObj1, mInt1, mInt2);
break;
case TYPE_URI:
icon = Icon.createWithContentUri((String) mObj1);
break;
default:
throw new IllegalArgumentException(""Unknown type"");
}
if (mTintList != null) {
icon.setTintList(mTintList);
}
if (mTintMode != DEFAULT_TINT_MODE) {
icon.setTintMode(mTintMode);
}
return icon;
}","@RequiresApi(23)
public Icon toIcon() {
Icon icon;
switch (mType) {
<start>case TYPE_UNKOWN:
//comment
return (Icon) mObj1;<end>
case TYPE_BITMAP:
icon = Icon.createWithBitmap((Bitmap) mObj1);
break;
case TYPE_ADAPTIVE_BITMAP:
if (Build.VERSION.SDK_INT >= 26) {
icon = Icon.createWithAdaptiveBitmap((Bitmap) mObj1);
} else {
icon = Icon.createWithBitmap(
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
}
break;
case TYPE_RESOURCE:
icon = Icon.createWithResource((String) mObj1, mInt1);
break;
case TYPE_DATA:
icon = Icon.createWithData((byte[]) mObj1, mInt1, mInt2);
break;
case TYPE_URI:
icon = Icon.createWithContentUri((String) mObj1);
break;
default:
throw new IllegalArgumentException(""Unknown type"");
}
if (mTintList != null) {
icon.setTintList(mTintList);
}
if (mTintMode != DEFAULT_TINT_MODE) {
icon.setTintMode(mTintMode);
}
return icon;
}"
698,"private void handleBootCompleted() {
//comment
//comment
//comment
int numMoved = moveOutboxMessagesToFailedBox();
if (numMoved > 0) {
MessagingNotification.notifySendFailed(getApplicationContext(), true);
}

//comment
sendFirstQueuedMessage();

//comment
<start>MessagingNotification.blockingUpdateNewMessageIndicator(
this, MessagingNotification.THREAD_ALL, false);<end>
}","private void handleBootCompleted() {
//comment
//comment
//comment
int numMoved = moveOutboxMessagesToFailedBox();
if (numMoved > 0) {
MessagingNotification.notifySendFailed(getApplicationContext(), true);
}

//comment
sendFirstQueuedMessage();

//comment
<start>MessagingNotification.blockingUpdateNewMessageIndicator(
this, MessagingNotification.THREAD_ALL, false);<end>
}"
699,"private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
<start>writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();<end>

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}","private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
<start>IOUtils.copy(inStream, base64Out);
base64Out.close();<end>

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}"
705,"@Override
public Map<String, Object> loadInBackground() {
final Map<String, Object> result = new HashMap<>();

final Mailbox mailbox = Mailbox.restoreMailboxWithId(getContext(), mMailboxId);
result.put(RESULT_KEY_MAILBOX, mailbox);
result.put(RESULT_KEY_MAX_LOOKBACK, 0);

if (mailbox == null) {
return result;
}

//comment
final Long policyKey = Utility.getFirstRowLong(getContext(),
ContentUris.withAppendedId(Account.CONTENT_URI, mailbox.mAccountKey),
POLICY_KEY_PROJECTION, null, null, null, POLICY_KEY_COLUMN);
<start>if (policyKey == null) {
//comment
return result;
}<end>

final int maxLookback = Utility.getFirstRowInt(getContext(),
ContentUris.withAppendedId(Policy.CONTENT_URI, policyKey),
MAX_EMAIL_LOOKBACK_PROJECTION, null, null, null,
MAX_EMAIL_LOOKBACK_COLUMN, 0);
result.put(RESULT_KEY_MAX_LOOKBACK, maxLookback);

return result;
}","@Override
public Map<String, Object> loadInBackground() {
final Map<String, Object> result = new HashMap<>();

final Mailbox mailbox = Mailbox.restoreMailboxWithId(getContext(), mMailboxId);
result.put(RESULT_KEY_MAILBOX, mailbox);
result.put(RESULT_KEY_MAX_LOOKBACK, 0);

if (mailbox == null) {
return result;
}

//comment
final Long policyKey = Utility.getFirstRowLong(getContext(),
ContentUris.withAppendedId(Account.CONTENT_URI, mailbox.mAccountKey),
POLICY_KEY_PROJECTION, null, null, null, POLICY_KEY_COLUMN);
<start>if (policyKey == null) {
//comment
return result;<end>
}

final int maxLookback = Utility.getFirstRowInt(getContext(),
ContentUris.withAppendedId(Policy.CONTENT_URI, policyKey),
MAX_EMAIL_LOOKBACK_PROJECTION, null, null, null,
MAX_EMAIL_LOOKBACK_COLUMN, 0);
result.put(RESULT_KEY_MAX_LOOKBACK, maxLookback);

return result;
}"
706,"@Override
public void onReceive(Context context, Intent intent) {
if (intent.getAction().equals(WAP_PUSH_DELIVER_ACTION)
&& ContentType.MMS_MESSAGE.equals(intent.getType())) {
if (LOCAL_LOGV) {
Log.v(TAG, ""Received PUSH Intent: "" + intent);
}

//comment
//comment
<start>PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);<end>
PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
""MMS PushReceiver"");
wl.acquire(5000);
new ReceivePushTask(context).execute(intent);
}
}","@Override
public void onReceive(Context context, Intent intent) {
if (intent.getAction().equals(WAP_PUSH_DELIVER_ACTION)
&& ContentType.MMS_MESSAGE.equals(intent.getType())) {
if (LOCAL_LOGV) {
Log.v(TAG, ""Received PUSH Intent: "" + intent);
}

//comment
//comment
<start>PowerManager pm = (PowerManager)context.getSystemService(Context.POWER_SERVICE);
PowerManager.WakeLock wl = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK,
""MMS PushReceiver"");
wl.acquire(5000);<end>
new ReceivePushTask(context).execute(intent);
}
}"
709,"protected Entry getEntry(String mimeType, Intent intent) {
Entry entry = mCache.get(mimeType);
if (entry != null) return entry;
entry = new Entry();

if (SipAddress.CONTENT_ITEM_TYPE.equals(mimeType)
&& !PhoneCapabilityTester.isSipPhone(mContext)) {
intent = null;
}

if (intent != null) {
final List<ResolveInfo> matches = mPackageManager.queryIntentActivities(intent,
PackageManager.MATCH_DEFAULT_ONLY);

//comment
<start>ResolveInfo bestResolve = null;
final int size = matches.size();
if (size == 1) {
bestResolve = matches.get(0);
} else if (size > 1) {
bestResolve = getBestResolve(intent, matches);
}<end>

if (bestResolve != null) {
final Drawable icon = bestResolve.loadIcon(mPackageManager);

entry.bestResolve = bestResolve;
entry.icon = icon;
}
}

mCache.put(mimeType, entry);
return entry;
}","protected Entry getEntry(String mimeType, Intent intent) {
Entry entry = mCache.get(mimeType);
if (entry != null) return entry;
entry = new Entry();

if (SipAddress.CONTENT_ITEM_TYPE.equals(mimeType)
&& !PhoneCapabilityTester.isSipPhone(mContext)) {
intent = null;
}

if (intent != null) {
final List<ResolveInfo> matches = mPackageManager.queryIntentActivities(intent,
PackageManager.MATCH_DEFAULT_ONLY);

//comment
<start>ResolveInfo bestResolve = null;
final int size = matches.size();
if (size == 1) {
bestResolve = matches.get(0);
} else if (size > 1) {
bestResolve = getBestResolve(intent, matches);
}<end>

if (bestResolve != null) {
final Drawable icon = bestResolve.loadIcon(mPackageManager);

entry.bestResolve = bestResolve;
entry.icon = icon;
}
}

mCache.put(mimeType, entry);
return entry;
}"
710,"@Override
public AssetFileDescriptor openAssetFile(final Uri uri, final String mode) {
if (null == mode || !""r"".equals(mode)) return null;

final int match = matchUri(uri);
if (DICTIONARY_V1_DICT_INFO != match && DICTIONARY_V2_DATAFILE != match) {
//comment
Log.w(TAG, ""Unsupported URI for openAssetFile : "" + uri);
return null;
}
final String wordlistId = uri.getLastPathSegment();
final String clientId = getClientId(uri);
final ContentValues wordList = getWordlistMetadataForWordlistId(clientId, wordlistId);

if (null == wordList) return null;

try {
final int status = wordList.getAsInteger(MetadataDbHelper.STATUS_COLUMN);
if (MetadataDbHelper.STATUS_DELETING == status) {
//comment
//comment
//comment
//comment
final AssetFileDescriptor afd = getContext().getResources().openRawResourceFd(
R.raw.empty);
return afd;
} else {
final String localFilename =
wordList.getAsString(MetadataDbHelper.LOCAL_FILENAME_COLUMN);
final File f = getContext().getFileStreamPath(localFilename);
final ParcelFileDescriptor pfd =
ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
return new AssetFileDescriptor(pfd, 0, pfd.getStatSize());
}
<start>} catch (FileNotFoundException e) {<end>
//comment
}
<start>return null;<end>
}","@Override
public AssetFileDescriptor openAssetFile(final Uri uri, final String mode) {
if (null == mode || !""r"".equals(mode)) return null;

final int match = matchUri(uri);
if (DICTIONARY_V1_DICT_INFO != match && DICTIONARY_V2_DATAFILE != match) {
//comment
Log.w(TAG, ""Unsupported URI for openAssetFile : "" + uri);
return null;
}
final String wordlistId = uri.getLastPathSegment();
final String clientId = getClientId(uri);
final ContentValues wordList = getWordlistMetadataForWordlistId(clientId, wordlistId);

if (null == wordList) return null;

try {
final int status = wordList.getAsInteger(MetadataDbHelper.STATUS_COLUMN);
if (MetadataDbHelper.STATUS_DELETING == status) {
//comment
//comment
//comment
//comment
final AssetFileDescriptor afd = getContext().getResources().openRawResourceFd(
R.raw.empty);
return afd;
} else {
final String localFilename =
wordList.getAsString(MetadataDbHelper.LOCAL_FILENAME_COLUMN);
final File f = getContext().getFileStreamPath(localFilename);
final ParcelFileDescriptor pfd =
ParcelFileDescriptor.open(f, ParcelFileDescriptor.MODE_READ_ONLY);
return new AssetFileDescriptor(pfd, 0, pfd.getStatSize());
}
<start>} catch (FileNotFoundException e) {
//comment
}
return null;<end>
}"
713,"public Range getWordRangeAtCursor(final String sep, final int additionalPrecedingWordsCount) {
mIC = mParent.getCurrentInputConnection();
if (mIC == null || sep == null) {
return null;
}
final CharSequence before = mIC.getTextBeforeCursor(1000,
InputConnection.GET_TEXT_WITH_STYLES);
final CharSequence after = mIC.getTextAfterCursor(1000,
InputConnection.GET_TEXT_WITH_STYLES);
if (before == null || after == null) {
return null;
}

//comment
//comment
int count = additionalPrecedingWordsCount;
int startIndexInBefore = before.length();
boolean isStoppingAtWhitespace = true;
while (true) {
while (startIndexInBefore > 0) {
final int codePoint = Character.codePointBefore(before, startIndexInBefore);
if (isStoppingAtWhitespace == isSeparator(codePoint, sep)) {
break;
}
--startIndexInBefore;
if (Character.isSupplementaryCodePoint(codePoint)) {
--startIndexInBefore;
}
}
//comment
//comment
//comment
if (isStoppingAtWhitespace && (--count < 0)) {
break;
}
isStoppingAtWhitespace = !isStoppingAtWhitespace;
}

//comment
<start>int endIndexInAfter = -1;<end>
while (++endIndexInAfter < after.length()) {
final int codePoint = Character.codePointAt(after, endIndexInAfter);
if (isSeparator(codePoint, sep)) {
<start>break;<end>
}
if (Character.isSupplementaryCodePoint(codePoint)) {
++endIndexInAfter;
}
}

final SpannableString word = new SpannableString(TextUtils.concat(
before.subSequence(startIndexInBefore, before.length()),
after.subSequence(0, endIndexInAfter)));
return new Range(before.length() - startIndexInBefore, endIndexInAfter, word);
}","public Range getWordRangeAtCursor(final String sep, final int additionalPrecedingWordsCount) {
mIC = mParent.getCurrentInputConnection();
if (mIC == null || sep == null) {
return null;
}
final CharSequence before = mIC.getTextBeforeCursor(1000,
InputConnection.GET_TEXT_WITH_STYLES);
final CharSequence after = mIC.getTextAfterCursor(1000,
InputConnection.GET_TEXT_WITH_STYLES);
if (before == null || after == null) {
return null;
}

//comment
//comment
int count = additionalPrecedingWordsCount;
int startIndexInBefore = before.length();
boolean isStoppingAtWhitespace = true;
while (true) {
while (startIndexInBefore > 0) {
final int codePoint = Character.codePointBefore(before, startIndexInBefore);
if (isStoppingAtWhitespace == isSeparator(codePoint, sep)) {
break;
}
--startIndexInBefore;
if (Character.isSupplementaryCodePoint(codePoint)) {
--startIndexInBefore;
}
}
//comment
//comment
//comment
if (isStoppingAtWhitespace && (--count < 0)) {
break;
}
isStoppingAtWhitespace = !isStoppingAtWhitespace;
}

//comment
int endIndexInAfter = -1;
<start>while (++endIndexInAfter < after.length()) {
final int codePoint = Character.codePointAt(after, endIndexInAfter);
if (isSeparator(codePoint, sep)) {
break;
}
if (Character.isSupplementaryCodePoint(codePoint)) {
++endIndexInAfter;
}
}<end>

final SpannableString word = new SpannableString(TextUtils.concat(
before.subSequence(startIndexInBefore, before.length()),
after.subSequence(0, endIndexInAfter)));
return new Range(before.length() - startIndexInBefore, endIndexInAfter, word);
}"
715,"    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
<start>} else {<end>
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}","    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
<start>if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}<end>

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}"
717,"    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
} else if (mShiftKeyState.isChording()) {
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
<start>} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;<end>
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
<start>toggleShiftInSymbols();<end>
}
}
mShiftKeyState.onRelease();
}","    private void onReleaseShift(final boolean withSliding) {
<start>if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {<end>
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
<start>} else if (mIsAlphabetMode) {<end>
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
} else if (mShiftKeyState.isChording()) {
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
<start>} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();<end>
}"
719,"    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
final Bundle accountExtras = account.getExtras();
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
<start>final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);<end>
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}","    public static boolean isTachyonEnabled(Context context) {
//comment
if (!PermissionsUtil.hasPermission(context, android.Manifest.permission.READ_PHONE_STATE)
|| !CompatUtils.isNCompatible()) {
return false;
}
TelecomManager telecommMgr = (TelecomManager)
context.getSystemService(Context.TELECOM_SERVICE);
if (telecommMgr == null) {
return false;
}
try {
List<PhoneAccountHandle> accountHandles = telecommMgr.getCallCapablePhoneAccounts();
for (PhoneAccountHandle accountHandle : accountHandles) {
PhoneAccount account = telecommMgr.getPhoneAccount(accountHandle);
if (account == null) {
continue;
}
//comment
final Bundle accountExtras = account.getExtras();
final boolean deviceEnabled = accountExtras != null && accountExtras.getBoolean(
EXTRA_SUPPORTS_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Device video fallback config: "" + deviceEnabled);
}

//comment
final PersistableBundle carrierConfig = context.getSystemService(
CarrierConfigManager.class).getConfig();
final boolean carrierEnabled =
carrierConfig != null && carrierConfig.getBoolean(
CONFIG_ALLOW_VIDEO_CALLING_FALLBACK);
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Carrier video fallback config: "" + carrierEnabled);
}

//comment
<start>final boolean experimentEnabled = Flags.getInstance().getBoolean(
Experiments.QUICK_CONTACT_VIDEO_CALL);<end>
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Experiment video fallback config: "" + experimentEnabled);
}

//comment
return deviceEnabled && carrierEnabled && experimentEnabled;
}
return false;
} catch (SecurityException e) {
FeedbackHelper.sendFeedback(context, TAG,
""Security exception when getting call capable phone accounts"", e);
return false;
}
}"
721,"    private static ArrayList<DownloadRecord> getDownloadRecordsForCompletedDownloadInfo(
final Context context, final CompletedDownloadInfo downloadInfo) {
//comment
synchronized(sSharedIdProtector) {
final ArrayList<DownloadRecord> downloadRecords =
MetadataDbHelper.getDownloadRecordsForDownloadId(context,
downloadInfo.mDownloadId);
//comment
<start>boolean hasMetadata = false;<end>
for (DownloadRecord record : downloadRecords) {
if (null == record.mAttributes) {
hasMetadata = true;
break;
}
}
if (hasMetadata) {
writeMetadataDownloadId(context, downloadInfo.mUri, NOT_AN_ID);
MetadataDbHelper.saveLastUpdateTimeOfUri(context, downloadInfo.mUri);
}
return downloadRecords;
}
}","    private static ArrayList<DownloadRecord> getDownloadRecordsForCompletedDownloadInfo(
final Context context, final CompletedDownloadInfo downloadInfo) {
//comment
synchronized(sSharedIdProtector) {
final ArrayList<DownloadRecord> downloadRecords =
MetadataDbHelper.getDownloadRecordsForDownloadId(context,
downloadInfo.mDownloadId);
//comment
<start>boolean hasMetadata = false;
for (DownloadRecord record : downloadRecords) {
if (null == record.mAttributes) {
hasMetadata = true;
break;
}
}
if (hasMetadata) {
writeMetadataDownloadId(context, downloadInfo.mUri, NOT_AN_ID);
MetadataDbHelper.saveLastUpdateTimeOfUri(context, downloadInfo.mUri);
}<end>
return downloadRecords;
}
}"
722,"    @Override
public void displayPreference(PreferenceScreen screen) {
super.displayPreference(screen);
final LayoutPreference preference = screen.findPreference(getPreferenceKey());

if (isAvailable()) {
<start>int delayMillis = getSharedPreferenceForDelayValue();
//comment
//comment
mSeekBar = preference.findViewById(R.id.autoclick_delay);
mSeekBar.setMax(delayToSeekBarProgress(MAX_AUTOCLICK_DELAY_MS));
mSeekBar.setProgress(delayToSeekBarProgress(delayMillis));
mSeekBar.setOnSeekBarChangeListener(mSeekBarChangeListener);<end>

mDelayLabel = preference.findViewById(R.id.current_label);
mDelayLabel.setText(delayTimeToString(delayMillis));

mShorter = preference.findViewById(R.id.shorter);
mShorter.setOnClickListener(v -> {
minusDelayByImageView();
});

mLonger = preference.findViewById(R.id.longer);
mLonger.setOnClickListener(v -> {
plusDelayByImageView();
});
}
}","    @Override
public void displayPreference(PreferenceScreen screen) {
super.displayPreference(screen);
final LayoutPreference preference = screen.findPreference(getPreferenceKey());

if (isAvailable()) {
<start>int delayMillis = getSharedPreferenceForDelayValue();
//comment
//comment
mSeekBar = preference.findViewById(R.id.autoclick_delay);
mSeekBar.setMax(delayToSeekBarProgress(MAX_AUTOCLICK_DELAY_MS));
mSeekBar.setProgress(delayToSeekBarProgress(delayMillis));
mSeekBar.setOnSeekBarChangeListener(mSeekBarChangeListener);

mDelayLabel = preference.findViewById(R.id.current_label);
mDelayLabel.setText(delayTimeToString(delayMillis));

mShorter = preference.findViewById(R.id.shorter);
mShorter.setOnClickListener(v -> {
minusDelayByImageView();
});<end>

<start>mLonger = preference.findViewById(R.id.longer);
mLonger.setOnClickListener(v -> {
plusDelayByImageView();
});<end>
}
}"
725,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
<start>if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}<end>
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
<start>if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}<end>
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
729,"public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
<start>ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);<end>
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}","public void run() {
DownloadManager downloadManager = DownloadManager.getInstance();
boolean autoDownload = allowAutoDownload();
try {
if (LOCAL_LOGV) {
Log.v(TAG, ""Notification transaction launched: "" + this);
}

//comment
//comment
//comment
int status = STATUS_DEFERRED;
//comment
if (!autoDownload) {
downloadManager.markState(mUri, DownloadManager.STATE_UNSTARTED);
sendNotifyRespInd(status);
return;
}

downloadManager.markState(mUri, DownloadManager.STATE_DOWNLOADING);

if (LOCAL_LOGV) {
Log.v(TAG, ""Content-Location: "" + mContentLocation);
}

byte[] retrieveConfData = null;
//comment
//comment
try {
retrieveConfData = getPdu(mContentLocation);
} catch (IOException e) {
mTransactionState.setState(FAILED);
}

if (retrieveConfData != null) {
GenericPdu pdu = new PduParser(
retrieveConfData, PduParserUtil.shouldParseContentDisposition()).parse();
if ((pdu == null) || (pdu.getMessageType() != MESSAGE_TYPE_RETRIEVE_CONF)) {
Log.e(TAG, ""Invalid M-RETRIEVE.CONF PDU. "" +
(pdu != null ? ""message type: "" + pdu.getMessageType() : ""null pdu""));
mTransactionState.setState(FAILED);
status = STATUS_UNRECOGNIZED;
} else {
//comment
PduPersister p = PduPersister.getPduPersister(mContext);
Uri uri = p.persist(pdu, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
<start>ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);<end>
SqliteWrapper.update(mContext, mContext.getContentResolver(),
uri, values, null, null);

//comment
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);
Log.v(TAG, ""NotificationTransaction received new mms message: "" + uri);
//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
Threads.OBSOLETE_THREADS_URI, null, null);

//comment
mUri = uri;
status = STATUS_RETRIEVED;
}
}

if (LOCAL_LOGV) {
Log.v(TAG, ""status=0x"" + Integer.toHexString(status));
}

//comment
switch (status) {
case STATUS_RETRIEVED:
mTransactionState.setState(SUCCESS);
break;
case STATUS_DEFERRED:
//comment
if (mTransactionState.getState() == INITIALIZED) {
mTransactionState.setState(SUCCESS);
}
break;
}

sendNotifyRespInd(status);

//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, mUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
mTransactionState.setContentUri(mUri);
if (!autoDownload) {
//comment
//comment
mTransactionState.setState(SUCCESS);
}
if (mTransactionState.getState() != SUCCESS) {
mTransactionState.setState(FAILED);
Log.e(TAG, ""NotificationTransaction failed."");
}
notifyObservers();
}
}"
730,"        @Override
public void onTabChanged(String tabId) {
mSlotId = getSlotIndexFromTag(tabId);

//comment
<start>updatePreferences();<end>
}","<start>        @Override
public void onTabChanged(String tabId) {<end>
mSlotId = getSlotIndexFromTag(tabId);

//comment
<start>updatePreferences();
}<end>"
731,"private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

<start>if (inStream == null) {
//comment
final Uri fileUri = Uri.parse(attachment.getContentUri());
inStream = context.getContentResolver().openInputStream(fileUri);
}<end>
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}","private static void writeOneAttachment(Context context, Writer writer, OutputStream out,
Attachment attachment) throws IOException, MessagingException {
writeHeader(writer, ""Content-Type"",
attachment.mMimeType + "";\n name=\"""" + attachment.mFileName + ""\"""");
writeHeader(writer, ""Content-Transfer-Encoding"", ""base64"");
//comment
//comment
if ((attachment.mFlags & Attachment.FLAG_ICS_ALTERNATIVE_PART) == 0) {
writeHeader(writer, ""Content-Disposition"",
""attachment;""
+ ""\n filename=\"""" + attachment.mFileName + ""\"";""
+ ""\n size="" + Long.toString(attachment.mSize));
}
if (attachment.mContentId != null) {
writeHeader(writer, ""Content-ID"", attachment.mContentId);
}
writer.append(""\r\n"");

//comment
InputStream inStream = null;
try {
//comment
if (attachment.mContentBytes != null) {
inStream = new ByteArrayInputStream(attachment.mContentBytes);
} else {
//comment
final String cachedFile = attachment.getCachedFileUri();
if (!TextUtils.isEmpty(cachedFile)) {
final Uri cachedFileUri = Uri.parse(cachedFile);
try {
inStream = context.getContentResolver().openInputStream(cachedFileUri);
} catch (FileNotFoundException e) {
//comment
inStream = null;

LogUtils.d(TAG, ""Rfc822Output#writeOneAttachment(), failed to load"" +
""cached file, falling back to: %s"", attachment.getContentUri());
}
}

if (inStream == null) {
//comment
<start>final Uri fileUri = Uri.parse(attachment.getContentUri());<end>
inStream = context.getContentResolver().openInputStream(fileUri);
}
}
//comment
writer.flush();
Base64OutputStream base64Out = new Base64OutputStream(
out, Base64.CRLF | Base64.NO_CLOSE);
//comment
IOUtils.copy(inStream, base64Out);
base64Out.close();

//comment
//comment
//comment
out.write('\r');
out.write('\n');
out.flush();
}
catch (FileNotFoundException fnfe) {
//comment
LogUtils.e(TAG, fnfe, ""Rfc822Output#writeOneAttachment(), FileNotFoundException"" +
""when sending attachment"");
}
catch (IOException ioe) {
LogUtils.e(TAG, ioe, ""Rfc822Output#writeOneAttachment(), IOException"" +
""when sending attachment"");
throw new MessagingException(""Invalid attachment."", ioe);
}
}"
734,"public boolean lookup(LookupRequest req) throws IOException {
//comment
if (lookupInternal(req.key, mActiveHashStart)) {
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
if (lookupInternal(req.key, mInactiveHashStart)) {
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
<start>|| mActiveEntries * 2 >= mMaxEntries) {
return true;<end>
}
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}","public boolean lookup(LookupRequest req) throws IOException {
//comment
if (lookupInternal(req.key, mActiveHashStart)) {
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
if (lookupInternal(req.key, mInactiveHashStart)) {
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
<start>if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
return true;
}<end>
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}"
736,"public Bundle toBundle() {
Bundle bundle = new Bundle();
switch (mType) {
case TYPE_BITMAP:
case TYPE_ADAPTIVE_BITMAP:
bundle.putParcelable(EXTRA_OBJ, (Bitmap) mObj1);
break;
case TYPE_UNKOWN:
//comment
bundle.putParcelable(EXTRA_OBJ, (Parcelable) mObj1);
break;
case TYPE_RESOURCE:
case TYPE_URI:
bundle.putString(EXTRA_OBJ, (String) mObj1);
break;
case TYPE_DATA:
bundle.putByteArray(EXTRA_OBJ, (byte[]) mObj1);
break;
default:
throw new IllegalArgumentException(""Invalid icon"");
}
bundle.putInt(EXTRA_TYPE, mType);
bundle.putInt(EXTRA_INT1, mInt1);
bundle.putInt(EXTRA_INT2, mInt2);
if (mTintList != null) {
bundle.putParcelable(EXTRA_TINT_LIST, mTintList);
}
if (mTintMode != DEFAULT_TINT_MODE) {
bundle.putString(EXTRA_TINT_MODE, mTintMode.name());
}
return bundle;
}","public Bundle toBundle() {
Bundle bundle = new Bundle();
switch (mType) {
case TYPE_BITMAP:
case TYPE_ADAPTIVE_BITMAP:
bundle.putParcelable(EXTRA_OBJ, (Bitmap) mObj1);
break;
<start>case TYPE_UNKOWN:
//comment
bundle.putParcelable(EXTRA_OBJ, (Parcelable) mObj1);
break;<end>
case TYPE_RESOURCE:
case TYPE_URI:
bundle.putString(EXTRA_OBJ, (String) mObj1);
break;
case TYPE_DATA:
bundle.putByteArray(EXTRA_OBJ, (byte[]) mObj1);
break;
default:
throw new IllegalArgumentException(""Invalid icon"");
}
bundle.putInt(EXTRA_TYPE, mType);
bundle.putInt(EXTRA_INT1, mInt1);
bundle.putInt(EXTRA_INT2, mInt2);
if (mTintList != null) {
bundle.putParcelable(EXTRA_TINT_LIST, mTintList);
}
if (mTintMode != DEFAULT_TINT_MODE) {
bundle.putString(EXTRA_TINT_MODE, mTintMode.name());
}
return bundle;
}"
738,"private static void inflateBitmap(BitmapHolder holder, int requestedExtent) {
final int sampleSize =
BitmapUtil.findOptimalSampleSize(holder.originalSmallerExtent, requestedExtent);
byte[] bytes = holder.bytes;
if (bytes == null || bytes.length == 0) {
return;
}

if (sampleSize == holder.decodedSampleSize) {
//comment
//comment
if (holder.bitmapRef != null) {
holder.bitmap = holder.bitmapRef.get();
if (holder.bitmap != null) {
return;
}
}
}

try {
Bitmap bitmap = BitmapUtil.decodeBitmapFromBytes(bytes, sampleSize);

//comment
//comment
//comment
//comment
final int height = bitmap.getHeight();
final int width = bitmap.getWidth();

//comment
//comment
//comment
<start>if (height != width && Math.min(height, width) <= mThumbnailSize * 2) {
final int dimension = Math.min(height, width);
bitmap = ThumbnailUtils.extractThumbnail(bitmap, dimension, dimension);
}<end>
//comment
if (DEBUG_SIZES) {
<start>Bitmap original = bitmap;<end>
bitmap = bitmap.copy(bitmap.getConfig(), true);
original.recycle();
Canvas canvas = new Canvas(bitmap);
Paint paint = new Paint();
paint.setTextSize(16);
paint.setColor(Color.BLUE);
paint.setStyle(Style.FILL);
canvas.drawRect(0.0f, 0.0f, 50.0f, 20.0f, paint);
paint.setColor(Color.WHITE);
paint.setAntiAlias(true);
canvas.drawText(bitmap.getWidth() + ""/"" + sampleSize, 0, 15, paint);
}

holder.decodedSampleSize = sampleSize;
holder.bitmap = bitmap;
holder.bitmapRef = new SoftReference<Bitmap>(bitmap);
if (DEBUG) {
Log.d(TAG, ""inflateBitmap "" + btk(bytes.length) + "" -> ""
+ bitmap.getWidth() + ""x"" + bitmap.getHeight()
+ "", "" + btk(bitmap.getByteCount()));
}
} catch (OutOfMemoryError e) {
//comment
}
}","private static void inflateBitmap(BitmapHolder holder, int requestedExtent) {
final int sampleSize =
BitmapUtil.findOptimalSampleSize(holder.originalSmallerExtent, requestedExtent);
byte[] bytes = holder.bytes;
if (bytes == null || bytes.length == 0) {
return;
}

if (sampleSize == holder.decodedSampleSize) {
//comment
//comment
if (holder.bitmapRef != null) {
holder.bitmap = holder.bitmapRef.get();
if (holder.bitmap != null) {
return;
}
}
}

try {
Bitmap bitmap = BitmapUtil.decodeBitmapFromBytes(bytes, sampleSize);

//comment
//comment
//comment
//comment
final int height = bitmap.getHeight();
final int width = bitmap.getWidth();

//comment
//comment
//comment
if (height != width && Math.min(height, width) <= mThumbnailSize * 2) {
final int dimension = Math.min(height, width);
bitmap = ThumbnailUtils.extractThumbnail(bitmap, dimension, dimension);
}
//comment
if (DEBUG_SIZES) {
<start>Bitmap original = bitmap;
bitmap = bitmap.copy(bitmap.getConfig(), true);
original.recycle();
Canvas canvas = new Canvas(bitmap);
Paint paint = new Paint();
paint.setTextSize(16);
paint.setColor(Color.BLUE);
paint.setStyle(Style.FILL);
canvas.drawRect(0.0f, 0.0f, 50.0f, 20.0f, paint);
paint.setColor(Color.WHITE);
paint.setAntiAlias(true);
canvas.drawText(bitmap.getWidth() + ""/"" + sampleSize, 0, 15, paint);<end>
}

holder.decodedSampleSize = sampleSize;
holder.bitmap = bitmap;
holder.bitmapRef = new SoftReference<Bitmap>(bitmap);
if (DEBUG) {
Log.d(TAG, ""inflateBitmap "" + btk(bytes.length) + "" -> ""
+ bitmap.getWidth() + ""x"" + bitmap.getHeight()
+ "", "" + btk(bitmap.getByteCount()));
}
} catch (OutOfMemoryError e) {
//comment
}
}"
741,"        @Override
public void onDetach() {
super.onDetach();

//comment
<start>if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
if (((AOKPPreferenceFragment) mParentFragment).mDialogFragment == this) {
((AOKPPreferenceFragment) mParentFragment).mDialogFragment = null;
}
}<end>
}","        @Override
public void onDetach() {
super.onDetach();

//comment
<start>if (mParentFragment instanceof AOKPPreferenceFragment) {
//comment
if (((AOKPPreferenceFragment) mParentFragment).mDialogFragment == this) {
((AOKPPreferenceFragment) mParentFragment).mDialogFragment = null;
}
}<end>
}"
743,"boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
<start>intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();<end>
if (selector != null) {
<start>selector.addCategory(Intent.CATEGORY_BROWSABLE);<end>
selector.setComponent(null);
}
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}","boolean startActivityForUrl(Tab tab, String url) {
Intent intent;
//comment
try {
intent = Intent.parseUri(url, Intent.URI_INTENT_SCHEME);
} catch (URISyntaxException ex) {
Log.w(""Browser"", ""Bad URI "" + url + "": "" + ex.getMessage());
return false;
}

//comment
//comment
ResolveInfo r = null;
try {
r = mActivity.getPackageManager().resolveActivity(intent, 0);
} catch (Exception e) {
return false;
}
if (r == null) {
String packagename = intent.getPackage();
if (packagename != null) {
intent = new Intent(Intent.ACTION_VIEW, Uri
.parse(""market://search?q=pname:"" + packagename));
intent.addCategory(Intent.CATEGORY_BROWSABLE);
try {
mActivity.startActivity(intent);
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
} catch (ActivityNotFoundException e) {
Log.w(""Browser"", ""No activity found to handle "" + url);
return false;
}
} else {
return false;
}
}

//comment
//comment
<start>intent.addCategory(Intent.CATEGORY_BROWSABLE);
intent.setComponent(null);
Intent selector = intent.getSelector();
if (selector != null) {
selector.addCategory(Intent.CATEGORY_BROWSABLE);
selector.setComponent(null);
}<end>
//comment
if (tab != null) {
if (tab.getAppId() == null) {
tab.setAppId(mActivity.getPackageName() + ""-"" + tab.getId());
}
intent.putExtra(Browser.EXTRA_APPLICATION_ID, tab.getAppId());
}
//comment
//comment
//comment
Matcher m = UrlUtils.ACCEPTED_URI_SCHEMA.matcher(url);
if (m.matches() && !isSpecializedHandlerAvailable(intent)) {
return false;
}
try {
intent.putExtra(BrowserActivity.EXTRA_DISABLE_URL_OVERRIDE, true);
if (mActivity.startActivityIfNeeded(intent, -1)) {
//comment
//comment
//comment
//comment
mController.closeEmptyTab();
return true;
}
} catch (ActivityNotFoundException ex) {
//comment
//comment
}

return false;
}"
749,"    @Override
public IBinder onBind(Intent intent) {
if (mContext == null) {
mContext = this;
}
//comment
try {
<start>Device.getDeviceId(this);<end>
} catch (IOException e) {
}
return mBinder;
}","    @Override
public IBinder onBind(Intent intent) {
if (mContext == null) {
mContext = this;
}
//comment
<start>try {
Device.getDeviceId(this);
} catch (IOException e) {
}<end>
return mBinder;
}"
750,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
<start>mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);<end>
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
<start>mTransactionState.setState(TransactionState.SUCCESS);<end>
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
751,"    @Override
protected void onResume() {
super.onResume();

//comment
//comment
<start>getPreferenceScreen().setEnabled(true);<end>

ConnectivityManager cm =
(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);

mButtonDataEnabled.setChecked(cm.getMobileDataEnabled());

//comment
//comment
//comment
mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
}","    @Override
protected void onResume() {
super.onResume();

//comment
//comment
<start>getPreferenceScreen().setEnabled(true);<end>

ConnectivityManager cm =
(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);

mButtonDataEnabled.setChecked(cm.getMobileDataEnabled());

//comment
//comment
//comment
mButtonDataRoam.setChecked(mPhone.getDataRoamingEnabled());
}"
755,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate"");

ActionBar actionBar = getActionBar();
<start>actionBar.setCustomView(R.layout.stk_title);<end>
actionBar.setDisplayShowCustomEnabled(true);

//comment
<start>setContentView(R.layout.stk_menu_list);
mTitleTextView = (TextView) findViewById(R.id.title_text);<end>
mTitleIconView = (ImageView) findViewById(R.id.title_icon);
mProgressView = (ProgressBar) findViewById(R.id.progress_bar);
getListView().setOnCreateContextMenuListener(this);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver,
new IntentFilter(StkAppService.SESSION_ENDED));
initFromIntent(getIntent());
if (!SubscriptionManager.isValidSlotIndex(mSlotId)) {
finish();
return;
}
if (mState == STATE_SECONDARY) {
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate"");

ActionBar actionBar = getActionBar();
actionBar.setCustomView(R.layout.stk_title);
actionBar.setDisplayShowCustomEnabled(true);

//comment
<start>setContentView(R.layout.stk_menu_list);
mTitleTextView = (TextView) findViewById(R.id.title_text);
mTitleIconView = (ImageView) findViewById(R.id.title_icon);
mProgressView = (ProgressBar) findViewById(R.id.progress_bar);
getListView().setOnCreateContextMenuListener(this);<end>

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

LocalBroadcastManager.getInstance(this).registerReceiver(mLocalBroadcastReceiver,
new IntentFilter(StkAppService.SESSION_ENDED));
initFromIntent(getIntent());
if (!SubscriptionManager.isValidSlotIndex(mSlotId)) {
finish();
return;
}
if (mState == STATE_SECONDARY) {
appService.getStkContext(mSlotId).setPendingActivityInstance(this);
}
}"
758,"public CharSequence buildLatinWord() {
<start>final StringBuilder result = new StringBuilder();
//comment
//comment
final int length = mRandom.nextInt(mMaxWordLength - mMinWordLength) + mMinWordLength;<end>
while (result.length() < length) {
//comment
int base = mRandom.nextInt(2) == 0 ? 'A' : 'a';
<start>result.append(Character.toChars(mRandom.nextInt(26) + base));<end>
}
return result.toString();
}","public CharSequence buildLatinWord() {
final StringBuilder result = new StringBuilder();
//comment
//comment
<start>final int length = mRandom.nextInt(mMaxWordLength - mMinWordLength) + mMinWordLength;<end>
while (result.length() < length) {
//comment
int base = mRandom.nextInt(2) == 0 ? 'A' : 'a';
result.append(Character.toChars(mRandom.nextInt(26) + base));
}
return result.toString();
}"
760,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
<start>mNormalLayout.setVisibility(View.GONE);
break;<end>
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
<start>mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);<end>
break;
}
}"
761,"        public void setWatchdogAlarm(final Context context) {
//comment
setWatchdogAlarm(context, WATCHDOG_CHECK_INTERVAL, CALLBACK_TIMEOUT);
}","        public void setWatchdogAlarm(final Context context) {
//comment
<start>setWatchdogAlarm(context, WATCHDOG_CHECK_INTERVAL, CALLBACK_TIMEOUT);<end>
}"
762,"void open() throws IOException, MessagingException {
if (mTransport != null && mTransport.isOpen()) {
return;
}

try {
//comment
<start>if (mTransport == null) {
mTransport = mImapStore.cloneTransport();
}<end>

mTransport.open();

createParser();

//comment
mParser.readResponse();

//comment
ImapResponse capabilities = queryCapabilities();

boolean hasStartTlsCapability =
capabilities.contains(ImapConstants.STARTTLS);

//comment
ImapResponse newCapabilities = doStartTls(hasStartTlsCapability);
if (newCapabilities != null) {
capabilities = newCapabilities;
}

//comment
//comment
//comment
setCapabilities(capabilities);
String capabilityString = capabilities.flatten();

//comment
doSendId(isCapable(CAPABILITY_ID), capabilityString);

//comment
doLogin();

//comment
doGetNamespace(isCapable(CAPABILITY_NAMESPACE));

//comment
doGetPathSeparator();

mImapStore.ensurePrefixIsValid();
} catch (SSLException e) {
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, e, ""SSLException"");
}
throw new CertificateValidationException(e.getMessage(), e);
} catch (IOException ioe) {
//comment
//comment
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ioe, ""IOException"");
}
throw ioe;
} finally {
destroyResponses();
}
}","void open() throws IOException, MessagingException {
if (mTransport != null && mTransport.isOpen()) {
return;
}

try {
//comment
<start>if (mTransport == null) {
mTransport = mImapStore.cloneTransport();
}<end>

mTransport.open();

createParser();

//comment
mParser.readResponse();

//comment
ImapResponse capabilities = queryCapabilities();

boolean hasStartTlsCapability =
capabilities.contains(ImapConstants.STARTTLS);

//comment
ImapResponse newCapabilities = doStartTls(hasStartTlsCapability);
if (newCapabilities != null) {
capabilities = newCapabilities;
}

//comment
//comment
//comment
setCapabilities(capabilities);
String capabilityString = capabilities.flatten();

//comment
doSendId(isCapable(CAPABILITY_ID), capabilityString);

//comment
doLogin();

//comment
doGetNamespace(isCapable(CAPABILITY_NAMESPACE));

//comment
doGetPathSeparator();

mImapStore.ensurePrefixIsValid();
} catch (SSLException e) {
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, e, ""SSLException"");
}
throw new CertificateValidationException(e.getMessage(), e);
} catch (IOException ioe) {
//comment
//comment
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ioe, ""IOException"");
}
throw ioe;
} finally {
destroyResponses();
}
}"
763,"private CallStatusCode checkIfOkToInitiateOutgoingCall(int state) {
if (VDBG) log(""checkIfOkToInitiateOutgoingCall: ServiceState = "" + state);

switch (state) {
<start>case ServiceState.STATE_IN_SERVICE:
//comment
return CallStatusCode.SUCCESS;<end>

case ServiceState.STATE_POWER_OFF:
//comment
return CallStatusCode.POWER_OFF;

case ServiceState.STATE_EMERGENCY_ONLY:
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
return CallStatusCode.EMERGENCY_ONLY;

case ServiceState.STATE_OUT_OF_SERVICE:
//comment
return CallStatusCode.OUT_OF_SERVICE;

default:
throw new IllegalStateException(""Unexpected ServiceState: "" + state);
}
}","private CallStatusCode checkIfOkToInitiateOutgoingCall(int state) {
if (VDBG) log(""checkIfOkToInitiateOutgoingCall: ServiceState = "" + state);

switch (state) {
case ServiceState.STATE_IN_SERVICE:
//comment
<start>return CallStatusCode.SUCCESS;<end>

case ServiceState.STATE_POWER_OFF:
//comment
return CallStatusCode.POWER_OFF;

case ServiceState.STATE_EMERGENCY_ONLY:
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
return CallStatusCode.EMERGENCY_ONLY;

case ServiceState.STATE_OUT_OF_SERVICE:
//comment
return CallStatusCode.OUT_OF_SERVICE;

default:
throw new IllegalStateException(""Unexpected ServiceState: "" + state);
}
}"
764,"protected void onPostExecute(String result) {
//comment
if (mController.isActivityPaused()) return;
//comment
if (mController.getTabControl().getTabPosition(mTab) != -1) {
//comment
if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}
}
}","protected void onPostExecute(String result) {
//comment
if (mController.isActivityPaused()) return;
//comment
<start>if (mController.getTabControl().getTabPosition(mTab) != -1) {<end>
//comment
if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}
}
}"
765,"    @VisibleForTesting
void onContentChanged() {
//comment
//comment
<start>if (mIsForeground) {
updateAllPreferences();
} else {
mNeedPreferencesUpdate = true;
}<end>
}","    @VisibleForTesting
void onContentChanged() {
//comment
//comment
<start>if (mIsForeground) {
updateAllPreferences();
} else {
mNeedPreferencesUpdate = true;
}<end>
}"
769,"private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
<start>int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}<end>
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}","private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
<start>int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}<end>
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}"
772,"@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
<start>mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);<end>
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}","@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
<start>mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);<end>

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}"
773,"    private void dismissWhenReady() {
//comment
final long shownTime = System.currentTimeMillis() - mShowTime;
if (shownTime >= mMinDisplayTime) {
//comment
mHandler.post(mDismisser);
} else {
//comment
<start>final long sleepTime = mMinDisplayTime - shownTime;
mHandler.postDelayed(mDismisser, sleepTime);<end>
}
}","    private void dismissWhenReady() {
//comment
final long shownTime = System.currentTimeMillis() - mShowTime;
if (shownTime >= mMinDisplayTime) {
//comment
mHandler.post(mDismisser);
} else {
//comment
<start>final long sleepTime = mMinDisplayTime - shownTime;
mHandler.postDelayed(mDismisser, sleepTime);
}<end>
}"
774,"    @Override
protected View newHeaderView(Context context, int partition, Cursor cursor,
ViewGroup parent) {
LayoutInflater inflater = LayoutInflater.from(context);
View view = inflater.inflate(R.layout.directory_header, parent, false);
<start>if (!getPinnedPartitionHeadersEnabled()) {
//comment
//comment
//comment
//comment
view.setBackground(null);
}<end>
return view;
}","    @Override
protected View newHeaderView(Context context, int partition, Cursor cursor,
ViewGroup parent) {
LayoutInflater inflater = LayoutInflater.from(context);
View view = inflater.inflate(R.layout.directory_header, parent, false);
<start>if (!getPinnedPartitionHeadersEnabled()) {
//comment
//comment
//comment
//comment
view.setBackground(null);
}<end>
return view;
}"
775,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
<start>setSummaryText(KEY_IMEI, mPhone.getImei());<end>
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
<start>removePreferenceFromScreen(KEY_MEID_NUMBER);<end>
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

<start>if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {<end>
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);
}

}"
778,"static Intent getLaunchFillInIntent(Context context, long id, long start, long end,
boolean allDay) {
final Intent fillInIntent = new Intent();
String dataString = ""content://com.android.calendar/events"";
if (id != 0) {
fillInIntent.putExtra(Utils.INTENT_KEY_DETAIL_VIEW, true);
fillInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
Intent.FLAG_ACTIVITY_TASK_ON_HOME);

<start>dataString += ""/"" + id;
//comment
fillInIntent.setClass(context, EventInfoActivity.class);<end>
} else {
//comment
fillInIntent.setClass(context, AllInOneActivity.class);
}
Uri data = Uri.parse(dataString);
fillInIntent.setData(data);
fillInIntent.putExtra(EXTRA_EVENT_BEGIN_TIME, start);
fillInIntent.putExtra(EXTRA_EVENT_END_TIME, end);
fillInIntent.putExtra(EXTRA_EVENT_ALL_DAY, allDay);

return fillInIntent;
}","static Intent getLaunchFillInIntent(Context context, long id, long start, long end,
boolean allDay) {
final Intent fillInIntent = new Intent();
String dataString = ""content://com.android.calendar/events"";
<start>if (id != 0) {<end>
fillInIntent.putExtra(Utils.INTENT_KEY_DETAIL_VIEW, true);
fillInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
Intent.FLAG_ACTIVITY_TASK_ON_HOME);

dataString += ""/"" + id;
//comment
<start>fillInIntent.setClass(context, EventInfoActivity.class);<end>
} else {
//comment
fillInIntent.setClass(context, AllInOneActivity.class);
}
Uri data = Uri.parse(dataString);
fillInIntent.setData(data);
fillInIntent.putExtra(EXTRA_EVENT_BEGIN_TIME, start);
fillInIntent.putExtra(EXTRA_EVENT_END_TIME, end);
fillInIntent.putExtra(EXTRA_EVENT_ALL_DAY, allDay);

return fillInIntent;
}"
782,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
<start>notifier.silenceRinger();<end>

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
<start>notifier.silenceRinger();<end>

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
787,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
<start>final boolean speakerActivated = activateSpeakerIfDocked(phone);<end>

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
<start>final boolean speakerActivated = activateSpeakerIfDocked(phone);<end>

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {<end>
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
<start>turnOnSpeaker(app, false, true);
}<end>
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
788,"    private void onReleaseShift(final boolean withSliding) {
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);
<start>} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();<end>
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
} else if (mShiftKeyState.isChording()) {
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}","    private void onReleaseShift(final boolean withSliding) {
<start>if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
//comment
//comment
updateShiftStateForRecapitalize(mRecapitalizeMode);<end>
} else if (mIsAlphabetMode) {
final boolean isShiftLocked = mAlphabetShiftState.isShiftLocked();
mIsInAlphabetUnshiftedFromShifted = false;
if (mIsInDoubleTapShiftKey) {
//comment
//comment
mIsInDoubleTapShiftKey = false;
} else if (mLongPressShiftLockFired) {
setShiftLocked(!mAlphabetShiftState.isShiftLocked());
} else if (mShiftKeyState.isChording()) {
if (mAlphabetShiftState.isShiftLockShifted()) {
//comment
setShiftLocked(true);
} else {
//comment
setShifted(UNSHIFT);
}
//comment
//comment
mShiftKeyState.onRelease();
mSwitchActions.requestUpdatingShiftState();
return;
} else if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
//comment
setShiftLocked(true);
} else if (mAlphabetShiftState.isManualShifted() && withSliding) {
//comment
mSwitchState = SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
} else if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted()
&& (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())
&& !withSliding) {
//comment
} else if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
//comment
setShiftLocked(false);
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()
&& mShiftKeyState.isPressingOnShifted() && !withSliding) {
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
} else if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted()
&& mShiftKeyState.isPressing() && !withSliding) {
//comment
//comment
setShifted(UNSHIFT);
mIsInAlphabetUnshiftedFromShifted = true;
}
} else {
//comment
//comment
if (mShiftKeyState.isChording()) {
toggleShiftInSymbols();
}
}
mShiftKeyState.onRelease();
}"
791,"private void setViewEndMargin(View v) {
RelativeLayout.LayoutParams layoutParams =
(RelativeLayout.LayoutParams) v.getLayoutParams();
int endMargin = 0;
switch (mSupplementalActionType) {
case SUPPLEMENTAL_ACTION_NO_ACTION:
//comment
layoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);
layoutParams.removeRule(RelativeLayout.START_OF);
layoutParams.setMarginEnd(mContext.getResources().getDimensionPixelSize(
R.dimen.car_keyline_1));
break;
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_ICON:
//comment
layoutParams.addRule(RelativeLayout.START_OF, R.id.supplemental_icon_divider);
<start>layoutParams.removeRule(RelativeLayout.ALIGN_PARENT_END);<end>
layoutParams.setMarginEnd(mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4));
break;
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_EMPTY_ICON_WITH_DIVIDER:
//comment
//comment

//comment
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_vertical_line_divider_width);
//comment
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_EMPTY_ICON:
//comment
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_primary_icon_size);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_keyline_1);

layoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);
layoutParams.removeRule(RelativeLayout.START_OF);
layoutParams.setMarginEnd(endMargin);
break;
default:
throw new IllegalStateException(""Unknown supplemental action type."");
}
v.requestLayout();
}","private void setViewEndMargin(View v) {
RelativeLayout.LayoutParams layoutParams =
(RelativeLayout.LayoutParams) v.getLayoutParams();
int endMargin = 0;
switch (mSupplementalActionType) {
case SUPPLEMENTAL_ACTION_NO_ACTION:
//comment
layoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);
layoutParams.removeRule(RelativeLayout.START_OF);
layoutParams.setMarginEnd(mContext.getResources().getDimensionPixelSize(
R.dimen.car_keyline_1));
break;
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_ICON:
//comment
<start>layoutParams.addRule(RelativeLayout.START_OF, R.id.supplemental_icon_divider);
layoutParams.removeRule(RelativeLayout.ALIGN_PARENT_END);
layoutParams.setMarginEnd(mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4));<end>
break;
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_EMPTY_ICON_WITH_DIVIDER:
//comment
//comment

//comment
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_vertical_line_divider_width);
//comment
case SUPPLEMENTAL_ACTION_SUPPLEMENTAL_EMPTY_ICON:
//comment
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_padding_4);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_primary_icon_size);
endMargin += mContext.getResources().getDimensionPixelSize(
R.dimen.car_keyline_1);

layoutParams.addRule(RelativeLayout.ALIGN_PARENT_END);
layoutParams.removeRule(RelativeLayout.START_OF);
layoutParams.setMarginEnd(endMargin);
break;
default:
throw new IllegalStateException(""Unknown supplemental action type."");
}
v.requestLayout();
}"
803,"<start>    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {<end>
//comment
if (isChecked) {
<start>mPairingView.setInputType(InputType.TYPE_CLASS_TEXT);<end>
} else {
mPairingView.setInputType(InputType.TYPE_CLASS_NUMBER);
}
}","    public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
//comment
<start>if (isChecked) {
mPairingView.setInputType(InputType.TYPE_CLASS_TEXT);
} else {
mPairingView.setInputType(InputType.TYPE_CLASS_NUMBER);
}<end>
}"
804,"    @Override
public void onCreate(Bundle icicle) {
super.onCreate(icicle);
mDataSaverBackend = new DataSaverBackend(getContext());
mDataSaverEnabled = mDataSaverBackend.isDataSaverEnabled();
mDataSaverFooter = findPreference(KEY_DATA_SAVER_FOOTER);
mWifiTetherGroup = findPreference(KEY_WIFI_TETHER_GROUP);

setIfOnlyAvailableForAdmins(true);
if (isUiRestricted()) {
mUnavailable = true;
return;
}

mDataSaverBackend.addListener(this);

//comment
<start>onDataSaverChanged(mDataSaverBackend.isDataSaverEnabled());<end>
}","    @Override
public void onCreate(Bundle icicle) {
super.onCreate(icicle);
mDataSaverBackend = new DataSaverBackend(getContext());
mDataSaverEnabled = mDataSaverBackend.isDataSaverEnabled();
mDataSaverFooter = findPreference(KEY_DATA_SAVER_FOOTER);
mWifiTetherGroup = findPreference(KEY_WIFI_TETHER_GROUP);

setIfOnlyAvailableForAdmins(true);
if (isUiRestricted()) {
mUnavailable = true;
return;
}

mDataSaverBackend.addListener(this);

//comment
<start>onDataSaverChanged(mDataSaverBackend.isDataSaverEnabled());<end>
}"
808,"    @Override
public void onConfigurationChanged(Configuration config) {
super.onConfigurationChanged(config);
Resources res = mActivity.getResources();
<start>mTabWidth = (int) res.getDimension(R.dimen.tab_width);
//comment
mTabs.updateLayout();<end>
}","    @Override
public void onConfigurationChanged(Configuration config) {
super.onConfigurationChanged(config);
Resources res = mActivity.getResources();
mTabWidth = (int) res.getDimension(R.dimen.tab_width);
//comment
<start>mTabs.updateLayout();<end>
}"
809,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
<start>mController.dismissSubWindow(current);<end>
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
810,"@Override
public Drawable getDrawable(String source) {
//comment
<start>Uri uri;<end>
try {
uri = Uri.parse(source);
} catch (Throwable e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
<start>return null;<end>
}
if (!RES_SCHEME.equals(uri.getScheme())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Image source does not correspond to a resource: "" + source);
}
return null;
}
//comment
String packageName = uri.getAuthority();

Resources resources = getResourcesForResourceName(packageName);
if (resources == null) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
return null;
}

List<String> pathSegments = uri.getPathSegments();
if (pathSegments.size() != 1) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
return null;
}

final String name = pathSegments.get(0);
final int resId = resources.getIdentifier(name, ""drawable"", packageName);

if (resId == 0) {
//comment
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Cannot resolve resource identifier: "" + source);
}
return null;
}

try {
return getResourceDrawable(resources, resId);
} catch (NotFoundException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Resource not found: "" + source, e);
}
return null;
}
}","@Override
public Drawable getDrawable(String source) {
//comment
<start>Uri uri;
try {
uri = Uri.parse(source);
} catch (Throwable e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
return null;
}
if (!RES_SCHEME.equals(uri.getScheme())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Image source does not correspond to a resource: "" + source);
}
return null;
}<end>
//comment
String packageName = uri.getAuthority();

Resources resources = getResourcesForResourceName(packageName);
if (resources == null) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
return null;
}

List<String> pathSegments = uri.getPathSegments();
if (pathSegments.size() != 1) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Could not parse image source: "" + source);
}
return null;
}

final String name = pathSegments.get(0);
final int resId = resources.getIdentifier(name, ""drawable"", packageName);

if (resId == 0) {
//comment
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Cannot resolve resource identifier: "" + source);
}
return null;
}

try {
return getResourceDrawable(resources, resId);
} catch (NotFoundException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Resource not found: "" + source, e);
}
return null;
}
}"
813,"String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
<start>String commandToSend = commands.get(i);<end>
//comment
if (i == 0) {
<start>commandToSend = tag + "" "" + commandToSend;
} else {<end>
//comment
ImapResponse response = readResponse();
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
}
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}","String sendComplexCommand(List<String> commands, boolean sensitive) throws MessagingException,
IOException {
open();
String tag = Integer.toString(mNextCommandTag.incrementAndGet());
int len = commands.size();
for (int i = 0; i < len; i++) {
String commandToSend = commands.get(i);
//comment
<start>if (i == 0) {
commandToSend = tag + "" "" + commandToSend;
} else {<end>
//comment
ImapResponse response = readResponse();
//comment
if (!response.isContinuationRequest()) {
throw new MessagingException(""Expected continuation request"");
}
}
//comment
mTransport.writeLine(commandToSend, null);
mDiscourse.addSentCommand(sensitive ? IMAP_REDACTED_LOG : commandToSend);
}
return tag;
}"
814,"private Drawable loadDrawableInner(Context context) {
switch (mType) {
case TYPE_BITMAP:
return new BitmapDrawable(context.getResources(), (Bitmap) mObj1);
case TYPE_ADAPTIVE_BITMAP:
return new BitmapDrawable(context.getResources(),
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
case TYPE_RESOURCE:
Resources res;
//comment
String resPackage = (String) mObj1;
if (TextUtils.isEmpty(resPackage)) {
//comment
resPackage = context.getPackageName();
}
if (""android"".equals(resPackage)) {
res = Resources.getSystem();
} else {
final PackageManager pm = context.getPackageManager();
try {
ApplicationInfo ai = pm.getApplicationInfo(
resPackage, PackageManager.MATCH_UNINSTALLED_PACKAGES);
if (ai != null) {
res = pm.getResourcesForApplication(ai);
} else {
break;
}
} catch (PackageManager.NameNotFoundException e) {
Log.e(TAG, String.format(""Unable to find pkg=%s for icon %s"",
resPackage, this), e);
break;
}
}
try {
return ResourcesCompat.getDrawable(res, mInt1, context.getTheme());
} catch (RuntimeException e) {
Log.e(TAG, String.format(""Unable to load resource 0x%08x from pkg=%s"",
mInt1,
mObj1),
e);
}
break;
case TYPE_DATA:
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeByteArray((byte[]) mObj1, mInt1, mInt2)
);
case TYPE_URI:
final Uri uri = Uri.parse((String) mObj1);
final String scheme = uri.getScheme();
InputStream is = null;
if (ContentResolver.SCHEME_CONTENT.equals(scheme)
|| ContentResolver.SCHEME_FILE.equals(scheme)) {
try {
is = context.getContentResolver().openInputStream(uri);
} catch (Exception e) {
Log.w(TAG, ""Unable to load image from URI: "" + uri, e);
}
} else {
try {
is = new FileInputStream(new File((String) mObj1));
} catch (FileNotFoundException e) {
Log.w(TAG, ""Unable to load image from path: "" + uri, e);
}
}
if (is != null) {
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeStream(is));
}
break;
}
return null;
}","private Drawable loadDrawableInner(Context context) {
switch (mType) {
case TYPE_BITMAP:
return new BitmapDrawable(context.getResources(), (Bitmap) mObj1);
case TYPE_ADAPTIVE_BITMAP:
return new BitmapDrawable(context.getResources(),
createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, false));
case TYPE_RESOURCE:
Resources res;
//comment
String resPackage = (String) mObj1;
<start>if (TextUtils.isEmpty(resPackage)) {
//comment
resPackage = context.getPackageName();
}<end>
if (""android"".equals(resPackage)) {
res = Resources.getSystem();
} else {
final PackageManager pm = context.getPackageManager();
try {
ApplicationInfo ai = pm.getApplicationInfo(
resPackage, PackageManager.MATCH_UNINSTALLED_PACKAGES);
if (ai != null) {
res = pm.getResourcesForApplication(ai);
} else {
break;
}
} catch (PackageManager.NameNotFoundException e) {
Log.e(TAG, String.format(""Unable to find pkg=%s for icon %s"",
resPackage, this), e);
break;
}
}
try {
return ResourcesCompat.getDrawable(res, mInt1, context.getTheme());
} catch (RuntimeException e) {
Log.e(TAG, String.format(""Unable to load resource 0x%08x from pkg=%s"",
mInt1,
mObj1),
e);
}
break;
case TYPE_DATA:
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeByteArray((byte[]) mObj1, mInt1, mInt2)
);
case TYPE_URI:
final Uri uri = Uri.parse((String) mObj1);
final String scheme = uri.getScheme();
InputStream is = null;
if (ContentResolver.SCHEME_CONTENT.equals(scheme)
|| ContentResolver.SCHEME_FILE.equals(scheme)) {
try {
is = context.getContentResolver().openInputStream(uri);
} catch (Exception e) {
Log.w(TAG, ""Unable to load image from URI: "" + uri, e);
}
} else {
try {
is = new FileInputStream(new File((String) mObj1));
} catch (FileNotFoundException e) {
Log.w(TAG, ""Unable to load image from path: "" + uri, e);
}
}
if (is != null) {
return new BitmapDrawable(context.getResources(),
BitmapFactory.decodeStream(is));
}
break;
}
return null;
}"
815,"@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
String formattedNumber = null;
<start>if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);<end>
}

}","@Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);
Preference removablePref;

mTelephonyManager = (MSimTelephonyManager)getSystemService(MSIM_TELEPHONY_SERVICE);

addPreferencesFromResource(R.xml.device_info_subscription_status);

//comment
mSub = getIntent().getIntExtra(SelectSubscription.SUBSCRIPTION_KEY, 0);
Log.d(""Status"",""OnCreate mSub ="" + mSub);

mPhoneStateListener = getPhoneStateListener(mSub);
mTelephonyManager.listen(mPhoneStateListener,
PhoneStateListener.LISTEN_SERVICE_STATE
| PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);

mRes = getResources();
if (sUnknown == null) {
sUnknown = mRes.getString(R.string.device_info_default);
}

mPhone = MSimPhoneFactory.getPhone(mSub);
//comment
mSigStrength = findPreference(KEY_SIGNAL_STRENGTH);

if (Utils.isWifiOnly(getApplicationContext())) {
for (String key : PHONE_RELATED_ENTRIES) {
removePreferenceFromScreen(key);
}
} else {

if ((SystemProperties.getBoolean(""ro.config.multimode_cdma"", false))
|| (mPhone.getPhoneName().equals(""CDMA""))) {
setSummaryText(KEY_PRL_VERSION, mPhone.getCdmaPrlVersion());
} else {
//comment
removePreferenceFromScreen(KEY_PRL_VERSION);
}

//comment
//comment
if (mPhone.getPhoneName().equals(""CDMA"")) {
setSummaryText(KEY_ESN_NUMBER, mPhone.getEsn());
setSummaryText(KEY_MEID_NUMBER, mPhone.getMeid());
setSummaryText(KEY_MIN_NUMBER, mPhone.getCdmaMin());
if (getResources().getBoolean(R.bool.config_msid_enable)) {
findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
}

removePreferenceFromScreen(KEY_IMEI_SV);

if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
//comment
setSummaryText(KEY_ICC_ID, mPhone.getIccSerialNumber());
setSummaryText(KEY_IMEI, mPhone.getImei());
} else {
//comment
//comment
removePreferenceFromScreen(KEY_IMEI);
removePreferenceFromScreen(KEY_ICC_ID);
}
} else {
setSummaryText(KEY_IMEI, mPhone.getDeviceId());

setSummaryText(KEY_IMEI_SV,mPhone.getDeviceSvn());

//comment
//comment
removePreferenceFromScreen(KEY_ESN_NUMBER);
removePreferenceFromScreen(KEY_MEID_NUMBER);
removePreferenceFromScreen(KEY_MIN_NUMBER);
removePreferenceFromScreen(KEY_ICC_ID);
}

String rawNumber = mPhone.getLine1Number();
<start>String formattedNumber = null;
if (!TextUtils.isEmpty(rawNumber)) {
formattedNumber = PhoneNumberUtils.formatNumber(rawNumber);
}
//comment
setSummaryText(KEY_PHONE_NUMBER, formattedNumber);<end>
}

}"
816,"<start>private static String fixPath(String path) {
//comment
//comment
//comment
//comment
if (File.separatorChar == '\\') {
path = path.replace('\\', '/');
}<end>

int index = path.lastIndexOf(""/./"");

if (index != -1) {
return path.substring(index + 3);
}

if (path.startsWith(""./"")) {
return path.substring(2);
}

return path;
}","private static String fixPath(String path) {
//comment
//comment
//comment
//comment
<start>if (File.separatorChar == '\\') {
path = path.replace('\\', '/');
}<end>

int index = path.lastIndexOf(""/./"");

if (index != -1) {
return path.substring(index + 3);
}

if (path.startsWith(""./"")) {
return path.substring(2);
}

return path;
}"
819,"protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
<start>ResolveInfo firstSystem = null;<end>
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}","protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

if (!foundDisambig) {
//comment
return foundResolve;
}

//comment
<start>ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}<end>

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}"
821,"        @Override
public void onParamReadyEvent() {
CameraState cameraState = mVideoCallManager.getCameraState();
if (DBG) log(""onParamReadyEvent cameraState= "" + cameraState);
if (cameraState == CameraState.PREVIEW_STARTED) {
//comment
//comment
try {
<start>mVideoCallManager.stopCameraRecording();<end>
mVideoCallManager.stopCameraPreview();
initializeCameraParams();
<start>mVideoCallManager.startCameraPreview(mCameraSurface);<end>
mVideoCallManager.startCameraRecording();
} catch (IOException ioe) {
loge(""Exception onParamReadyEvent stopping and starting preview ""
+ ioe.toString());
}
}
}","        @Override
public void onParamReadyEvent() {
CameraState cameraState = mVideoCallManager.getCameraState();
if (DBG) log(""onParamReadyEvent cameraState= "" + cameraState);
if (cameraState == CameraState.PREVIEW_STARTED) {
//comment
//comment
<start>try {
mVideoCallManager.stopCameraRecording();
mVideoCallManager.stopCameraPreview();
initializeCameraParams();
mVideoCallManager.startCameraPreview(mCameraSurface);
mVideoCallManager.startCameraRecording();
} catch (IOException ioe) {
loge(""Exception onParamReadyEvent stopping and starting preview ""
+ ioe.toString());
}<end>
}
}"
824,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
<start>if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}<end>

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
<start>if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {<end>
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}"
826,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
<start>mTransactionState.setContentUri(mUri);<end>
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
<start>mTransactionState.setState(TransactionState.FAILED);<end>
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
827,"String getLoginPhrase() throws MessagingException, IOException {
//comment
if (mImapStore.getUseOAuth()) {
//comment
//comment
final String accessToken = AuthenticationCache.getInstance().retrieveAccessToken(
mImapStore.getContext(), mImapStore.getAccount());
if (mLoginPhrase == null || !TextUtils.equals(mAccessToken, accessToken)) {
mAccessToken = accessToken;
<start>final String oauthCode = ""user="" + mImapStore.getUsername() + '\001' +
""auth=Bearer "" + mAccessToken + '\001' + '\001';<end>
mLoginPhrase = ImapConstants.AUTHENTICATE + "" "" + ImapConstants.XOAUTH2 + "" "" +
Base64.encodeToString(oauthCode.getBytes(), Base64.NO_WRAP);
}
} else {
if (mLoginPhrase == null) {
if (mImapStore.getUsername() != null && mImapStore.getPassword() != null) {
//comment
//comment
mLoginPhrase = ImapConstants.LOGIN + "" "" + mImapStore.getUsername() + "" ""
+ ImapUtility.imapQuoted(mImapStore.getPassword());
}
}
}
return mLoginPhrase;
}","String getLoginPhrase() throws MessagingException, IOException {
//comment
if (mImapStore.getUseOAuth()) {
//comment
//comment
final String accessToken = AuthenticationCache.getInstance().retrieveAccessToken(
mImapStore.getContext(), mImapStore.getAccount());
if (mLoginPhrase == null || !TextUtils.equals(mAccessToken, accessToken)) {
mAccessToken = accessToken;
final String oauthCode = ""user="" + mImapStore.getUsername() + '\001' +
""auth=Bearer "" + mAccessToken + '\001' + '\001';
mLoginPhrase = ImapConstants.AUTHENTICATE + "" "" + ImapConstants.XOAUTH2 + "" "" +
Base64.encodeToString(oauthCode.getBytes(), Base64.NO_WRAP);
}
} else {
if (mLoginPhrase == null) {
if (mImapStore.getUsername() != null && mImapStore.getPassword() != null) {
//comment
//comment
<start>mLoginPhrase = ImapConstants.LOGIN + "" "" + mImapStore.getUsername() + "" ""
+ ImapUtility.imapQuoted(mImapStore.getPassword());<end>
}
}
}
return mLoginPhrase;
}"
828,"    private void handleServiceStateChanged(Intent intent) {
//comment
ServiceState serviceState = ServiceState.newFromBundle(intent.getExtras());
<start>if (serviceState.getState() == ServiceState.STATE_IN_SERVICE) {
sendFirstQueuedMessage();
}<end>
}","    private void handleServiceStateChanged(Intent intent) {
//comment
<start>ServiceState serviceState = ServiceState.newFromBundle(intent.getExtras());
if (serviceState.getState() == ServiceState.STATE_IN_SERVICE) {
sendFirstQueuedMessage();
}<end>
}"
829,"public void updateManageConferencePanel(List<Connection> connections) {
mNumCallersInConference = connections.size();
if (DBG) log(""updateManageConferencePanel()... num connections in conference = ""
+ mNumCallersInConference);

//comment
//comment
final boolean hasActiveCall = mCM.hasActiveFgCall();
final boolean hasHoldingCall = mCM.hasActiveBgCall();
boolean canSeparate = !(hasActiveCall && hasHoldingCall);

for (int i = 0; i < MAX_CALLERS_IN_CONFERENCE; i++) {
if (i < mNumCallersInConference) {
//comment
Connection connection = (Connection) connections.get(i);
updateManageConferenceRow(i, connection, canSeparate);
} else {
//comment
updateManageConferenceRow(i, null, false);
}
}
}","public void updateManageConferencePanel(List<Connection> connections) {
mNumCallersInConference = connections.size();
if (DBG) log(""updateManageConferencePanel()... num connections in conference = ""
+ mNumCallersInConference);

//comment
//comment
final boolean hasActiveCall = mCM.hasActiveFgCall();
final boolean hasHoldingCall = mCM.hasActiveBgCall();
boolean canSeparate = !(hasActiveCall && hasHoldingCall);

for (int i = 0; i < MAX_CALLERS_IN_CONFERENCE; i++) {
if (i < mNumCallersInConference) {
//comment
Connection connection = (Connection) connections.get(i);
updateManageConferenceRow(i, connection, canSeparate);
} else {
//comment
<start>updateManageConferenceRow(i, null, false);<end>
}
}
}"
830,"public static void setAlphaOnViewBackground(View view, float alpha) {
<start>if (view != null) {
//comment
//comment
view.setBackgroundColor((int) (MoreMath.clamp(alpha, 0.0f, 1.0f) * 255) << 24);
}<end>
}","public static void setAlphaOnViewBackground(View view, float alpha) {
if (view != null) {
//comment
//comment
<start>view.setBackgroundColor((int) (MoreMath.clamp(alpha, 0.0f, 1.0f) * 255) << 24);<end>
}
}"
831,"@Override
public boolean onHoverEvent(MotionEvent event) {
Context context = getContext();
//comment
//comment
AccessibilityManager am = (AccessibilityManager) context
.getSystemService(Service.ACCESSIBILITY_SERVICE);
if (!am.isEnabled() || !am.isTouchExplorationEnabled()) {
return super.onHoverEvent(event);
}
if (event.getAction() != MotionEvent.ACTION_HOVER_EXIT) {
Time hover = getDayFromLocation(event.getX());
if (hover != null
&& (mLastHoverTime == null || Time.compare(hover, mLastHoverTime) != 0)) {
Long millis = hover.toMillis(true);
String date = Utils.formatDateRange(context, millis, millis,
DateUtils.FORMAT_SHOW_DATE);
AccessibilityEvent accessEvent =
AccessibilityEvent.obtain(AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED);
accessEvent.getText().add(date);
sendAccessibilityEventUnchecked(accessEvent);
mLastHoverTime = hover;
}
}
return true;
}","@Override
public boolean onHoverEvent(MotionEvent event) {
Context context = getContext();
//comment
//comment
<start>AccessibilityManager am = (AccessibilityManager) context
.getSystemService(Service.ACCESSIBILITY_SERVICE);
if (!am.isEnabled() || !am.isTouchExplorationEnabled()) {
return super.onHoverEvent(event);
}<end>
if (event.getAction() != MotionEvent.ACTION_HOVER_EXIT) {
Time hover = getDayFromLocation(event.getX());
if (hover != null
&& (mLastHoverTime == null || Time.compare(hover, mLastHoverTime) != 0)) {
Long millis = hover.toMillis(true);
String date = Utils.formatDateRange(context, millis, millis,
DateUtils.FORMAT_SHOW_DATE);
AccessibilityEvent accessEvent =
AccessibilityEvent.obtain(AccessibilityEvent.TYPE_NOTIFICATION_STATE_CHANGED);
accessEvent.getText().add(date);
sendAccessibilityEventUnchecked(accessEvent);
mLastHoverTime = hover;
}
}
return true;
}"
832,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
<start>return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;<end>
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
<start>} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}<end>
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}"
835,"private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
<start>double xy = Math.sqrt(x*x + y*y);
//comment
double angle = Math.atan2(xy, z);
//comment
angle = angle * 180.0 / Math.PI;<end>
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}","private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
double xy = Math.sqrt(x*x + y*y);
//comment
<start>double angle = Math.atan2(xy, z);<end>
//comment
angle = angle * 180.0 / Math.PI;
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}"
836,"    @Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
if (!(getActivity() instanceof PickRawContactListener)) {
throw new IllegalArgumentException(
""Host activity doesn't implement PickRawContactListener"");
}
final Bundle args = getArguments();
if (args == null) {
throw new IllegalArgumentException(""Dialog created with no arguments"");
}

final RawContactsMetadata metadata = args.getParcelable(ARGS_RAW_CONTACTS_METADATA);
if (metadata == null) {
throw new IllegalArgumentException(""Dialog created with null RawContactsMetadata"");
}

final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
mAdapter = new RawContactAccountListAdapter(getContext(), metadata);
if (metadata.showReadOnly) {
<start>builder.setTitle(R.string.contact_editor_pick_linked_contact_dialog_title);<end>
//comment
if (!metadata.isUserProfile) {
builder.setPositiveButton(R.string.contact_editor_add_linked_contact,
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
mShouldFinishActivity = false;
final Intent intent = new Intent(getActivity(),
ContactSelectionActivity.class);
intent.setAction(UiIntentActions.PICK_JOIN_CONTACT_ACTION);
intent.putExtra(UiIntentActions.TARGET_CONTACT_ID_EXTRA_KEY,
metadata.contactId);
getActivity().startActivityForResult(intent, REQUEST_CODE_JOIN);
}
});
builder.setNegativeButton(R.string.contact_editor_unlink_contacts,
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
mShouldFinishActivity = false;
final SplitContactConfirmationDialogFragment splitDialog = new
SplitContactConfirmationDialogFragment();
splitDialog.show(getActivity().getFragmentManager(),
SplitContactConfirmationDialogFragment.TAG);
}
});
}
} else {
builder.setTitle(R.string.contact_editor_pick_raw_contact_to_edit_dialog_title);
}
builder.setAdapter(mAdapter, new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
final long rawContactId = mAdapter.getItemId(which);
((PickRawContactListener) getActivity()).onPickRawContact(rawContactId);
}
});
builder.setCancelable(true);
if (savedInstanceState == null) {
Logger.logEditorEvent(EditorEvent.EventType.SHOW_RAW_CONTACT_PICKER,
mAdapter.getCount());
}
return builder.create();
}","    @Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
if (!(getActivity() instanceof PickRawContactListener)) {
throw new IllegalArgumentException(
""Host activity doesn't implement PickRawContactListener"");
}
final Bundle args = getArguments();
if (args == null) {
throw new IllegalArgumentException(""Dialog created with no arguments"");
}

final RawContactsMetadata metadata = args.getParcelable(ARGS_RAW_CONTACTS_METADATA);
if (metadata == null) {
throw new IllegalArgumentException(""Dialog created with null RawContactsMetadata"");
}

final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
mAdapter = new RawContactAccountListAdapter(getContext(), metadata);
if (metadata.showReadOnly) {
builder.setTitle(R.string.contact_editor_pick_linked_contact_dialog_title);
//comment
<start>if (!metadata.isUserProfile) {<end>
builder.setPositiveButton(R.string.contact_editor_add_linked_contact,
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
mShouldFinishActivity = false;
final Intent intent = new Intent(getActivity(),
ContactSelectionActivity.class);
intent.setAction(UiIntentActions.PICK_JOIN_CONTACT_ACTION);
intent.putExtra(UiIntentActions.TARGET_CONTACT_ID_EXTRA_KEY,
metadata.contactId);
getActivity().startActivityForResult(intent, REQUEST_CODE_JOIN);
}
});
builder.setNegativeButton(R.string.contact_editor_unlink_contacts,
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
mShouldFinishActivity = false;
final SplitContactConfirmationDialogFragment splitDialog = new
SplitContactConfirmationDialogFragment();
splitDialog.show(getActivity().getFragmentManager(),
SplitContactConfirmationDialogFragment.TAG);
}
});
}
} else {
builder.setTitle(R.string.contact_editor_pick_raw_contact_to_edit_dialog_title);
}
builder.setAdapter(mAdapter, new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
final long rawContactId = mAdapter.getItemId(which);
((PickRawContactListener) getActivity()).onPickRawContact(rawContactId);
}
});
builder.setCancelable(true);
if (savedInstanceState == null) {
Logger.logEditorEvent(EditorEvent.EventType.SHOW_RAW_CONTACT_PICKER,
mAdapter.getCount());
}
return builder.create();
}"
838,"public CharSequence buildLatinWord() {
final StringBuilder result = new StringBuilder();
//comment
//comment
final int length = mRandom.nextInt(mMaxWordLength - mMinWordLength) + mMinWordLength;
while (result.length() < length) {
//comment
<start>int base = mRandom.nextInt(2) == 0 ? 'A' : 'a';
result.append(Character.toChars(mRandom.nextInt(26) + base));<end>
}
return result.toString();
}","public CharSequence buildLatinWord() {
final StringBuilder result = new StringBuilder();
//comment
//comment
final int length = mRandom.nextInt(mMaxWordLength - mMinWordLength) + mMinWordLength;
while (result.length() < length) {
//comment
<start>int base = mRandom.nextInt(2) == 0 ? 'A' : 'a';
result.append(Character.toChars(mRandom.nextInt(26) + base));<end>
}
return result.toString();
}"
840,"        public static AppViewHolder createOrRecycle(LayoutInflater inflater, View convertView) {
if (convertView == null) {
convertView = inflater.inflate(R.layout.ad_excluded_app_item, null);

//comment
//comment
<start>AppViewHolder holder = new AppViewHolder();
holder.rootView = convertView;
holder.appName = (TextView) convertView.findViewById(R.id.app_name);<end>
holder.appIcon = (ImageView) convertView.findViewById(R.id.app_icon);
holder.checkBox = (CheckBox) convertView.findViewById(android.R.id.checkbox);
convertView.setTag(holder);
return holder;
} else {
//comment
//comment
return (AppViewHolder)convertView.getTag();
}
}","        public static AppViewHolder createOrRecycle(LayoutInflater inflater, View convertView) {
if (convertView == null) {
convertView = inflater.inflate(R.layout.ad_excluded_app_item, null);

//comment
//comment
<start>AppViewHolder holder = new AppViewHolder();
holder.rootView = convertView;
holder.appName = (TextView) convertView.findViewById(R.id.app_name);
holder.appIcon = (ImageView) convertView.findViewById(R.id.app_icon);
holder.checkBox = (CheckBox) convertView.findViewById(android.R.id.checkbox);
convertView.setTag(holder);
return holder;<end>
} else {
//comment
//comment
return (AppViewHolder)convertView.getTag();
}
}"
842,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
<start>msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);<end>

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
<start>PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);<end>

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
updateContentLocation(mContext, msgUri, mContentLocation, mLocked);
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
846,"    public final void displayCallerInfoForConferenceRow(CallerInfo ci, int presentation,
TextView nameTextView, TextView numberTypeTextView, TextView numberTextView) {
//comment
String callerName = """";
String callerNumber = """";
String callerNumberType = """";
if (ci != null) {
callerName = ci.name;
if (TextUtils.isEmpty(callerName)) {
//comment
//comment
if (TextUtils.isEmpty(ci.phoneNumber)) {
callerName = PhoneUtils.getPresentationString(mInCallScreen, presentation);
} else if (!TextUtils.isEmpty(ci.cnapName)) {
//comment
<start>callerName = ci.cnapName;<end>
} else {
callerName = ci.phoneNumber;
}
} else {
callerNumber = ci.phoneNumber;
callerNumberType = ci.phoneLabel;
}
}

//comment
nameTextView.setText(callerName);

//comment
if (TextUtils.isEmpty(callerNumber)) {
numberTextView.setVisibility(View.GONE);
numberTypeTextView.setVisibility(View.GONE);
} else {
numberTextView.setVisibility(View.VISIBLE);
numberTextView.setText(callerNumber);
numberTypeTextView.setVisibility(View.VISIBLE);
numberTypeTextView.setText(callerNumberType);
}
}","    public final void displayCallerInfoForConferenceRow(CallerInfo ci, int presentation,
TextView nameTextView, TextView numberTypeTextView, TextView numberTextView) {
//comment
String callerName = """";
String callerNumber = """";
String callerNumberType = """";
if (ci != null) {
callerName = ci.name;
if (TextUtils.isEmpty(callerName)) {
//comment
//comment
if (TextUtils.isEmpty(ci.phoneNumber)) {
callerName = PhoneUtils.getPresentationString(mInCallScreen, presentation);
<start>} else if (!TextUtils.isEmpty(ci.cnapName)) {
//comment
callerName = ci.cnapName;
} else {<end>
callerName = ci.phoneNumber;
}
} else {
callerNumber = ci.phoneNumber;
callerNumberType = ci.phoneLabel;
}
}

//comment
nameTextView.setText(callerName);

//comment
if (TextUtils.isEmpty(callerNumber)) {
numberTextView.setVisibility(View.GONE);
numberTypeTextView.setVisibility(View.GONE);
} else {
numberTextView.setVisibility(View.VISIBLE);
numberTextView.setText(callerNumber);
numberTypeTextView.setVisibility(View.VISIBLE);
numberTypeTextView.setText(callerNumberType);
}
}"
848,"@Override
public int getBaseline() {
//comment
if (getChildCount() == 0) {
return super.getBaseline();
}

//comment
final int centerChildIndex = findCenterViewIndex();
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();

//comment
if (centerChildBaseline == -1) {
<start>return super.getBaseline();<end>
}

return getCentralViewTop() + centerChildBaseline;
}","@Override
public int getBaseline() {
//comment
if (getChildCount() == 0) {
return super.getBaseline();
}

//comment
final int centerChildIndex = findCenterViewIndex();
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();

//comment
<start>if (centerChildBaseline == -1) {
return super.getBaseline();
}<end>

return getCentralViewTop() + centerChildBaseline;
}"
849,"    private void setOrientation(int orientation) {
synchronized (this) {
<start>if (mPendingOrientation == orientation) {
//comment
return;
}<end>

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}","    private void setOrientation(int orientation) {
synchronized (this) {
<start>if (mPendingOrientation == orientation) {
//comment
return;
}<end>

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
mHandler.sendMessageDelayed(m, delay);
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}"
850,"    @Override
public void updateUi(String groupName, int groupCount, int groupIndex, Icon icon,
CharSequence message, CharSequence detailMessage, boolean[] buttonVisibilities) {
boolean isNewGroup = mGroupIndex != groupIndex;

mGroupName = groupName;
mGroupCount = groupCount;
mGroupIndex = groupIndex;
mGroupIcon = icon;
<start>mGroupMessage = message;<end>
mDetailMessage = detailMessage;
mButtonVisibilities = buttonVisibilities;

//comment
<start>if (mIconView != null) {
updateAll();
}<end>
}","    @Override
public void updateUi(String groupName, int groupCount, int groupIndex, Icon icon,
CharSequence message, CharSequence detailMessage, boolean[] buttonVisibilities) {
boolean isNewGroup = mGroupIndex != groupIndex;

mGroupName = groupName;
mGroupCount = groupCount;
mGroupIndex = groupIndex;
mGroupIcon = icon;
mGroupMessage = message;
mDetailMessage = detailMessage;
mButtonVisibilities = buttonVisibilities;

//comment
<start>if (mIconView != null) {
updateAll();
}<end>
}"
853,"    @Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
//comment
<start>final ProgressDialog dialog = new ProgressDialog(getActivity());
dialog.setIndeterminate(true);
dialog.setIndeterminateDrawable(null);
dialog.setTitle(mTitle);<end>
dialog.setMessage(mMessage);

return dialog;
}","    @Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
//comment
<start>final ProgressDialog dialog = new ProgressDialog(getActivity());
dialog.setIndeterminate(true);
dialog.setIndeterminateDrawable(null);
dialog.setTitle(mTitle);
dialog.setMessage(mMessage);<end>

return dialog;
}"
854,"        @Override
public void onReceive(Context context, Intent intent) {
//comment
if (intent.getAction().equals(
<start>TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED)) {<end>
if (intent.getBooleanExtra(""phoneinECMState"", false) == false) {
if (mAlertDialog != null)
mAlertDialog.dismiss();
if (mProgressDialog != null)
mProgressDialog.dismiss();
EmergencyCallbackModeExitDialog.this.setResult(RESULT_OK, (new Intent())
.putExtra(EXTRA_EXIT_ECM_RESULT, true));
finish();
}
}
}","        @Override
public void onReceive(Context context, Intent intent) {
//comment
if (intent.getAction().equals(
TelephonyIntents.ACTION_EMERGENCY_CALLBACK_MODE_CHANGED)) {
if (intent.getBooleanExtra(""phoneinECMState"", false) == false) {
if (mAlertDialog != null)
mAlertDialog.dismiss();
if (mProgressDialog != null)
mProgressDialog.dismiss();
<start>EmergencyCallbackModeExitDialog.this.setResult(RESULT_OK, (new Intent())
.putExtra(EXTRA_EXIT_ECM_RESULT, true));<end>
finish();
}
}
}"
855,"private boolean isOverScrolling() {
return getChildCount() > 0
//comment
//comment
//comment
&& mStartFirstTop <= getCentralViewTop()
&& getChildAt(0).getTop() >= getTopViewMaxTop()
&& mOverScrollListener != null;
}","private boolean isOverScrolling() {
<start>return getChildCount() > 0
//comment
//comment
//comment
&& mStartFirstTop <= getCentralViewTop()
&& getChildAt(0).getTop() >= getTopViewMaxTop()
&& mOverScrollListener != null;<end>
}"
856,"protected SuggestionsInfo onGetSuggestionsInternal(
final TextInfo textInfo, final String prevWord, final int suggestionsLimit) {
try {
final String inText = textInfo.getText();
final SuggestionsParams cachedSuggestionsParams =
mSuggestionsCache.getSuggestionsFromCache(inText, prevWord);
if (cachedSuggestionsParams != null) {
if (DBG) {
Log.d(TAG, ""Cache hit: "" + inText + "", "" + cachedSuggestionsParams.mFlags);
}
return new SuggestionsInfo(
cachedSuggestionsParams.mFlags, cachedSuggestionsParams.mSuggestions);
}

if (shouldFilterOut(inText, mScript)) {
DictAndKeyboard dictInfo = null;
try {
dictInfo = mDictionaryPool.pollWithDefaultTimeout();
if (!DictionaryPool.isAValidDictionary(dictInfo)) {
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
return dictInfo.mDictionary.isValidWord(inText)
? AndroidSpellCheckerService.getInDictEmptySuggestions()
: AndroidSpellCheckerService.getNotInDictEmptySuggestions();
} finally {
if (null != dictInfo) {
if (!mDictionaryPool.offer(dictInfo)) {
Log.e(TAG, ""Can't re-insert a dictionary into its pool"");
}
}
}
}
final String text = inText.replaceAll(
AndroidSpellCheckerService.APOSTROPHE, AndroidSpellCheckerService.SINGLE_QUOTE);

//comment
//comment
//comment
//comment
final SuggestionsGatherer suggestionsGatherer = mService.newSuggestionsGatherer(
text, suggestionsLimit);

final int capitalizeType = StringUtils.getCapitalizationType(text);
boolean isInDict = true;
DictAndKeyboard dictInfo = null;
try {
dictInfo = mDictionaryPool.pollWithDefaultTimeout();
if (!DictionaryPool.isAValidDictionary(dictInfo)) {
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
final WordComposer composer = new WordComposer();
final int length = text.length();
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
composer.addKeyInfo(codePoint, dictInfo.getKeyboard(codePoint));
}
//comment
final ArrayList<SuggestedWordInfo> suggestions =
dictInfo.mDictionary.getSuggestions(composer, prevWord,
dictInfo.getProximityInfo(),
true );
for (final SuggestedWordInfo suggestion : suggestions) {
final String suggestionStr = suggestion.mWord;
suggestionsGatherer.addWord(suggestionStr.toCharArray(), null, 0,
suggestionStr.length(), suggestion.mScore);
}
isInDict = isInDictForAnyCapitalization(dictInfo.mDictionary, text, capitalizeType);
} finally {
if (null != dictInfo) {
if (!mDictionaryPool.offer(dictInfo)) {
Log.e(TAG, ""Can't re-insert a dictionary into its pool"");
}
}
}

final SuggestionsGatherer.Result result = suggestionsGatherer.getResults(
capitalizeType, mLocale);

if (DBG) {
Log.i(TAG, ""Spell checking results for "" + text + "" with suggestion limit ""
+ suggestionsLimit);
Log.i(TAG, ""IsInDict = "" + isInDict);
Log.i(TAG, ""LooksLikeTypo = "" + (!isInDict));
Log.i(TAG, ""HasRecommendedSuggestions = "" + result.mHasRecommendedSuggestions);
if (null != result.mSuggestions) {
for (String suggestion : result.mSuggestions) {
Log.i(TAG, suggestion);
}
}
}

final int flags =
(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY
: SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO)
| (result.mHasRecommendedSuggestions
? SuggestionsInfoCompatUtils
.getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS()
: 0);
final SuggestionsInfo retval = new SuggestionsInfo(flags, result.mSuggestions);
mSuggestionsCache.putSuggestionsToCache(text, prevWord, result.mSuggestions, flags);
return retval;
<start>} catch (RuntimeException e) {<end>
//comment
if (DBG) {
throw e;
<start>} else {<end>
Log.e(TAG, ""Exception while spellcheking"", e);
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
}
}","protected SuggestionsInfo onGetSuggestionsInternal(
final TextInfo textInfo, final String prevWord, final int suggestionsLimit) {
try {
final String inText = textInfo.getText();
final SuggestionsParams cachedSuggestionsParams =
mSuggestionsCache.getSuggestionsFromCache(inText, prevWord);
if (cachedSuggestionsParams != null) {
if (DBG) {
Log.d(TAG, ""Cache hit: "" + inText + "", "" + cachedSuggestionsParams.mFlags);
}
return new SuggestionsInfo(
cachedSuggestionsParams.mFlags, cachedSuggestionsParams.mSuggestions);
}

if (shouldFilterOut(inText, mScript)) {
DictAndKeyboard dictInfo = null;
try {
dictInfo = mDictionaryPool.pollWithDefaultTimeout();
if (!DictionaryPool.isAValidDictionary(dictInfo)) {
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
return dictInfo.mDictionary.isValidWord(inText)
? AndroidSpellCheckerService.getInDictEmptySuggestions()
: AndroidSpellCheckerService.getNotInDictEmptySuggestions();
} finally {
if (null != dictInfo) {
if (!mDictionaryPool.offer(dictInfo)) {
Log.e(TAG, ""Can't re-insert a dictionary into its pool"");
}
}
}
}
final String text = inText.replaceAll(
AndroidSpellCheckerService.APOSTROPHE, AndroidSpellCheckerService.SINGLE_QUOTE);

//comment
//comment
//comment
//comment
final SuggestionsGatherer suggestionsGatherer = mService.newSuggestionsGatherer(
text, suggestionsLimit);

final int capitalizeType = StringUtils.getCapitalizationType(text);
boolean isInDict = true;
DictAndKeyboard dictInfo = null;
try {
dictInfo = mDictionaryPool.pollWithDefaultTimeout();
if (!DictionaryPool.isAValidDictionary(dictInfo)) {
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
final WordComposer composer = new WordComposer();
final int length = text.length();
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
composer.addKeyInfo(codePoint, dictInfo.getKeyboard(codePoint));
}
//comment
final ArrayList<SuggestedWordInfo> suggestions =
dictInfo.mDictionary.getSuggestions(composer, prevWord,
dictInfo.getProximityInfo(),
true );
for (final SuggestedWordInfo suggestion : suggestions) {
final String suggestionStr = suggestion.mWord;
suggestionsGatherer.addWord(suggestionStr.toCharArray(), null, 0,
suggestionStr.length(), suggestion.mScore);
}
isInDict = isInDictForAnyCapitalization(dictInfo.mDictionary, text, capitalizeType);
} finally {
if (null != dictInfo) {
if (!mDictionaryPool.offer(dictInfo)) {
Log.e(TAG, ""Can't re-insert a dictionary into its pool"");
}
}
}

final SuggestionsGatherer.Result result = suggestionsGatherer.getResults(
capitalizeType, mLocale);

if (DBG) {
Log.i(TAG, ""Spell checking results for "" + text + "" with suggestion limit ""
+ suggestionsLimit);
Log.i(TAG, ""IsInDict = "" + isInDict);
Log.i(TAG, ""LooksLikeTypo = "" + (!isInDict));
Log.i(TAG, ""HasRecommendedSuggestions = "" + result.mHasRecommendedSuggestions);
if (null != result.mSuggestions) {
for (String suggestion : result.mSuggestions) {
Log.i(TAG, suggestion);
}
}
}

final int flags =
(isInDict ? SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY
: SuggestionsInfo.RESULT_ATTR_LOOKS_LIKE_TYPO)
| (result.mHasRecommendedSuggestions
? SuggestionsInfoCompatUtils
.getValueOf_RESULT_ATTR_HAS_RECOMMENDED_SUGGESTIONS()
: 0);
final SuggestionsInfo retval = new SuggestionsInfo(flags, result.mSuggestions);
mSuggestionsCache.putSuggestionsToCache(text, prevWord, result.mSuggestions, flags);
return retval;
} catch (RuntimeException e) {
//comment
<start>if (DBG) {
throw e;<end>
} else {
Log.e(TAG, ""Exception while spellcheking"", e);
return AndroidSpellCheckerService.getNotInDictEmptySuggestions();
}
}
}"
859,"public void update(Observable observable) {
Transaction transaction = (Transaction) observable;
int serviceId = transaction.getServiceId();

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update transaction "" + serviceId);
}

try {
synchronized (mProcessing) {
mProcessing.remove(transaction);
if (mPending.size() > 0) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: handle next pending transaction..."");
}
Message msg = mServiceHandler.obtainMessage(
EVENT_HANDLE_NEXT_PENDING_TRANSACTION,
transaction.getConnectionSettings());
mServiceHandler.sendMessage(msg);
}
else if (mProcessing.isEmpty()) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: endMmsConnectivity"");
}
endMmsConnectivity();
} else {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: mProcessing is not empty"");
}
}
}

Intent intent = new Intent(TRANSACTION_COMPLETED_ACTION);
TransactionState state = transaction.getState();
int result = state.getState();
intent.putExtra(STATE, result);

switch (result) {
case TransactionState.SUCCESS:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction complete: "" + serviceId);
}

intent.putExtra(STATE_URI, state.getContentUri());

//comment
switch (transaction.getType()) {
case Transaction.NOTIFICATION_TRANSACTION:
case Transaction.RETRIEVE_TRANSACTION:
//comment
//comment
long threadId = MessagingNotification.getThreadId(
this, state.getContentUri());
MessagingNotification.blockingUpdateNewMessageIndicator(this,
threadId,
false);
MessagingNotification.updateDownloadFailedNotification(this);
break;
case Transaction.SEND_TRANSACTION:
RateController.getInstance().update();
break;
}
break;
case TransactionState.FAILED:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction failed: "" + serviceId);
}
break;
default:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction state unknown: "" +
serviceId + "" "" + result);
}
break;
}

<start>if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: broadcast transaction result "" + result);
}
//comment
sendBroadcast(intent);<end>
} finally {
transaction.detach(this);
<start>stopSelfIfIdle(serviceId);<end>
}
}","public void update(Observable observable) {
Transaction transaction = (Transaction) observable;
int serviceId = transaction.getServiceId();

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update transaction "" + serviceId);
}

try {
synchronized (mProcessing) {
mProcessing.remove(transaction);
if (mPending.size() > 0) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: handle next pending transaction..."");
}
Message msg = mServiceHandler.obtainMessage(
EVENT_HANDLE_NEXT_PENDING_TRANSACTION,
transaction.getConnectionSettings());
mServiceHandler.sendMessage(msg);
}
else if (mProcessing.isEmpty()) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: endMmsConnectivity"");
}
endMmsConnectivity();
} else {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: mProcessing is not empty"");
}
}
}

Intent intent = new Intent(TRANSACTION_COMPLETED_ACTION);
TransactionState state = transaction.getState();
int result = state.getState();
intent.putExtra(STATE, result);

switch (result) {
case TransactionState.SUCCESS:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction complete: "" + serviceId);
}

intent.putExtra(STATE_URI, state.getContentUri());

//comment
switch (transaction.getType()) {
case Transaction.NOTIFICATION_TRANSACTION:
case Transaction.RETRIEVE_TRANSACTION:
//comment
//comment
long threadId = MessagingNotification.getThreadId(
this, state.getContentUri());
MessagingNotification.blockingUpdateNewMessageIndicator(this,
threadId,
false);
MessagingNotification.updateDownloadFailedNotification(this);
break;
case Transaction.SEND_TRANSACTION:
RateController.getInstance().update();
break;
}
break;
case TransactionState.FAILED:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction failed: "" + serviceId);
}
break;
default:
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""Transaction state unknown: "" +
serviceId + "" "" + result);
}
break;
}

if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""update: broadcast transaction result "" + result);
}
//comment
<start>sendBroadcast(intent);<end>
} finally {
transaction.detach(this);
stopSelfIfIdle(serviceId);
}
}"
860,"    private List<AccountType> loadTypes(String type) {
final AuthenticatorDescription auth = mAuthTypes.get(type);
if (auth == null) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Null auth type for "" + type);
}
return Collections.emptyList();
}

AccountType accountType;
if (GoogleAccountType.ACCOUNT_TYPE.equals(type)) {
accountType = new GoogleAccountType(mContext, auth.packageName);
} else if (ExchangeAccountType.isExchangeType(type)) {
accountType = new ExchangeAccountType(mContext, auth.packageName, type);
} else if (SamsungAccountType.isSamsungAccountType(mContext, type,
auth.packageName)) {
accountType = new SamsungAccountType(mContext, auth.packageName, type);
} else if (!ExternalAccountType.hasContactsXml(mContext, auth.packageName)
&& isLocalAccountType(mLocalAccountTypeFactory, type)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering local account type="" + type
+ "", packageName="" + auth.packageName);
}
accountType = mLocalAccountTypeFactory.getAccountType(type);
} else {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering external account type="" + type
+ "", packageName="" + auth.packageName);
}
accountType = new ExternalAccountType(mContext, auth.packageName, false);
}
if (!accountType.isInitialized()) {
if (accountType.isEmbedded()) {
throw new IllegalStateException(""Problem initializing embedded type ""
+ accountType.getClass().getCanonicalName());
} else {
//comment
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Skipping external account type="" + type
+ "", packageName="" + auth.packageName);
}
return Collections.emptyList();
}
}

accountType.initializeFieldsFromAuthenticator(auth);

final ImmutableList.Builder<AccountType> result = ImmutableList.builder();
result.add(accountType);

for (String extensionPackage : accountType.getExtensionPackageNames()) {
final ExternalAccountType extensionType =
new ExternalAccountType(mContext, extensionPackage, true);
<start>if (!extensionType.isInitialized()) {
//comment
continue;
}<end>
if (!extensionType.hasContactsMetadata()) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" it doesn't have the CONTACTS_STRUCTURE metadata"");
continue;
}
if (TextUtils.isEmpty(extensionType.accountType)) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" the CONTACTS_STRUCTURE metadata doesn't have the accountType""
+ "" attribute"");
continue;
}
if (!Objects.equal(extensionType.accountType, type)) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" the account type + "" + extensionType.accountType +
"" doesn't match expected type "" + type);
continue;
}
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering extension package account type=""
+ accountType.accountType + "", dataSet="" + accountType.dataSet
+ "", packageName="" + extensionPackage);
}

result.add(extensionType);
}
return result.build();
}","    private List<AccountType> loadTypes(String type) {
final AuthenticatorDescription auth = mAuthTypes.get(type);
if (auth == null) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Null auth type for "" + type);
}
return Collections.emptyList();
}

AccountType accountType;
if (GoogleAccountType.ACCOUNT_TYPE.equals(type)) {
accountType = new GoogleAccountType(mContext, auth.packageName);
} else if (ExchangeAccountType.isExchangeType(type)) {
accountType = new ExchangeAccountType(mContext, auth.packageName, type);
} else if (SamsungAccountType.isSamsungAccountType(mContext, type,
auth.packageName)) {
accountType = new SamsungAccountType(mContext, auth.packageName, type);
} else if (!ExternalAccountType.hasContactsXml(mContext, auth.packageName)
&& isLocalAccountType(mLocalAccountTypeFactory, type)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering local account type="" + type
+ "", packageName="" + auth.packageName);
}
accountType = mLocalAccountTypeFactory.getAccountType(type);
} else {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering external account type="" + type
+ "", packageName="" + auth.packageName);
}
accountType = new ExternalAccountType(mContext, auth.packageName, false);
}
if (!accountType.isInitialized()) {
if (accountType.isEmbedded()) {
throw new IllegalStateException(""Problem initializing embedded type ""
+ accountType.getClass().getCanonicalName());
} else {
//comment
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Skipping external account type="" + type
+ "", packageName="" + auth.packageName);
}
return Collections.emptyList();
}
}

accountType.initializeFieldsFromAuthenticator(auth);

final ImmutableList.Builder<AccountType> result = ImmutableList.builder();
result.add(accountType);

for (String extensionPackage : accountType.getExtensionPackageNames()) {
final ExternalAccountType extensionType =
new ExternalAccountType(mContext, extensionPackage, true);
<start>if (!extensionType.isInitialized()) {
//comment
continue;
}<end>
if (!extensionType.hasContactsMetadata()) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" it doesn't have the CONTACTS_STRUCTURE metadata"");
continue;
}
if (TextUtils.isEmpty(extensionType.accountType)) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" the CONTACTS_STRUCTURE metadata doesn't have the accountType""
+ "" attribute"");
continue;
}
if (!Objects.equal(extensionType.accountType, type)) {
Log.w(TAG, ""Skipping extension package "" + extensionPackage + "" because""
+ "" the account type + "" + extensionType.accountType +
"" doesn't match expected type "" + type);
continue;
}
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Registering extension package account type=""
+ accountType.accountType + "", dataSet="" + accountType.dataSet
+ "", packageName="" + extensionPackage);
}

result.add(extensionType);
}
return result.build();
}"
861,"    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
<start>inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);<end>
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}","    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
<start>inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);<end>
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}"
862,"protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
<start>updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);<end>
}","protected void updateServicePreferences() {
//comment
//comment
//comment
final ArrayList<Preference> servicePreferences =
new ArrayList<>(mServicePreferenceToPreferenceCategoryMap.keySet());
for (int i = 0; i < servicePreferences.size(); i++) {
Preference service = servicePreferences.get(i);
PreferenceCategory category = mServicePreferenceToPreferenceCategoryMap.get(service);
category.removePreference(service);
}

initializePreBundledServicesMapFromArray(CATEGORY_SCREEN_READER,
R.array.config_preinstalled_screen_reader_services);
initializePreBundledServicesMapFromArray(CATEGORY_CAPTIONS,
R.array.config_preinstalled_captions_services);
initializePreBundledServicesMapFromArray(CATEGORY_AUDIO,
R.array.config_preinstalled_audio_services);
initializePreBundledServicesMapFromArray(CATEGORY_DISPLAY,
R.array.config_preinstalled_display_services);
initializePreBundledServicesMapFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_preinstalled_interaction_control_services);

final List<RestrictedPreference> preferenceList = getInstalledAccessibilityList(
getPrefContext());

final PreferenceCategory downloadedServicesCategory =
mCategoryToPrefCategoryMap.get(CATEGORY_DOWNLOADED_SERVICES);

for (int i = 0, count = preferenceList.size(); i < count; ++i) {
final RestrictedPreference preference = preferenceList.get(i);
final ComponentName componentName = preference.getExtras().getParcelable(
EXTRA_COMPONENT_NAME);
PreferenceCategory prefCategory = downloadedServicesCategory;
//comment
if (mPreBundledServiceComponentToCategoryMap.containsKey(componentName)) {
prefCategory = mPreBundledServiceComponentToCategoryMap.get(componentName);
}
prefCategory.addPreference(preference);
mServicePreferenceToPreferenceCategoryMap.put(preference, prefCategory);
}

//comment
updateCategoryOrderFromArray(CATEGORY_SCREEN_READER,
R.array.config_order_screen_reader_services);
updateCategoryOrderFromArray(CATEGORY_CAPTIONS,
R.array.config_order_captions_services);
updateCategoryOrderFromArray(CATEGORY_AUDIO,
R.array.config_order_audio_services);
updateCategoryOrderFromArray(CATEGORY_INTERACTION_CONTROL,
R.array.config_order_interaction_control_services);
updateCategoryOrderFromArray(CATEGORY_DISPLAY,
R.array.config_order_display_services);

//comment
if (downloadedServicesCategory.getPreferenceCount() == 0) {
getPreferenceScreen().removePreference(downloadedServicesCategory);
} else {
getPreferenceScreen().addPreference(downloadedServicesCategory);
}

//comment
<start>updatePreferenceCategoryVisibility(CATEGORY_SCREEN_READER);<end>
}"
866,"    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);
<start>return;<end>
}
<start>if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}<end>
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
setShifted(AUTOMATIC_SHIFT);
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}","    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);
return;
}
<start>if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}<end>
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
setShifted(AUTOMATIC_SHIFT);
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}"
868,"public static int calculateMinimumAlpha(@ColorInt int foreground, @ColorInt int background,
float minContrastRatio) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}

//comment
int testForeground = setAlphaComponent(foreground, 255);
double testRatio = calculateContrast(testForeground, background);
if (testRatio < minContrastRatio) {
//comment
return -1;
}

//comment
int numIterations = 0;
<start>int minAlpha = 0;<end>
int maxAlpha = 255;

while (numIterations <= MIN_ALPHA_SEARCH_MAX_ITERATIONS &&
(maxAlpha - minAlpha) > MIN_ALPHA_SEARCH_PRECISION) {
final int testAlpha = (minAlpha + maxAlpha) / 2;

testForeground = setAlphaComponent(foreground, testAlpha);
testRatio = calculateContrast(testForeground, background);

if (testRatio < minContrastRatio) {
minAlpha = testAlpha;
} else {
maxAlpha = testAlpha;
}

numIterations++;
}

//comment
return maxAlpha;
}","public static int calculateMinimumAlpha(@ColorInt int foreground, @ColorInt int background,
float minContrastRatio) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}

//comment
int testForeground = setAlphaComponent(foreground, 255);
double testRatio = calculateContrast(testForeground, background);
if (testRatio < minContrastRatio) {
//comment
return -1;
}

//comment
<start>int numIterations = 0;
int minAlpha = 0;
int maxAlpha = 255;

while (numIterations <= MIN_ALPHA_SEARCH_MAX_ITERATIONS &&
(maxAlpha - minAlpha) > MIN_ALPHA_SEARCH_PRECISION) {
final int testAlpha = (minAlpha + maxAlpha) / 2;

testForeground = setAlphaComponent(foreground, testAlpha);
testRatio = calculateContrast(testForeground, background);

if (testRatio < minContrastRatio) {
minAlpha = testAlpha;
} else {
maxAlpha = testAlpha;
}

numIterations++;
}<end>

//comment
return maxAlpha;
}"
869,"public void onCodeInput(final int code, final long eventTime) {
//comment
//comment
//comment
//comment
//comment
if (Character.isLetter(code)) {
<start>if (wasLastInputTyping()
|| eventTime - mLastTypingTime < mStaticTimeThresholdAfterFastTyping) {
mLastLetterTypingTime = eventTime;
}<end>
} else {
<start>if (eventTime - mLastLetterTypingTime < mStaticTimeThresholdAfterFastTyping) {
//comment
mLastLetterTypingTime = eventTime;
}<end>
}
<start>mLastTypingTime = eventTime;<end>
}","public void onCodeInput(final int code, final long eventTime) {
//comment
//comment
//comment
//comment
//comment
<start>if (Character.isLetter(code)) {
if (wasLastInputTyping()
|| eventTime - mLastTypingTime < mStaticTimeThresholdAfterFastTyping) {
mLastLetterTypingTime = eventTime;
}
} else {
if (eventTime - mLastLetterTypingTime < mStaticTimeThresholdAfterFastTyping) {
//comment
mLastLetterTypingTime = eventTime;
}
}
mLastTypingTime = eventTime;<end>
}"
870,"    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);
return;
}
if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
<start>setShifted(AUTOMATIC_SHIFT);<end>
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}","    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);
return;
}
if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
<start>if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
setShifted(AUTOMATIC_SHIFT);<end>
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}"
871,"    @Override
public void finish() {
<start>super.finish();<end>
//comment
//comment
if ((appService != null) && (mTextMsg != null) && !mTextMsg.responseNeeded) {
<start>if (SubscriptionManager.isValidSlotIndex(mSlotId)) {
appService.getStkContext(mSlotId).setImmediateDialogInstance(null);
}<end>
}
}","    @Override
public void finish() {
super.finish();
//comment
//comment
<start>if ((appService != null) && (mTextMsg != null) && !mTextMsg.responseNeeded) {
if (SubscriptionManager.isValidSlotIndex(mSlotId)) {
appService.getStkContext(mSlotId).setImmediateDialogInstance(null);
}
}<end>
}"
875,"    public void invalidateNextPageToken(@NonNull String packageName, long nextPageToken)
throws AppSearchException {
mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

mLogUtil.piiTrace(""invalidateNextPageToken, request"", nextPageToken);
<start>checkNextPageToken(packageName, nextPageToken);<end>
mIcingSearchEngineLocked.invalidateNextPageToken(nextPageToken);

<start>synchronized (mNextPageTokensLocked) {
//comment
//comment
mNextPageTokensLocked.get(packageName).remove(nextPageToken);<end>
}
} finally {
mReadWriteLock.readLock().unlock();
}
}","    public void invalidateNextPageToken(@NonNull String packageName, long nextPageToken)
throws AppSearchException {
mReadWriteLock.readLock().lock();
try {
throwIfClosedLocked();

mLogUtil.piiTrace(""invalidateNextPageToken, request"", nextPageToken);
checkNextPageToken(packageName, nextPageToken);
mIcingSearchEngineLocked.invalidateNextPageToken(nextPageToken);

<start>synchronized (mNextPageTokensLocked) {
//comment
//comment
mNextPageTokensLocked.get(packageName).remove(nextPageToken);
}<end>
} finally {
mReadWriteLock.readLock().unlock();
}
}"
877,"    @Override
public void maybeStopTrackingJobLocked(JobStatus taskStatus, JobStatus incomingJob,
boolean forUpdate) {
if (taskStatus.clearTrackingController(JobStatus.TRACKING_CONTENT)) {
mTrackedTasks.remove(taskStatus);
if (taskStatus.contentObserverJobInstance != null) {
taskStatus.contentObserverJobInstance.unscheduleLocked();
if (incomingJob != null) {
if (taskStatus.contentObserverJobInstance != null
&& taskStatus.contentObserverJobInstance.mChangedAuthorities != null) {
//comment
//comment
//comment
//comment
//comment
if (incomingJob.contentObserverJobInstance == null) {
incomingJob.contentObserverJobInstance = new JobInstance(incomingJob);
}
incomingJob.contentObserverJobInstance.mChangedAuthorities
= taskStatus.contentObserverJobInstance.mChangedAuthorities;
incomingJob.contentObserverJobInstance.mChangedUris
= taskStatus.contentObserverJobInstance.mChangedUris;
taskStatus.contentObserverJobInstance.mChangedAuthorities = null;
taskStatus.contentObserverJobInstance.mChangedUris = null;
}
//comment
//comment
//comment
//comment
} else {
//comment
<start>taskStatus.contentObserverJobInstance.detachLocked();
taskStatus.contentObserverJobInstance = null;<end>
}
}
if (DEBUG) {
Slog.i(TAG, ""No longer tracking job "" + taskStatus);
}
}
}","    @Override
public void maybeStopTrackingJobLocked(JobStatus taskStatus, JobStatus incomingJob,
boolean forUpdate) {
if (taskStatus.clearTrackingController(JobStatus.TRACKING_CONTENT)) {
mTrackedTasks.remove(taskStatus);
if (taskStatus.contentObserverJobInstance != null) {
taskStatus.contentObserverJobInstance.unscheduleLocked();
if (incomingJob != null) {
if (taskStatus.contentObserverJobInstance != null
&& taskStatus.contentObserverJobInstance.mChangedAuthorities != null) {
//comment
//comment
//comment
//comment
//comment
if (incomingJob.contentObserverJobInstance == null) {
incomingJob.contentObserverJobInstance = new JobInstance(incomingJob);
}
incomingJob.contentObserverJobInstance.mChangedAuthorities
= taskStatus.contentObserverJobInstance.mChangedAuthorities;
incomingJob.contentObserverJobInstance.mChangedUris
= taskStatus.contentObserverJobInstance.mChangedUris;
taskStatus.contentObserverJobInstance.mChangedAuthorities = null;
taskStatus.contentObserverJobInstance.mChangedUris = null;
}
//comment
//comment
//comment
//comment
} else {
//comment
<start>taskStatus.contentObserverJobInstance.detachLocked();<end>
taskStatus.contentObserverJobInstance = null;
}
}
if (DEBUG) {
Slog.i(TAG, ""No longer tracking job "" + taskStatus);
}
}
}"
878,"    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
<start>return subjectStored.equals(subjectReceived);
} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {<end>
//comment
return true;
}
}
}

return false;
}","    private static boolean isDuplicateMessageExtra(Cursor cursor, RetrieveConf rc) {
//comment
EncodedStringValue encodedSubjectReceived = null;
EncodedStringValue encodedSubjectStored = null;
String subjectReceived = null;
String subjectStored = null;
String subject = null;

encodedSubjectReceived = rc.getSubject();
if (encodedSubjectReceived != null) {
subjectReceived = encodedSubjectReceived.getString();
}

for (cursor.moveToFirst(); !cursor.isAfterLast(); cursor.moveToNext()) {
int subjectIdx = cursor.getColumnIndex(Mms.SUBJECT);
int charsetIdx = cursor.getColumnIndex(Mms.SUBJECT_CHARSET);
subject = cursor.getString(subjectIdx);
int charset = cursor.getInt(charsetIdx);
if (subject != null) {
encodedSubjectStored = new EncodedStringValue(charset, PduPersister
.getBytes(subject));
}
if (encodedSubjectStored == null && encodedSubjectReceived == null) {
//comment
return true;
} else if (encodedSubjectStored != null && encodedSubjectReceived != null) {
subjectStored = encodedSubjectStored.getString();
<start>if (!TextUtils.isEmpty(subjectStored) && !TextUtils.isEmpty(subjectReceived)) {
//comment
return subjectStored.equals(subjectReceived);
} else if (TextUtils.isEmpty(subjectStored) && TextUtils.isEmpty(subjectReceived)) {<end>
//comment
return true;
}
}
}

return false;
}"
880,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
<start>if (!permission.isGranted()) {
permission.setGranted(true);
}<end>

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
<start>if (!permission.isGranted()) {
permission.setGranted(true);
}<end>

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
882,"<start>private String getAccessibilityServiceFragmentTypeName(AccessibilityServiceInfo info) {
//comment
final String volumeShortcutToggleAccessibilityServicePreferenceFragment =
VolumeShortcutToggleAccessibilityServicePreferenceFragment.class.getName();<end>

switch (AccessibilityUtil.getAccessibilityServiceFragmentType(info)) {
case AccessibilityServiceFragmentType.VOLUME_SHORTCUT_TOGGLE:
return volumeShortcutToggleAccessibilityServicePreferenceFragment;
case AccessibilityServiceFragmentType.INVISIBLE_TOGGLE:
return InvisibleToggleAccessibilityServicePreferenceFragment.class.getName();
case AccessibilityServiceFragmentType.TOGGLE:
return ToggleAccessibilityServicePreferenceFragment.class.getName();
default:
//comment
throw new AssertionError();
}
}","private String getAccessibilityServiceFragmentTypeName(AccessibilityServiceInfo info) {
//comment
<start>final String volumeShortcutToggleAccessibilityServicePreferenceFragment =
VolumeShortcutToggleAccessibilityServicePreferenceFragment.class.getName();<end>

switch (AccessibilityUtil.getAccessibilityServiceFragmentType(info)) {
case AccessibilityServiceFragmentType.VOLUME_SHORTCUT_TOGGLE:
return volumeShortcutToggleAccessibilityServicePreferenceFragment;
case AccessibilityServiceFragmentType.INVISIBLE_TOGGLE:
return InvisibleToggleAccessibilityServicePreferenceFragment.class.getName();
case AccessibilityServiceFragmentType.TOGGLE:
return ToggleAccessibilityServicePreferenceFragment.class.getName();
default:
//comment
throw new AssertionError();
}
}"
883,"private CharSequence delayTimeToString(int delayMillis) {
final int quantity = (delayMillis == 1000) ? Quantity.ONE : Quantity.FEW;
<start>final float delaySecond = (float) delayMillis / 1000;
//comment
final String decimalFormat = (delaySecond == 1) ? ""%.0f"" : ""%.1f"";<end>

return mContext.getResources().getQuantityString(
R.plurals.accessibilty_autoclick_delay_unit_second,
quantity, String.format(decimalFormat, delaySecond));
}","private CharSequence delayTimeToString(int delayMillis) {
final int quantity = (delayMillis == 1000) ? Quantity.ONE : Quantity.FEW;
final float delaySecond = (float) delayMillis / 1000;
//comment
<start>final String decimalFormat = (delaySecond == 1) ? ""%.0f"" : ""%.1f"";<end>

return mContext.getResources().getQuantityString(
R.plurals.accessibilty_autoclick_delay_unit_second,
quantity, String.format(decimalFormat, delaySecond));
}"
885,"private void initVideoCall(int callType) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (DBG) log(""initVideoCall mAudioDeviceInitialized: "" + mAudioDeviceInitialized);
if (!mAudioDeviceInitialized) {
switchInVideoCallAudio();
<start>mAudioDeviceInitialized = true;<end>
}
//comment
mVideoCallPanel.onCallInitiating(callType);
}","private void initVideoCall(int callType) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (DBG) log(""initVideoCall mAudioDeviceInitialized: "" + mAudioDeviceInitialized);
if (!mAudioDeviceInitialized) {
switchInVideoCallAudio();
mAudioDeviceInitialized = true;
}
//comment
<start>mVideoCallPanel.onCallInitiating(callType);<end>
}"
886,"<start>    private void handlePreferenceChange(String value) {<end>
//comment
putSecureString(Settings.Secure.ACCESSIBILITY_NON_INTERACTIVE_UI_TIMEOUT_MS, value);
<start>putSecureString(Settings.Secure.ACCESSIBILITY_INTERACTIVE_UI_TIMEOUT_MS, value);<end>
}","    private void handlePreferenceChange(String value) {
//comment
<start>putSecureString(Settings.Secure.ACCESSIBILITY_NON_INTERACTIVE_UI_TIMEOUT_MS, value);
putSecureString(Settings.Secure.ACCESSIBILITY_INTERACTIVE_UI_TIMEOUT_MS, value);<end>
}"
891,"    protected void updateRingingCall(CallManager cm) {
if (DBG) log(""updateRingingCall()..."");

Call ringingCall = cm.getFirstActiveRingingCall();

//comment
<start>displayMainCallStatus(cm, ringingCall);<end>

//comment
//comment
//comment
//comment
displaySecondaryCallStatus(cm, null);
}","    protected void updateRingingCall(CallManager cm) {
if (DBG) log(""updateRingingCall()..."");

<start>Call ringingCall = cm.getFirstActiveRingingCall();<end>

//comment
<start>displayMainCallStatus(cm, ringingCall);<end>

//comment
//comment
//comment
//comment
displaySecondaryCallStatus(cm, null);
}"
892,"    private void createSignalInfoToneGenerator() {
//comment
//comment
//comment
//comment
if (mSignalInfoToneGenerator == null) {
try {
<start>mSignalInfoToneGenerator = new ToneGenerator(AudioManager.STREAM_VOICE_CALL,
TONE_RELATIVE_VOLUME_SIGNALINFO);
Log.d(LOG_TAG, ""CallNotifier: mSignalInfoToneGenerator created when toneplay"");<end>
} catch (RuntimeException e) {
Log.w(LOG_TAG, ""CallNotifier: Exception caught while creating "" +
""mSignalInfoToneGenerator: "" + e);
mSignalInfoToneGenerator = null;
}
} else {
Log.d(LOG_TAG, ""mSignalInfoToneGenerator created already, hence skipping"");
}
}","    private void createSignalInfoToneGenerator() {
//comment
//comment
//comment
//comment
if (mSignalInfoToneGenerator == null) {
try {
<start>mSignalInfoToneGenerator = new ToneGenerator(AudioManager.STREAM_VOICE_CALL,
TONE_RELATIVE_VOLUME_SIGNALINFO);<end>
Log.d(LOG_TAG, ""CallNotifier: mSignalInfoToneGenerator created when toneplay"");
} catch (RuntimeException e) {
Log.w(LOG_TAG, ""CallNotifier: Exception caught while creating "" +
""mSignalInfoToneGenerator: "" + e);
mSignalInfoToneGenerator = null;
}
} else {
Log.d(LOG_TAG, ""mSignalInfoToneGenerator created already, hence skipping"");
}
}"
893,"    private static int getCharGroupMaximumSize(final CharGroup group, final FormatOptions options) {
int size = getGroupHeaderSize(group, options);
//comment
<start>if (group.isTerminal()) size += FormatSpec.GROUP_FREQUENCY_SIZE;<end>
size += FormatSpec.GROUP_MAX_ADDRESS_SIZE;
size += getShortcutListSize(group.mShortcutTargets);
if (null != group.mBigrams) {
size += (FormatSpec.GROUP_ATTRIBUTE_FLAGS_SIZE
+ FormatSpec.GROUP_ATTRIBUTE_MAX_ADDRESS_SIZE)
* group.mBigrams.size();
}
return size;
}","    private static int getCharGroupMaximumSize(final CharGroup group, final FormatOptions options) {
int size = getGroupHeaderSize(group, options);
//comment
<start>if (group.isTerminal()) size += FormatSpec.GROUP_FREQUENCY_SIZE;<end>
size += FormatSpec.GROUP_MAX_ADDRESS_SIZE;
size += getShortcutListSize(group.mShortcutTargets);
if (null != group.mBigrams) {
size += (FormatSpec.GROUP_ATTRIBUTE_FLAGS_SIZE
+ FormatSpec.GROUP_ATTRIBUTE_MAX_ADDRESS_SIZE)
* group.mBigrams.size();
}
return size;
}"
894,"@Override
public void setValues(DataKind kind, ValuesDelta entry, RawContactDelta state, boolean readOnly,
ViewIdGenerator vig) {
<start>mKind = kind;<end>
mEntry = entry;
mState = state;
mReadOnly = readOnly;
mViewIdGenerator = vig;
setId(vig.getId(state, kind, entry, ViewIdGenerator.NO_VIEW_INDEX));

if (!entry.isVisible()) {
//comment
setVisibility(View.GONE);
return;
}
setVisibility(View.VISIBLE);

//comment
<start>final boolean hasTypes = RawContactModifier.hasEditTypes(kind);
setupLabelButton(hasTypes);<end>
mLabel.setEnabled(!readOnly && isEnabled());
if (mKind.titleRes > 0) {
mLabel.setContentDescription(getContext().getResources().getString(mKind.titleRes));
}
mType = RawContactModifier.getCurrentType(entry, kind);
rebuildLabel();
}","@Override
public void setValues(DataKind kind, ValuesDelta entry, RawContactDelta state, boolean readOnly,
ViewIdGenerator vig) {
mKind = kind;
mEntry = entry;
mState = state;
mReadOnly = readOnly;
mViewIdGenerator = vig;
setId(vig.getId(state, kind, entry, ViewIdGenerator.NO_VIEW_INDEX));

if (!entry.isVisible()) {
//comment
setVisibility(View.GONE);
return;
}
setVisibility(View.VISIBLE);

//comment
<start>final boolean hasTypes = RawContactModifier.hasEditTypes(kind);
setupLabelButton(hasTypes);
mLabel.setEnabled(!readOnly && isEnabled());
if (mKind.titleRes > 0) {
mLabel.setContentDescription(getContext().getResources().getString(mKind.titleRes));
}<end>
mType = RawContactModifier.getCurrentType(entry, kind);
rebuildLabel();
}"
895,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

<start>if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}<end>

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

<start>if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}<end>

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
896,"static Intent getLaunchFillInIntent(Context context, long id, long start, long end,
boolean allDay) {
final Intent fillInIntent = new Intent();
String dataString = ""content://com.android.calendar/events"";
if (id != 0) {
fillInIntent.putExtra(Utils.INTENT_KEY_DETAIL_VIEW, true);
fillInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
Intent.FLAG_ACTIVITY_TASK_ON_HOME);

dataString += ""/"" + id;
//comment
fillInIntent.setClass(context, EventInfoActivity.class);
<start>} else {<end>
//comment
fillInIntent.setClass(context, AllInOneActivity.class);
}
Uri data = Uri.parse(dataString);
fillInIntent.setData(data);
fillInIntent.putExtra(EXTRA_EVENT_BEGIN_TIME, start);
fillInIntent.putExtra(EXTRA_EVENT_END_TIME, end);
fillInIntent.putExtra(EXTRA_EVENT_ALL_DAY, allDay);

return fillInIntent;
}","static Intent getLaunchFillInIntent(Context context, long id, long start, long end,
boolean allDay) {
final Intent fillInIntent = new Intent();
String dataString = ""content://com.android.calendar/events"";
<start>if (id != 0) {<end>
fillInIntent.putExtra(Utils.INTENT_KEY_DETAIL_VIEW, true);
fillInIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK |
Intent.FLAG_ACTIVITY_TASK_ON_HOME);

dataString += ""/"" + id;
//comment
fillInIntent.setClass(context, EventInfoActivity.class);
<start>} else {
//comment
fillInIntent.setClass(context, AllInOneActivity.class);
}<end>
Uri data = Uri.parse(dataString);
fillInIntent.setData(data);
fillInIntent.putExtra(EXTRA_EVENT_BEGIN_TIME, start);
fillInIntent.putExtra(EXTRA_EVENT_END_TIME, end);
fillInIntent.putExtra(EXTRA_EVENT_ALL_DAY, allDay);

return fillInIntent;
}"
901,"    @Override
public String getString() {
checkNotDestroyed();
try {
<start>byte[] bytes = IOUtils.toByteArray(getAsStream());<end>
//comment
if (bytes.length > ImapResponseParser.LITERAL_KEEP_IN_MEMORY_THRESHOLD) {
throw new IOException();
}
return Utility.fromAscii(bytes);
} catch (IOException e) {
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Error while reading temp file"", e);
return """";
}
}","    @Override
public String getString() {
checkNotDestroyed();
try {
byte[] bytes = IOUtils.toByteArray(getAsStream());
//comment
<start>if (bytes.length > ImapResponseParser.LITERAL_KEEP_IN_MEMORY_THRESHOLD) {
throw new IOException();
}<end>
return Utility.fromAscii(bytes);
} catch (IOException e) {
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Error while reading temp file"", e);
return """";
}
}"
902,"    public void onCodeInput(final int code, final int autoCaps) {
if (DEBUG_EVENT) {
Log.d(TAG, ""onCodeInput: code="" + Constants.printableCode(code)
+ "" autoCaps="" + autoCaps + "" "" + this);
}

switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
if (code == Constants.CODE_SWITCH_ALPHA_SYMBOL) {
//comment
if (mIsAlphabetMode) {
mSwitchState = SWITCH_STATE_ALPHA;
} else {
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
}
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
if (code == Constants.CODE_SHIFT) {
//comment
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
break;
case SWITCH_STATE_SYMBOL_BEGIN:
if (!isSpaceCharacter(code) && (Constants.isLetterCode(code)
|| code == Constants.CODE_OUTPUT_TEXT)) {
<start>mSwitchState = SWITCH_STATE_SYMBOL;<end>
}
break;
case SWITCH_STATE_SYMBOL:
//comment
//comment
if (isSpaceCharacter(code)) {
<start>toggleAlphabetAndSymbols();
mPrevSymbolsKeyboardWasShifted = false;<end>
}
<start>break;<end>
}

//comment
if (Constants.isLetterCode(code)) {
updateAlphabetShiftState(autoCaps, RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE);
}
}","    public void onCodeInput(final int code, final int autoCaps) {
if (DEBUG_EVENT) {
Log.d(TAG, ""onCodeInput: code="" + Constants.printableCode(code)
+ "" autoCaps="" + autoCaps + "" "" + this);
}

switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
if (code == Constants.CODE_SWITCH_ALPHA_SYMBOL) {
//comment
if (mIsAlphabetMode) {
mSwitchState = SWITCH_STATE_ALPHA;
} else {
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
}
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
if (code == Constants.CODE_SHIFT) {
//comment
mSwitchState = SWITCH_STATE_SYMBOL_BEGIN;
}
break;
case SWITCH_STATE_SYMBOL_BEGIN:
if (!isSpaceCharacter(code) && (Constants.isLetterCode(code)
|| code == Constants.CODE_OUTPUT_TEXT)) {
mSwitchState = SWITCH_STATE_SYMBOL;
}
break;
case SWITCH_STATE_SYMBOL:
//comment
//comment
<start>if (isSpaceCharacter(code)) {
toggleAlphabetAndSymbols();
mPrevSymbolsKeyboardWasShifted = false;
}<end>
break;
}

//comment
if (Constants.isLetterCode(code)) {
updateAlphabetShiftState(autoCaps, RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE);
}
}"
903,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
<start>if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}<end>
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
<start>mShiftKeyState.onPress();<end>
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
<start>mShiftKeyState.onPress();<end>
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
<start>mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();<end>
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
<start>if (mAlphabetShiftState.isShiftLocked()) {<end>
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isAutomaticShifted()) {<end>
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();<end>
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
905,"private View createPinEntryView(String deviceName) {
View view = getLayoutInflater().inflate(R.layout.bluetooth_pin_entry, null);
TextView messageView = (TextView) view.findViewById(R.id.message);
TextView messageView2 = (TextView) view.findViewById(R.id.message_below_pin);
CheckBox alphanumericPin = (CheckBox) view.findViewById(R.id.alphanumeric_pin);
mPairingView = (EditText) view.findViewById(R.id.text);
mPairingView.addTextChangedListener(this);
alphanumericPin.setOnCheckedChangeListener(this);

int messageId1;
int messageId2;
int maxLength;
switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_PIN:
if (mIsSecurityHigh)
messageId1 = R.string.bluetooth_enter_pin_msg_hs;
else
messageId1 = R.string.bluetooth_enter_pin_msg;

messageId2 = R.string.bluetooth_enter_pin_other_device;
//comment
maxLength = BLUETOOTH_PIN_MAX_LENGTH;
break;

case BluetoothDevice.PAIRING_VARIANT_PASSKEY:
messageId1 = R.string.bluetooth_enter_passkey_msg;
messageId2 = R.string.bluetooth_enter_passkey_other_device;
//comment
maxLength = BLUETOOTH_PASSKEY_MAX_LENGTH;
alphanumericPin.setVisibility(View.GONE);
break;

default:
Log.e(TAG, ""Incorrect pairing type for createPinEntryView: "" + mType);
return null;
}

//comment
<start>String messageText = getString(messageId1, deviceName);
messageView.setText(Html.fromHtml(messageText));
messageView2.setText(messageId2);<end>
mPairingView.setInputType(InputType.TYPE_CLASS_NUMBER);
mPairingView.setFilters(new InputFilter[] {
new LengthFilter(maxLength) });

return view;
}","private View createPinEntryView(String deviceName) {
View view = getLayoutInflater().inflate(R.layout.bluetooth_pin_entry, null);
TextView messageView = (TextView) view.findViewById(R.id.message);
TextView messageView2 = (TextView) view.findViewById(R.id.message_below_pin);
CheckBox alphanumericPin = (CheckBox) view.findViewById(R.id.alphanumeric_pin);
mPairingView = (EditText) view.findViewById(R.id.text);
mPairingView.addTextChangedListener(this);
alphanumericPin.setOnCheckedChangeListener(this);

int messageId1;
int messageId2;
int maxLength;
switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_PIN:
if (mIsSecurityHigh)
messageId1 = R.string.bluetooth_enter_pin_msg_hs;
else
messageId1 = R.string.bluetooth_enter_pin_msg;

messageId2 = R.string.bluetooth_enter_pin_other_device;
//comment
maxLength = BLUETOOTH_PIN_MAX_LENGTH;
break;

case BluetoothDevice.PAIRING_VARIANT_PASSKEY:
messageId1 = R.string.bluetooth_enter_passkey_msg;
messageId2 = R.string.bluetooth_enter_passkey_other_device;
//comment
maxLength = BLUETOOTH_PASSKEY_MAX_LENGTH;
alphanumericPin.setVisibility(View.GONE);
break;

default:
Log.e(TAG, ""Incorrect pairing type for createPinEntryView: "" + mType);
return null;
}

//comment
<start>String messageText = getString(messageId1, deviceName);
messageView.setText(Html.fromHtml(messageText));<end>
messageView2.setText(messageId2);
mPairingView.setInputType(InputType.TYPE_CLASS_NUMBER);
mPairingView.setFilters(new InputFilter[] {
new LengthFilter(maxLength) });

return view;
}"
906,"@Override
public void onClick(View view) {
int id = view.getId();
if (id == R.id.grant_singleton) {
if (mResultListener != null) {
mResultListener.onPermissionGrantResult(mGroupName, CANCELED);
} else {
mActivity.finish();
}
return;
}
int button = -1;
try {
button = BUTTON_RES_ID_TO_NUM.get(id);
} catch (NullPointerException e) {
//comment
<start>return;<end>
}
<start>switch (button) {<end>
case ALLOW_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, GRANTED_ALWAYS);
}
break;
case ALLOW_FOREGROUND_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
GRANTED_FOREGROUND_ONLY);
}
break;
case ALLOW_ALWAYS_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
GRANTED_ALWAYS);
}
break;
case ALLOW_ONE_TIME_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, GRANTED_ONE_TIME);
}
break;
case DENY_BUTTON:
case NO_UPGRADE_BUTTON:
case NO_UPGRADE_OT_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, DENIED);
}
break;
case DENY_AND_DONT_ASK_AGAIN_BUTTON:
case NO_UPGRADE_AND_DONT_ASK_AGAIN_BUTTON:
case NO_UPGRADE_OT_AND_DONT_ASK_AGAIN_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
DENIED_DO_NOT_ASK_AGAIN);
}
break;
}

}","@Override
public void onClick(View view) {
int id = view.getId();
if (id == R.id.grant_singleton) {
if (mResultListener != null) {
mResultListener.onPermissionGrantResult(mGroupName, CANCELED);
} else {
mActivity.finish();
}
return;
}
int button = -1;
<start>try {<end>
button = BUTTON_RES_ID_TO_NUM.get(id);
<start>} catch (NullPointerException e) {
//comment
return;
}<end>
switch (button) {
case ALLOW_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, GRANTED_ALWAYS);
}
break;
case ALLOW_FOREGROUND_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
GRANTED_FOREGROUND_ONLY);
}
break;
case ALLOW_ALWAYS_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
GRANTED_ALWAYS);
}
break;
case ALLOW_ONE_TIME_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, GRANTED_ONE_TIME);
}
break;
case DENY_BUTTON:
case NO_UPGRADE_BUTTON:
case NO_UPGRADE_OT_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName, DENIED);
}
break;
case DENY_AND_DONT_ASK_AGAIN_BUTTON:
case NO_UPGRADE_AND_DONT_ASK_AGAIN_BUTTON:
case NO_UPGRADE_OT_AND_DONT_ASK_AGAIN_BUTTON:
if (mResultListener != null) {
view.performAccessibilityAction(
AccessibilityNodeInfo.ACTION_CLEAR_ACCESSIBILITY_FOCUS, null);
mResultListener.onPermissionGrantResult(mGroupName,
DENIED_DO_NOT_ASK_AGAIN);
}
break;
}

}"
907,"    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

addPreferencesFromResource(R.xml.msim_network_setting);

mPhone = ((MSimPhoneGlobals)PhoneGlobals.getInstance()).getDefaultPhone();

//comment
<start>PreferenceScreen prefSet = getPreferenceScreen();<end>

mButtonDataEnabled = (CheckBoxPreference) prefSet.findPreference(BUTTON_DATA_ENABLED_KEY);
mButtonDataRoam = (CheckBoxPreference) prefSet.findPreference(BUTTON_ROAMING_KEY);
mLteDataServicePref = prefSet.findPreference(BUTTON_CDMA_LTE_DATA_SERVICE_KEY);

boolean isLteOnCdma = mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;

PreferenceScreen manageSub = (PreferenceScreen) prefSet.findPreference(
BUTTON_MANAGE_SUB_KEY);
if (manageSub != null) {
Intent intent = manageSub.getIntent();
intent.putExtra(SelectSubscription.PACKAGE, ""com.android.phone"");
intent.putExtra(SelectSubscription.TARGET_CLASS,
""com.android.phone.MSimMobileNetworkSubSettings"");
}

final boolean missingDataServiceUrl = TextUtils.isEmpty(
android.provider.Settings.Global.getString(getContentResolver(),
android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL));
if (!isLteOnCdma || missingDataServiceUrl) {
prefSet.removePreference(mLteDataServicePref);
} else {
android.util.Log.d(LOG_TAG, ""keep ltePref"");
}

ActionBar actionBar = getActionBar();
if (actionBar != null) {
//comment
actionBar.setDisplayHomeAsUpEnabled(true);
}
}","    @Override
protected void onCreate(Bundle icicle) {
super.onCreate(icicle);

addPreferencesFromResource(R.xml.msim_network_setting);

mPhone = ((MSimPhoneGlobals)PhoneGlobals.getInstance()).getDefaultPhone();

//comment
<start>PreferenceScreen prefSet = getPreferenceScreen();<end>

mButtonDataEnabled = (CheckBoxPreference) prefSet.findPreference(BUTTON_DATA_ENABLED_KEY);
mButtonDataRoam = (CheckBoxPreference) prefSet.findPreference(BUTTON_ROAMING_KEY);
mLteDataServicePref = prefSet.findPreference(BUTTON_CDMA_LTE_DATA_SERVICE_KEY);

boolean isLteOnCdma = mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE;

PreferenceScreen manageSub = (PreferenceScreen) prefSet.findPreference(
BUTTON_MANAGE_SUB_KEY);
if (manageSub != null) {
Intent intent = manageSub.getIntent();
intent.putExtra(SelectSubscription.PACKAGE, ""com.android.phone"");
intent.putExtra(SelectSubscription.TARGET_CLASS,
""com.android.phone.MSimMobileNetworkSubSettings"");
}

final boolean missingDataServiceUrl = TextUtils.isEmpty(
android.provider.Settings.Global.getString(getContentResolver(),
android.provider.Settings.Global.SETUP_PREPAID_DATA_SERVICE_URL));
if (!isLteOnCdma || missingDataServiceUrl) {
prefSet.removePreference(mLteDataServicePref);
} else {
android.util.Log.d(LOG_TAG, ""keep ltePref"");
}

ActionBar actionBar = getActionBar();
if (actionBar != null) {
//comment
actionBar.setDisplayHomeAsUpEnabled(true);
}
}"
908,"public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
<start>if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}<end>

//comment
<start>mRowInfos.addAll(bucket);<end>
count += bucket.size();
}
<start>day++;<end>
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}","public void buildFromCursor(Cursor cursor, String timeZone) {
final Time recycle = new Time(timeZone);
final ArrayList<LinkedList<RowInfo>> mBuckets =
new ArrayList<LinkedList<RowInfo>>(CalendarAppWidgetService.MAX_DAYS);
for (int i = 0; i < CalendarAppWidgetService.MAX_DAYS; i++) {
mBuckets.add(new LinkedList<RowInfo>());
}
recycle.setToNow();
mShowTZ = !TextUtils.equals(timeZone, Time.getCurrentTimezone());
if (mShowTZ) {
mHomeTZName = TimeZone.getTimeZone(timeZone).getDisplayName(recycle.isDst != 0,
TimeZone.SHORT);
}

cursor.moveToPosition(-1);
String tz = Utils.getTimeZone(mContext, null);
while (cursor.moveToNext()) {
final int rowId = cursor.getPosition();
final long eventId = cursor.getLong(CalendarAppWidgetService.INDEX_EVENT_ID);
final boolean allDay = cursor.getInt(CalendarAppWidgetService.INDEX_ALL_DAY) != 0;
long start = cursor.getLong(CalendarAppWidgetService.INDEX_BEGIN);
long end = cursor.getLong(CalendarAppWidgetService.INDEX_END);
final String title = cursor.getString(CalendarAppWidgetService.INDEX_TITLE);
final String location =
cursor.getString(CalendarAppWidgetService.INDEX_EVENT_LOCATION);
//comment
//comment
final int startDay = cursor.getInt(CalendarAppWidgetService.INDEX_START_DAY);
final int endDay = cursor.getInt(CalendarAppWidgetService.INDEX_END_DAY);
final int color = cursor.getInt(CalendarAppWidgetService.INDEX_COLOR);
final int selfStatus = cursor
.getInt(CalendarAppWidgetService.INDEX_SELF_ATTENDEE_STATUS);

//comment
if (allDay) {
start = Utils.convertAlldayUtcToLocal(recycle, start, tz);
end = Utils.convertAlldayUtcToLocal(recycle, end, tz);
}

if (LOGD) {
Log.d(TAG, ""Row #"" + rowId + "" allDay:"" + allDay + "" start:"" + start
+ "" end:"" + end + "" eventId:"" + eventId);
}

//comment
//comment
if (end < mNow) {
continue;
}

int i = mEventInfos.size();
mEventInfos.add(populateEventInfo(eventId, allDay, start, end, startDay, endDay, title,
location, color, selfStatus));
//comment
int from = Math.max(startDay, mTodayJulianDay);
int to = Math.min(endDay, mMaxJulianDay);
for (int day = from; day <= to; day++) {
LinkedList<RowInfo> bucket = mBuckets.get(day - mTodayJulianDay);
RowInfo rowInfo = new RowInfo(RowInfo.TYPE_MEETING, i);
if (allDay) {
bucket.addFirst(rowInfo);
} else {
bucket.add(rowInfo);
}
}
}

int day = mTodayJulianDay;
int count = 0;
for (LinkedList<RowInfo> bucket : mBuckets) {
if (!bucket.isEmpty()) {
//comment
if (day != mTodayJulianDay) {
final DayInfo dayInfo = populateDayInfo(day, recycle);
//comment
final int dayIndex = mDayInfos.size();
mDayInfos.add(dayInfo);
mRowInfos.add(new RowInfo(RowInfo.TYPE_DAY, dayIndex));
}

//comment
<start>mRowInfos.addAll(bucket);
count += bucket.size();<end>
}
day++;
if (count >= CalendarAppWidgetService.EVENT_MIN_COUNT) {
break;
}
}
}"
909,"    @Override
public void maybeStartTrackingJobLocked(JobStatus taskStatus, JobStatus lastJob) {
if (taskStatus.hasContentTriggerConstraint()) {
final long nowElapsed = sElapsedRealtimeClock.millis();
if (taskStatus.contentObserverJobInstance == null) {
taskStatus.contentObserverJobInstance = new JobInstance(taskStatus);
}
if (DEBUG) {
Slog.i(TAG, ""Tracking content-trigger job "" + taskStatus);
}
mTrackedTasks.add(taskStatus);
taskStatus.setTrackingController(JobStatus.TRACKING_CONTENT);
boolean havePendingUris = false;
//comment
//comment
if (taskStatus.contentObserverJobInstance.mChangedAuthorities != null) {
havePendingUris = true;
}
//comment
//comment
if (taskStatus.changedAuthorities != null) {
havePendingUris = true;
if (taskStatus.contentObserverJobInstance.mChangedAuthorities == null) {
taskStatus.contentObserverJobInstance.mChangedAuthorities
= new ArraySet<>();
}
for (String auth : taskStatus.changedAuthorities) {
taskStatus.contentObserverJobInstance.mChangedAuthorities.add(auth);
}
if (taskStatus.changedUris != null) {
if (taskStatus.contentObserverJobInstance.mChangedUris == null) {
taskStatus.contentObserverJobInstance.mChangedUris = new ArraySet<>();
}
for (Uri uri : taskStatus.changedUris) {
taskStatus.contentObserverJobInstance.mChangedUris.add(uri);
}
}
}
taskStatus.changedAuthorities = null;
taskStatus.changedUris = null;
taskStatus.setContentTriggerConstraintSatisfied(nowElapsed, havePendingUris);
}
if (lastJob != null && lastJob.contentObserverJobInstance != null) {
//comment
<start>lastJob.contentObserverJobInstance.detachLocked();<end>
lastJob.contentObserverJobInstance = null;
}
}","    @Override
public void maybeStartTrackingJobLocked(JobStatus taskStatus, JobStatus lastJob) {
if (taskStatus.hasContentTriggerConstraint()) {
final long nowElapsed = sElapsedRealtimeClock.millis();
if (taskStatus.contentObserverJobInstance == null) {
taskStatus.contentObserverJobInstance = new JobInstance(taskStatus);
}
if (DEBUG) {
Slog.i(TAG, ""Tracking content-trigger job "" + taskStatus);
}
mTrackedTasks.add(taskStatus);
taskStatus.setTrackingController(JobStatus.TRACKING_CONTENT);
boolean havePendingUris = false;
//comment
//comment
if (taskStatus.contentObserverJobInstance.mChangedAuthorities != null) {
havePendingUris = true;
}
//comment
//comment
if (taskStatus.changedAuthorities != null) {
havePendingUris = true;
if (taskStatus.contentObserverJobInstance.mChangedAuthorities == null) {
taskStatus.contentObserverJobInstance.mChangedAuthorities
= new ArraySet<>();
}
for (String auth : taskStatus.changedAuthorities) {
taskStatus.contentObserverJobInstance.mChangedAuthorities.add(auth);
}
if (taskStatus.changedUris != null) {
if (taskStatus.contentObserverJobInstance.mChangedUris == null) {
taskStatus.contentObserverJobInstance.mChangedUris = new ArraySet<>();
}
for (Uri uri : taskStatus.changedUris) {
taskStatus.contentObserverJobInstance.mChangedUris.add(uri);
}
}
}
taskStatus.changedAuthorities = null;
taskStatus.changedUris = null;
taskStatus.setContentTriggerConstraintSatisfied(nowElapsed, havePendingUris);
}
if (lastJob != null && lastJob.contentObserverJobInstance != null) {
//comment
<start>lastJob.contentObserverJobInstance.detachLocked();<end>
lastJob.contentObserverJobInstance = null;
}
}"
912,"private void doSendId(boolean hasIdCapability, String capabilities)
throws MessagingException {
if (!hasIdCapability) return;

//comment
String host = mTransport.getHost();
if (host.toLowerCase().endsWith("".secureserver.net"")) return;

//comment
String mUserAgent =
ImapStore.getImapId(mImapStore.getContext(), mImapStore.getUsername(), host,
capabilities);

if (mUserAgent != null) {
mIdPhrase = ImapConstants.ID + "" ("" + mUserAgent + "")"";
} else if (DEBUG_FORCE_SEND_ID) {
mIdPhrase = ImapConstants.ID + "" "" + ImapConstants.NIL;
}
//comment

//comment
if (mIdPhrase != null) {
try {
executeSimpleCommand(mIdPhrase);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
//comment
//comment
}
}
}","private void doSendId(boolean hasIdCapability, String capabilities)
throws MessagingException {
if (!hasIdCapability) return;

//comment
String host = mTransport.getHost();
if (host.toLowerCase().endsWith("".secureserver.net"")) return;

//comment
String mUserAgent =
ImapStore.getImapId(mImapStore.getContext(), mImapStore.getUsername(), host,
capabilities);

if (mUserAgent != null) {
mIdPhrase = ImapConstants.ID + "" ("" + mUserAgent + "")"";
} else if (DEBUG_FORCE_SEND_ID) {
mIdPhrase = ImapConstants.ID + "" "" + ImapConstants.NIL;
}
//comment

//comment
<start>if (mIdPhrase != null) {
try {
executeSimpleCommand(mIdPhrase);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
//comment
//comment
}
}<end>
}"
913,"@Override
protected void onCreate(Bundle savedInstanceState) {
//comment
mInboxId = getIntent().getIntExtra(EXTRA_INBOX_ID, -1);
mFoldersUri = getIntent().getParcelableExtra(EXTRA_FOLDERS_URI);

if (mFoldersUri != null) {
getLoaderManager().initLoader(FOLDERS_LOADER_ID, null,
new MailboxSettingsFolderLoaderCallbacks());
}

super.onCreate(savedInstanceState);

//comment
<start>ActionBar actionBar = getActionBar();
if (actionBar != null) {
actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP, ActionBar.DISPLAY_HOME_AS_UP);
//comment
actionBar.setIcon(android.R.color.transparent);
actionBar.setDisplayUseLogoEnabled(false);
}<end>
}","@Override
protected void onCreate(Bundle savedInstanceState) {
//comment
mInboxId = getIntent().getIntExtra(EXTRA_INBOX_ID, -1);
mFoldersUri = getIntent().getParcelableExtra(EXTRA_FOLDERS_URI);

if (mFoldersUri != null) {
getLoaderManager().initLoader(FOLDERS_LOADER_ID, null,
new MailboxSettingsFolderLoaderCallbacks());
}

super.onCreate(savedInstanceState);

//comment
<start>ActionBar actionBar = getActionBar();
if (actionBar != null) {
actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP, ActionBar.DISPLAY_HOME_AS_UP);
//comment
actionBar.setIcon(android.R.color.transparent);
actionBar.setDisplayUseLogoEnabled(false);
}<end>
}"
914,"    protected void notifyEditorListener() {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_CHANGED);
}

boolean isEmpty = isEmpty();
if (mWasEmpty != isEmpty) {
if (isEmpty) {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_TURNED_EMPTY);
}
if (mIsDeletable) mDeleteContainer.setVisibility(View.INVISIBLE);
} else {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_TURNED_NON_EMPTY);
}
if (mIsDeletable) mDeleteContainer.setVisibility(View.VISIBLE);
}
mWasEmpty = isEmpty;

//comment
<start>if (mEditTypeAdapter != null) {
mEditTypeAdapter.notifyDataSetChanged();
}<end>
}
}","    protected void notifyEditorListener() {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_CHANGED);
}

boolean isEmpty = isEmpty();
if (mWasEmpty != isEmpty) {
if (isEmpty) {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_TURNED_EMPTY);
}
if (mIsDeletable) mDeleteContainer.setVisibility(View.INVISIBLE);
} else {
if (mListener != null) {
mListener.onRequest(EditorListener.FIELD_TURNED_NON_EMPTY);
}
if (mIsDeletable) mDeleteContainer.setVisibility(View.VISIBLE);
}
mWasEmpty = isEmpty;

//comment
<start>if (mEditTypeAdapter != null) {
mEditTypeAdapter.notifyDataSetChanged();
}<end>
}
}"
915,"private void doSendId(boolean hasIdCapability, String capabilities)
throws MessagingException {
if (!hasIdCapability) return;

//comment
String host = mTransport.getHost();
if (host.toLowerCase().endsWith("".secureserver.net"")) return;

//comment
<start>String mUserAgent =
ImapStore.getImapId(mImapStore.getContext(), mImapStore.getUsername(), host,
capabilities);<end>

if (mUserAgent != null) {
mIdPhrase = ImapConstants.ID + "" ("" + mUserAgent + "")"";
} else if (DEBUG_FORCE_SEND_ID) {
mIdPhrase = ImapConstants.ID + "" "" + ImapConstants.NIL;
}
//comment

//comment
if (mIdPhrase != null) {
try {
executeSimpleCommand(mIdPhrase);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
//comment
//comment
}
}
}","private void doSendId(boolean hasIdCapability, String capabilities)
throws MessagingException {
if (!hasIdCapability) return;

//comment
String host = mTransport.getHost();
if (host.toLowerCase().endsWith("".secureserver.net"")) return;

//comment
<start>String mUserAgent =
ImapStore.getImapId(mImapStore.getContext(), mImapStore.getUsername(), host,
capabilities);<end>

if (mUserAgent != null) {
mIdPhrase = ImapConstants.ID + "" ("" + mUserAgent + "")"";
} else if (DEBUG_FORCE_SEND_ID) {
mIdPhrase = ImapConstants.ID + "" "" + ImapConstants.NIL;
}
//comment

//comment
if (mIdPhrase != null) {
try {
executeSimpleCommand(mIdPhrase);
} catch (ImapException ie) {
//comment
if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}
} catch (IOException ioe) {
//comment
//comment
//comment
}
}
}"
917,"public void getRtcCorrectedJobsLocked(final ArrayList<JobStatus> toAdd,
final ArrayList<JobStatus> toRemove) {
final long elapsedNow = sElapsedRealtimeClock.millis();

//comment
//comment
<start>forEachJob(job -> {<end>
final Pair<Long, Long> utcTimes = job.getPersistedUtcTimes();
if (utcTimes != null) {
Pair<Long, Long> elapsedRuntimes =
convertRtcBoundsToElapsed(utcTimes, elapsedNow);
JobStatus newJob = new JobStatus(job,
elapsedRuntimes.first, elapsedRuntimes.second,
0, job.getLastSuccessfulRunTime(), job.getLastFailedRunTime());
newJob.prepareLocked();
toAdd.add(newJob);
toRemove.add(job);
}
});
}","public void getRtcCorrectedJobsLocked(final ArrayList<JobStatus> toAdd,
final ArrayList<JobStatus> toRemove) {
final long elapsedNow = sElapsedRealtimeClock.millis();

//comment
//comment
<start>forEachJob(job -> {
final Pair<Long, Long> utcTimes = job.getPersistedUtcTimes();
if (utcTimes != null) {
Pair<Long, Long> elapsedRuntimes =
convertRtcBoundsToElapsed(utcTimes, elapsedNow);
JobStatus newJob = new JobStatus(job,
elapsedRuntimes.first, elapsedRuntimes.second,
0, job.getLastSuccessfulRunTime(), job.getLastFailedRunTime());
newJob.prepareLocked();
toAdd.add(newJob);
toRemove.add(job);
}
});<end>
}"
918,"<start>private void onSensorEvent(double x, double y, double z) {<end>
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
double xy = Math.sqrt(x*x + y*y);
//comment
<start>double angle = Math.atan2(xy, z);
//comment
angle = angle * 180.0 / Math.PI;<end>
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
<start>setOrientation(orientation);<end>
}","private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
double xy = Math.sqrt(x*x + y*y);
//comment
double angle = Math.atan2(xy, z);
//comment
<start>angle = angle * 180.0 / Math.PI;<end>
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}"
922,"public boolean hasInstallToRuntimeSplit() {
PermissionManager permissionManager =
(PermissionManager) mContext.getSystemService(PermissionManager.class);

int numSplitPerms = permissionManager.getSplitPermissions().size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo spi =
permissionManager.getSplitPermissions().get(splitPermNum);
String splitPerm = spi.getSplitPermission();

PermissionInfo pi;
try {
pi = mPackageManager.getPermissionInfo(splitPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + splitPerm, e);
continue;
}

//comment
<start>if (pi.getProtection() != pi.PROTECTION_NORMAL) {
continue;
}<end>

List<String> newPerms = spi.getNewPermissions();
int numNewPerms = newPerms.size();
for (int newPermNum = 0; newPermNum < numNewPerms; newPermNum++) {
String newPerm = newPerms.get(newPermNum);

if (!hasPermission(newPerm)) {
continue;
}

try {
pi = mPackageManager.getPermissionInfo(newPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + newPerm, e);
continue;
}

//comment
if (pi.getProtection() != pi.PROTECTION_DANGEROUS) {
continue;
}

if (mPackageInfo.applicationInfo.targetSdkVersion < spi.getTargetSdk()) {
return true;
}
}
}
return false;
}","public boolean hasInstallToRuntimeSplit() {
PermissionManager permissionManager =
(PermissionManager) mContext.getSystemService(PermissionManager.class);

int numSplitPerms = permissionManager.getSplitPermissions().size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo spi =
permissionManager.getSplitPermissions().get(splitPermNum);
String splitPerm = spi.getSplitPermission();

PermissionInfo pi;
try {
pi = mPackageManager.getPermissionInfo(splitPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + splitPerm, e);
continue;
}

//comment
<start>if (pi.getProtection() != pi.PROTECTION_NORMAL) {
continue;
}<end>

List<String> newPerms = spi.getNewPermissions();
int numNewPerms = newPerms.size();
for (int newPermNum = 0; newPermNum < numNewPerms; newPermNum++) {
String newPerm = newPerms.get(newPermNum);

if (!hasPermission(newPerm)) {
continue;
}

try {
pi = mPackageManager.getPermissionInfo(newPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + newPerm, e);
continue;
}

//comment
if (pi.getProtection() != pi.PROTECTION_DANGEROUS) {
continue;
}

if (mPackageInfo.applicationInfo.targetSdkVersion < spi.getTargetSdk()) {
return true;
}
}
}
return false;
}"
923,"String getLoginPhrase() throws MessagingException, IOException {
//comment
if (mImapStore.getUseOAuth()) {
//comment
//comment
<start>final String accessToken = AuthenticationCache.getInstance().retrieveAccessToken(
mImapStore.getContext(), mImapStore.getAccount());<end>
if (mLoginPhrase == null || !TextUtils.equals(mAccessToken, accessToken)) {
mAccessToken = accessToken;
final String oauthCode = ""user="" + mImapStore.getUsername() + '\001' +
""auth=Bearer "" + mAccessToken + '\001' + '\001';
mLoginPhrase = ImapConstants.AUTHENTICATE + "" "" + ImapConstants.XOAUTH2 + "" "" +
Base64.encodeToString(oauthCode.getBytes(), Base64.NO_WRAP);
}
} else {
if (mLoginPhrase == null) {
if (mImapStore.getUsername() != null && mImapStore.getPassword() != null) {
//comment
//comment
mLoginPhrase = ImapConstants.LOGIN + "" "" + mImapStore.getUsername() + "" ""
+ ImapUtility.imapQuoted(mImapStore.getPassword());
}
}
}
return mLoginPhrase;
}","String getLoginPhrase() throws MessagingException, IOException {
//comment
if (mImapStore.getUseOAuth()) {
//comment
//comment
<start>final String accessToken = AuthenticationCache.getInstance().retrieveAccessToken(
mImapStore.getContext(), mImapStore.getAccount());
if (mLoginPhrase == null || !TextUtils.equals(mAccessToken, accessToken)) {
mAccessToken = accessToken;
final String oauthCode = ""user="" + mImapStore.getUsername() + '\001' +
""auth=Bearer "" + mAccessToken + '\001' + '\001';
mLoginPhrase = ImapConstants.AUTHENTICATE + "" "" + ImapConstants.XOAUTH2 + "" "" +
Base64.encodeToString(oauthCode.getBytes(), Base64.NO_WRAP);
}<end>
} else {
if (mLoginPhrase == null) {
if (mImapStore.getUsername() != null && mImapStore.getPassword() != null) {
//comment
//comment
mLoginPhrase = ImapConstants.LOGIN + "" "" + mImapStore.getUsername() + "" ""
+ ImapUtility.imapQuoted(mImapStore.getPassword());
}
}
}
return mLoginPhrase;
}"
925,"public boolean lookup(LookupRequest req) throws IOException {
//comment
if (lookupInternal(req.key, mActiveHashStart)) {
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
if (lookupInternal(req.key, mInactiveHashStart)) {
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
return true;
}
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}","public boolean lookup(LookupRequest req) throws IOException {
//comment
<start>if (lookupInternal(req.key, mActiveHashStart)) {<end>
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
if (lookupInternal(req.key, mInactiveHashStart)) {
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
return true;
}
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}"
926,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
<start>Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");<end>
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
<start>current = mTabControl.getTab(0);<end>
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
927,"<start>    private void activePendingMessages() {
//comment
MmsSystemEventReceiver.wakeUpService(this);<end>

//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_INACTIVE_MESSAGE,
null,
this,
SmsReceiver.class));
}","    private void activePendingMessages() {
//comment
<start>MmsSystemEventReceiver.wakeUpService(this);<end>

//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_INACTIVE_MESSAGE,
null,
this,
SmsReceiver.class));
}"
928,"@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
<start>log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");<end>
}
//comment
if (mPreviousVMProviderKey.equals(newProviderKey)) {
if (DBG) log(""No change is made toward VM provider setting."");
<start>return true;<end>
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

if (newProviderSettings == null) {
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
mVMProviderSettingsForced = true;
simulatePreferenceClick(mVoicemailSettings);
} else {
if (DBG) log(""Saved preferences found - switching to them"");
//comment
mChangingVMorFwdDueToProviderChange = true;
saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);
}
} else if (preference == mVoicemailNotificationVibrateWhen) {
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}","@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");
}
//comment
<start>if (mPreviousVMProviderKey.equals(newProviderKey)) {<end>
if (DBG) log(""No change is made toward VM provider setting."");
<start>return true;<end>
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

if (newProviderSettings == null) {
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
mVMProviderSettingsForced = true;
simulatePreferenceClick(mVoicemailSettings);
} else {
if (DBG) log(""Saved preferences found - switching to them"");
//comment
mChangingVMorFwdDueToProviderChange = true;
saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);
}
} else if (preference == mVoicemailNotificationVibrateWhen) {
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}"
932," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}

//comment
//comment
//comment
//comment
//comment
if ((ringingCall.getState() != Call.State.IDLE)
<start>&& !fgCall.getState().isDialing()) {<end>
//comment
//comment
updateRingingCall(cm);
<start>} else if ((fgCall.getState() != Call.State.IDLE)
|| (bgCall.getState() != Call.State.IDLE)) {<end>
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
} else {
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"," void updateState(CallManager cm) {
if (DBG) log(""updateState("" + cm + "")..."");

//comment

PhoneConstants.State state = cm.getState();
Call ringingCall = cm.getFirstActiveRingingCall();
Call fgCall = cm.getActiveFgCall();
Call bgCall = cm.getFirstActiveBgCall();

//comment
//comment
//comment
if (!PhoneUtils.isLandscape(this.getContext())) {
updateCallInfoLayout(state);
}

//comment
//comment
//comment
//comment
//comment
<start>if ((ringingCall.getState() != Call.State.IDLE)
&& !fgCall.getState().isDialing()) {
//comment
//comment
updateRingingCall(cm);<end>
} else if ((fgCall.getState() != Call.State.IDLE)
|| (bgCall.getState() != Call.State.IDLE)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateForegroundCall(cm);
} else {
//comment
//comment
if (mApplication.inCallUiState.showAlreadyDisconnectedState) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateAlreadyDisconnected(cm);
} else {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
updateNoCall(cm);
}
}
}"
934,"    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

Bundle args = getArguments();
if (args != null) {
mSubId = args.getInt(SubscriptionManager.EXTRA_SUBSCRIPTION_INDEX,
SubscriptionManager.INVALID_SUBSCRIPTION_ID);
mEraseEsim = args.getBoolean(MainClear.ERASE_ESIMS_EXTRA);
}

mActivity = getActivity();

<start>if (mSubId == SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
return;
}
//comment
//comment
startMonitorSubscriptionChange(getSubscriptionManager());<end>
}","    @Override
public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

Bundle args = getArguments();
if (args != null) {
mSubId = args.getInt(SubscriptionManager.EXTRA_SUBSCRIPTION_INDEX,
SubscriptionManager.INVALID_SUBSCRIPTION_ID);
mEraseEsim = args.getBoolean(MainClear.ERASE_ESIMS_EXTRA);
}

mActivity = getActivity();

if (mSubId == SubscriptionManager.INVALID_SUBSCRIPTION_ID) {
return;
}
//comment
//comment
<start>startMonitorSubscriptionChange(getSubscriptionManager());<end>
}"
936,"@Override
public InputStream getAsStream() {
checkNotDestroyed();
try {
return new FileInputStream(mFile);
} catch (FileNotFoundException e) {
//comment
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Temp file not found"");

//comment
<start>return new ByteArrayInputStream(new byte[0]);<end>
}
}","@Override
public InputStream getAsStream() {
checkNotDestroyed();
try {
return new FileInputStream(mFile);
} catch (FileNotFoundException e) {
//comment
LogUtils.w(Logging.LOG_TAG, ""ImapTempFileLiteral: Temp file not found"");

//comment
<start>return new ByteArrayInputStream(new byte[0]);<end>
}
}"
937,"public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
<start>updateContentLocation(mContext, msgUri, mContentLocation, mLocked);<end>
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}","public void run() {
try {
//comment
DownloadManager.getInstance().markState(
mUri, DownloadManager.STATE_DOWNLOADING);

//comment
byte[] resp = getPdu(mContentLocation);

//comment
RetrieveConf retrieveConf = (RetrieveConf) new PduParser(
resp, PduParserUtil.shouldParseContentDisposition()).parse();
if (null == retrieveConf) {
throw new MmsException(""Invalid M-Retrieve.conf PDU."");
}

Uri msgUri = null;
if (isDuplicateMessage(mContext, retrieveConf)) {
//comment
//comment
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
} else {
//comment
PduPersister persister = PduPersister.getPduPersister(mContext);
msgUri = persister.persist(retrieveConf, Inbox.CONTENT_URI, true,
MessagingPreferenceActivity.getIsGroupMmsEnabled(mContext), null);

//comment
ContentValues values = new ContentValues(1);
values.put(Mms.DATE, System.currentTimeMillis() / 1000L);
SqliteWrapper.update(mContext, mContext.getContentResolver(),
msgUri, values, null, null);

//comment
mTransactionState.setState(TransactionState.SUCCESS);
mTransactionState.setContentUri(msgUri);
//comment
//comment
//comment
//comment
<start>updateContentLocation(mContext, msgUri, mContentLocation, mLocked);<end>
}

//comment
SqliteWrapper.delete(mContext, mContext.getContentResolver(),
mUri, null, null);

if (msgUri != null) {
//comment
//comment
Recycler.getMmsRecycler().deleteOldMessagesInSameThreadAsMessage(mContext, msgUri);
MmsWidgetProvider.notifyDatasetChanged(mContext);
}

//comment
//comment
//comment
sendAcknowledgeInd(retrieveConf);
} catch (Throwable t) {
Log.e(TAG, Log.getStackTraceString(t));
} finally {
if (mTransactionState.getState() != TransactionState.SUCCESS) {
mTransactionState.setState(TransactionState.FAILED);
mTransactionState.setContentUri(mUri);
Log.e(TAG, ""Retrieval failed."");
}
notifyObservers();
}
}"
939,"<start>    public void onCallInitiating(int callType) {<end>
if (DBG) log(""onCallInitiating"");

//comment
<start>boolean chooseFrontCamera = true;<end>
if (callType == Phone.CALL_TYPE_VT_TX) {
chooseFrontCamera = false;
}

chooseCamera(chooseFrontCamera);

if (callType == Phone.CALL_TYPE_VT || callType == Phone.CALL_TYPE_VT_TX) {
mCameraNeeded = true;
} else {
mCameraNeeded = false;
}
}","    public void onCallInitiating(int callType) {
if (DBG) log(""onCallInitiating"");

//comment
<start>boolean chooseFrontCamera = true;
if (callType == Phone.CALL_TYPE_VT_TX) {
chooseFrontCamera = false;
}<end>

chooseCamera(chooseFrontCamera);

if (callType == Phone.CALL_TYPE_VT || callType == Phone.CALL_TYPE_VT_TX) {
mCameraNeeded = true;
} else {
mCameraNeeded = false;
}
}"
940,"@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
inputstream.close();
<start>inputstream = openStream();<end>
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}","@Override
public void run() {
WallpaperManager wm = WallpaperManager.getInstance(mContext);
Drawable oldWallpaper = wm.getDrawable();
InputStream inputstream = null;
try {
//comment
//comment
//comment
//comment
//comment
//comment
inputstream = openStream();
if (inputstream != null) {
if (!inputstream.markSupported()) {
inputstream = new BufferedInputStream(inputstream, BUFFER_SIZE);
}
inputstream.mark(BUFFER_SIZE);
BitmapFactory.Options options = new BitmapFactory.Options();
options.inJustDecodeBounds = true;
//comment
//comment
BitmapFactory.decodeStream(
new BufferedInputStream(inputstream), null, options);
int maxWidth = wm.getDesiredMinimumWidth();
int maxHeight = wm.getDesiredMinimumHeight();
//comment
maxWidth *= 1.25;
maxHeight *= 1.25;
int bmWidth = options.outWidth;
int bmHeight = options.outHeight;

int scale = 1;
while (bmWidth > maxWidth || bmHeight > maxHeight) {
scale <<= 1;
bmWidth >>= 1;
bmHeight >>= 1;
}
options.inJustDecodeBounds = false;
options.inSampleSize = scale;
try {
inputstream.reset();
} catch (IOException e) {
//comment
//comment
<start>inputstream.close();
inputstream = openStream();<end>
}
Bitmap scaledWallpaper = BitmapFactory.decodeStream(inputstream,
null, options);
if (scaledWallpaper != null) {
wm.setBitmap(scaledWallpaper);
} else {
Log.e(LOGTAG, ""Unable to set new wallpaper, "" +
""decodeStream returned null."");
}
}
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to set new wallpaper"");
//comment
//comment
mCanceled = true;
} finally {
if (inputstream != null) {
try {
inputstream.close();
} catch (IOException e) {
//comment
}
}
}

if (mCanceled) {
//comment
//comment
//comment
int width = oldWallpaper.getIntrinsicWidth();
int height = oldWallpaper.getIntrinsicHeight();
Bitmap bm = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);
Canvas canvas = new Canvas(bm);
oldWallpaper.setBounds(0, 0, width, height);
oldWallpaper.draw(canvas);
canvas.setBitmap(null);
try {
wm.setBitmap(bm);
} catch (IOException e) {
Log.e(LOGTAG, ""Unable to restore old wallpaper."");
}
mCanceled = false;
}

if (mWallpaperProgress.isShowing()) {
mWallpaperProgress.dismiss();
}
}"
942,"@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
if (topChild != null) {
//comment
mHeader.setMinimumHeight(topChild.getMeasuredHeight());
}
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
int partitionStart = getPositionForPartition(mIndexedPartition);
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}

//comment
<start>int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;<end>
listView.setFadingHeader(index, listPosition, isLastInSection);
}
}
}","@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
if (topChild != null) {
//comment
mHeader.setMinimumHeight(topChild.getMeasuredHeight());
}
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
int partitionStart = getPositionForPartition(mIndexedPartition);
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}

//comment
<start>int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;
listView.setFadingHeader(index, listPosition, isLastInSection);<end>
}
}
}"
946,"private void inflateAllEntries(LayoutInflater layoutInflater) {
if (mAllEntriesInflated) {
return;
}
for (int i = 0; i < mEntries.size(); i++) {
List<Entry> entryList = mEntries.get(i);
List<View> viewList = mEntryViews.get(i);
for (int j = viewList.size(); j < entryList.size(); j++) {
final int iconVisibility;
<start>final Entry entry = entryList.get(j);<end>
//comment
//comment
if (entry.getIcon() == null) {
<start>iconVisibility = View.GONE;<end>
} else if (j == 0) {
<start>iconVisibility = View.VISIBLE;<end>
} else {
iconVisibility = View.INVISIBLE;
}
<start>viewList.add(createEntryView(layoutInflater, entry, iconVisibility));<end>
}
}
mAllEntriesInflated = true;
}","private void inflateAllEntries(LayoutInflater layoutInflater) {
if (mAllEntriesInflated) {
return;
}
for (int i = 0; i < mEntries.size(); i++) {
List<Entry> entryList = mEntries.get(i);
List<View> viewList = mEntryViews.get(i);
for (int j = viewList.size(); j < entryList.size(); j++) {
final int iconVisibility;
final Entry entry = entryList.get(j);
//comment
//comment
<start>if (entry.getIcon() == null) {
iconVisibility = View.GONE;
} else if (j == 0) {
iconVisibility = View.VISIBLE;
} else {
iconVisibility = View.INVISIBLE;
}<end>
viewList.add(createEntryView(layoutInflater, entry, iconVisibility));
}
}
mAllEntriesInflated = true;
}"
948,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
<start>switch (mState) {<end>
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
<start>switch (mState) {
case STATE_TEXT:<end>
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
<start>case STATE_YES_NO:<end>
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
<start>}<end>
}"
950,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

<start>Tab current = mTabControl.getCurrentTab();<end>
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
<start>if (current == null) {
//comment
return;
}<end>
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}"
951,"public void setWatchdogAlarm(final Context context, final long delay,
final int callbackTimeout) {
//comment
if (mWatchdogPendingIntent == null) {
<start>Intent intent = new Intent(context, AttachmentWatchdog.class);
intent.putExtra(EXTRA_CALLBACK_TIMEOUT, callbackTimeout);<end>
mWatchdogPendingIntent =
PendingIntent.getBroadcast(context, 0, intent, 0);
}
//comment
final AlarmManager am = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delay,
mWatchdogPendingIntent);
debugTrace(""Set up a watchdog for %d millis in the future"", delay);
}","public void setWatchdogAlarm(final Context context, final long delay,
final int callbackTimeout) {
//comment
<start>if (mWatchdogPendingIntent == null) {
Intent intent = new Intent(context, AttachmentWatchdog.class);
intent.putExtra(EXTRA_CALLBACK_TIMEOUT, callbackTimeout);
mWatchdogPendingIntent =
PendingIntent.getBroadcast(context, 0, intent, 0);
}<end>
//comment
final AlarmManager am = (AlarmManager)context.getSystemService(Context.ALARM_SERVICE);
am.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + delay,
mWatchdogPendingIntent);
debugTrace(""Set up a watchdog for %d millis in the future"", delay);
}"
952,"    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

<start>switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);<end>

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}","    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

<start>switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}<end>

//comment
//comment
<start>mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}<end>

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}"
954,"static private boolean handlePinEntry(Context context, String input,
Activity pukInputActivity) {
//comment
//comment
//comment
if ((input.startsWith(""**04"") || input.startsWith(""**05""))
&& input.endsWith(""#"")) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

<start>if (app instanceof com.android.phone.MSimPhoneGlobals) {
//comment
//comment
int voiceSub = app.getVoiceSubscription();
phone = app.getPhone(voiceSub);
}
boolean isMMIHandled = phone.handlePinMmi(input);<end>

//comment
//comment
//comment
//comment
//comment
if (isMMIHandled && input.startsWith(""**05"")) {
app.setPukEntryActivity(pukInputActivity);
}
return isMMIHandled;
}
return false;
}","static private boolean handlePinEntry(Context context, String input,
Activity pukInputActivity) {
//comment
//comment
//comment
if ((input.startsWith(""**04"") || input.startsWith(""**05""))
&& input.endsWith(""#"")) {
PhoneGlobals app = PhoneGlobals.getInstance();
Phone phone = app.phone;

<start>if (app instanceof com.android.phone.MSimPhoneGlobals) {
//comment
//comment
int voiceSub = app.getVoiceSubscription();
phone = app.getPhone(voiceSub);
}<end>
boolean isMMIHandled = phone.handlePinMmi(input);

//comment
//comment
//comment
//comment
//comment
if (isMMIHandled && input.startsWith(""**05"")) {
app.setPukEntryActivity(pukInputActivity);
}
return isMMIHandled;
}
return false;
}"
957,"private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
<start>if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}<end>
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
<start>int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}<end>
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}","private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
<start>if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);<end>

return permissionOrAppOpChanged;
}"
958,"    public static int getUserBTAudioMode(Context c) {
<start>SharedPreferences prefs =
PreferenceManager.getDefaultSharedPreferences(c);
//comment
return Integer.parseInt(prefs.getString(KEY_BT_AUDIO_MODE, String.valueOf(MODE_UNTOUCHED)));<end>
}","    public static int getUserBTAudioMode(Context c) {
SharedPreferences prefs =
PreferenceManager.getDefaultSharedPreferences(c);
//comment
<start>return Integer.parseInt(prefs.getString(KEY_BT_AUDIO_MODE, String.valueOf(MODE_UNTOUCHED)));<end>
}"
959,"@Override
protected void onCreate(Bundle savedInstanceState) {
//comment
mInboxId = getIntent().getIntExtra(EXTRA_INBOX_ID, -1);
mFoldersUri = getIntent().getParcelableExtra(EXTRA_FOLDERS_URI);

if (mFoldersUri != null) {
getLoaderManager().initLoader(FOLDERS_LOADER_ID, null,
new MailboxSettingsFolderLoaderCallbacks());
}

super.onCreate(savedInstanceState);

//comment
ActionBar actionBar = getActionBar();
<start>if (actionBar != null) {
actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP, ActionBar.DISPLAY_HOME_AS_UP);
//comment
actionBar.setIcon(android.R.color.transparent);
actionBar.setDisplayUseLogoEnabled(false);
}<end>
}","@Override
protected void onCreate(Bundle savedInstanceState) {
//comment
mInboxId = getIntent().getIntExtra(EXTRA_INBOX_ID, -1);
mFoldersUri = getIntent().getParcelableExtra(EXTRA_FOLDERS_URI);

if (mFoldersUri != null) {
getLoaderManager().initLoader(FOLDERS_LOADER_ID, null,
new MailboxSettingsFolderLoaderCallbacks());
}

super.onCreate(savedInstanceState);

//comment
ActionBar actionBar = getActionBar();
if (actionBar != null) {
actionBar.setDisplayOptions(ActionBar.DISPLAY_HOME_AS_UP, ActionBar.DISPLAY_HOME_AS_UP);
//comment
<start>actionBar.setIcon(android.R.color.transparent);<end>
actionBar.setDisplayUseLogoEnabled(false);
}
}"
960,"<start>private static final int makeBigramFlags(final boolean more, final int offset,
int bigramFrequency, final int unigramFrequency, final String word) {
int bigramFlags = (more ? FormatSpec.FLAG_ATTRIBUTE_HAS_NEXT : 0)
+ (offset < 0 ? FormatSpec.FLAG_ATTRIBUTE_OFFSET_NEGATIVE : 0);
switch (getByteSize(offset)) {
case 1:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_ONEBYTE;
break;<end>
case 2:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_TWOBYTES;
<start>break;<end>
case 3:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_THREEBYTES;
<start>break;<end>
default:
throw new RuntimeException(""Strange offset size"");
}
if (unigramFrequency > bigramFrequency) {
<start>MakedictLog.e(""Unigram freq is superior to bigram freq for \"""" + word
+ ""\"". Bigram freq is "" + bigramFrequency + "", unigram freq for ""
+ word + "" is "" + unigramFrequency);
bigramFrequency = unigramFrequency;<end>
}
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>final float stepSize =
(FormatSpec.MAX_TERMINAL_FREQUENCY - unigramFrequency)
/ (1.5f + FormatSpec.MAX_BIGRAM_FREQUENCY);<end>
final float firstStepStart = 1 + unigramFrequency + (stepSize / 2.0f);
final int discretizedFrequency = (int)((bigramFrequency - firstStepStart) / stepSize);
//comment
//comment
//comment
//comment
//comment
<start>final int finalBigramFrequency = discretizedFrequency > 0 ? discretizedFrequency : 0;<end>
bigramFlags += finalBigramFrequency & FormatSpec.FLAG_ATTRIBUTE_FREQUENCY;
return bigramFlags;
}","private static final int makeBigramFlags(final boolean more, final int offset,
int bigramFrequency, final int unigramFrequency, final String word) {
int bigramFlags = (more ? FormatSpec.FLAG_ATTRIBUTE_HAS_NEXT : 0)
+ (offset < 0 ? FormatSpec.FLAG_ATTRIBUTE_OFFSET_NEGATIVE : 0);
switch (getByteSize(offset)) {
case 1:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_ONEBYTE;
break;
case 2:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_TWOBYTES;
break;
case 3:
bigramFlags |= FormatSpec.FLAG_ATTRIBUTE_ADDRESS_TYPE_THREEBYTES;
break;
default:
throw new RuntimeException(""Strange offset size"");
}
if (unigramFrequency > bigramFrequency) {
MakedictLog.e(""Unigram freq is superior to bigram freq for \"""" + word
+ ""\"". Bigram freq is "" + bigramFrequency + "", unigram freq for ""
+ word + "" is "" + unigramFrequency);
bigramFrequency = unigramFrequency;
}
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>final float stepSize =
(FormatSpec.MAX_TERMINAL_FREQUENCY - unigramFrequency)
/ (1.5f + FormatSpec.MAX_BIGRAM_FREQUENCY);
final float firstStepStart = 1 + unigramFrequency + (stepSize / 2.0f);
final int discretizedFrequency = (int)((bigramFrequency - firstStepStart) / stepSize);
//comment
//comment
//comment
//comment
//comment
final int finalBigramFrequency = discretizedFrequency > 0 ? discretizedFrequency : 0;
bigramFlags += finalBigramFrequency & FormatSpec.FLAG_ATTRIBUTE_FREQUENCY;
return bigramFlags;<end>
}"
961,"public static PointerTracker getPointerTracker(final int id, final KeyEventHandler handler) {
final ArrayList<PointerTracker> trackers = sTrackers;

//comment
<start>for (int i = trackers.size(); i <= id; i++) {
final PointerTracker tracker = new PointerTracker(i, handler);
trackers.add(tracker);
}<end>

return trackers.get(id);
}","public static PointerTracker getPointerTracker(final int id, final KeyEventHandler handler) {
final ArrayList<PointerTracker> trackers = sTrackers;

//comment
<start>for (int i = trackers.size(); i <= id; i++) {
final PointerTracker tracker = new PointerTracker(i, handler);
trackers.add(tracker);
}<end>

return trackers.get(id);
}"
962,"    private void startTimeOut() {
//comment
<start>if (mState != STATE_SECONDARY || mIsResponseSent) {
return;
}<end>

if (mAlarmTime == NO_SELECT_ALARM) {
mAlarmTime = SystemClock.elapsedRealtime() + StkApp.UI_TIMEOUT;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, SELECT_ALARM_TAG,
mAlarmListener, null);
}","    private void startTimeOut() {
//comment
<start>if (mState != STATE_SECONDARY || mIsResponseSent) {
return;
}<end>

if (mAlarmTime == NO_SELECT_ALARM) {
mAlarmTime = SystemClock.elapsedRealtime() + StkApp.UI_TIMEOUT;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, SELECT_ALARM_TAG,
mAlarmListener, null);
}"
964,"    @Override
public void onDismiss(DialogInterface dialog) {
<start>if (mOldDialog != null && mOldDialog == dialog) {
//comment
//comment
return;
}<end>
super.onDismiss(dialog);
}","    @Override
public void onDismiss(DialogInterface dialog) {
<start>if (mOldDialog != null && mOldDialog == dialog) {
//comment
//comment
return;
}<end>
super.onDismiss(dialog);
}"
965,"    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
MessagingNotification.nonBlockingUpdateSendFailedNotification(this);
<start>} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);
}
//comment
//comment
//comment
registerForServiceStateChanges();
//comment
Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
mToastHandler.post(new Runnable() {
public void run() {<end>
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}","    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
MessagingNotification.nonBlockingUpdateSendFailedNotification(this);
<start>} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);
}
//comment
//comment
//comment
registerForServiceStateChanges();<end>
//comment
Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}"
966,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
<start>return appOpMode == AppOpsManager.MODE_ALLOWED;<end>
} else {
//comment
//comment
<start>return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;<end>
}
} else {
//comment
//comment
<start>List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}<end>
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
<start>} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}<end>
return false;
}
}"
968," static long calculateGlobalLimit(long fileSystemSizeBytes,
long freeSpaceBytes) {
if (fileSystemSizeBytes <= 0
|| freeSpaceBytes <= 0
|| freeSpaceBytes > fileSystemSizeBytes) {
return 0;
}

long fileSystemSizeRatio =
2 << ((int) Math.floor(Math.log10(
fileSystemSizeBytes / (1024 * 1024))));
<start>long maxSizeBytes = (long) Math.min(Math.floor(
fileSystemSizeBytes / fileSystemSizeRatio),
Math.floor(freeSpaceBytes / 2));
//comment
//comment
long maxSizeStepBytes = 1024 * 1024;
if (maxSizeBytes < maxSizeStepBytes) {
return 0;
}
long roundingExtra = maxSizeBytes % maxSizeStepBytes == 0 ? 0 : 1;
return (maxSizeStepBytes
* ((maxSizeBytes / maxSizeStepBytes) + roundingExtra));<end>
}"," static long calculateGlobalLimit(long fileSystemSizeBytes,
long freeSpaceBytes) {
if (fileSystemSizeBytes <= 0
|| freeSpaceBytes <= 0
|| freeSpaceBytes > fileSystemSizeBytes) {
return 0;
}

long fileSystemSizeRatio =
2 << ((int) Math.floor(Math.log10(
fileSystemSizeBytes / (1024 * 1024))));
long maxSizeBytes = (long) Math.min(Math.floor(
fileSystemSizeBytes / fileSystemSizeRatio),
Math.floor(freeSpaceBytes / 2));
//comment
//comment
<start>long maxSizeStepBytes = 1024 * 1024;
if (maxSizeBytes < maxSizeStepBytes) {
return 0;
}<end>
long roundingExtra = maxSizeBytes % maxSizeStepBytes == 0 ? 0 : 1;
return (maxSizeStepBytes
* ((maxSizeBytes / maxSizeStepBytes) + roundingExtra));
}"
969,"public void changeDirectories(Cursor cursor) {
if (cursor.getCount() == 0) {
//comment
//comment
Log.e(TAG, ""Directory search loader returned an empty cursor, which implies we have "" +
""no directory entries."", new RuntimeException());
return;
}
HashSet<Long> directoryIds = new HashSet<Long>();

int idColumnIndex = cursor.getColumnIndex(Directory._ID);
int directoryTypeColumnIndex = cursor.getColumnIndex(DirectoryListLoader.DIRECTORY_TYPE);
int displayNameColumnIndex = cursor.getColumnIndex(Directory.DISPLAY_NAME);
int photoSupportColumnIndex = cursor.getColumnIndex(Directory.PHOTO_SUPPORT);

//comment
//comment
cursor.moveToPosition(-1);
while (cursor.moveToNext()) {
long id = cursor.getLong(idColumnIndex);
<start>directoryIds.add(id);<end>
if (getPartitionByDirectoryId(id) == -1) {
DirectoryPartition partition = new DirectoryPartition(false, true);
partition.setDirectoryId(id);
if (DirectoryCompat.isRemoteDirectoryId(id)) {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.directory_search_label_work));
} else {
partition.setLabel(mContext.getString(R.string.directory_search_label));
}
} else {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.list_filter_phones_work));
} else {
partition.setLabel(mDefaultFilterHeaderText.toString());
}
}
partition.setDirectoryType(cursor.getString(directoryTypeColumnIndex));
partition.setDisplayName(cursor.getString(displayNameColumnIndex));
int photoSupport = cursor.getInt(photoSupportColumnIndex);
partition.setPhotoSupported(photoSupport == Directory.PHOTO_SUPPORT_THUMBNAIL_ONLY
|| photoSupport == Directory.PHOTO_SUPPORT_FULL);
addPartition(partition);
}
}

//comment
int count = getPartitionCount();
for (int i = count; --i >= 0; ) {
Partition partition = getPartition(i);
if (partition instanceof DirectoryPartition) {
long id = ((DirectoryPartition)partition).getDirectoryId();
if (!directoryIds.contains(id)) {
removePartition(i);
}
}
}

invalidate();
notifyDataSetChanged();
}","public void changeDirectories(Cursor cursor) {
if (cursor.getCount() == 0) {
//comment
//comment
Log.e(TAG, ""Directory search loader returned an empty cursor, which implies we have "" +
""no directory entries."", new RuntimeException());
return;
}
HashSet<Long> directoryIds = new HashSet<Long>();

int idColumnIndex = cursor.getColumnIndex(Directory._ID);
int directoryTypeColumnIndex = cursor.getColumnIndex(DirectoryListLoader.DIRECTORY_TYPE);
int displayNameColumnIndex = cursor.getColumnIndex(Directory.DISPLAY_NAME);
int photoSupportColumnIndex = cursor.getColumnIndex(Directory.PHOTO_SUPPORT);

//comment
//comment
<start>cursor.moveToPosition(-1);
while (cursor.moveToNext()) {
long id = cursor.getLong(idColumnIndex);
directoryIds.add(id);
if (getPartitionByDirectoryId(id) == -1) {
DirectoryPartition partition = new DirectoryPartition(false, true);
partition.setDirectoryId(id);
if (DirectoryCompat.isRemoteDirectoryId(id)) {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.directory_search_label_work));
} else {
partition.setLabel(mContext.getString(R.string.directory_search_label));
}
} else {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.list_filter_phones_work));
} else {
partition.setLabel(mDefaultFilterHeaderText.toString());
}
}
partition.setDirectoryType(cursor.getString(directoryTypeColumnIndex));
partition.setDisplayName(cursor.getString(displayNameColumnIndex));
int photoSupport = cursor.getInt(photoSupportColumnIndex);
partition.setPhotoSupported(photoSupport == Directory.PHOTO_SUPPORT_THUMBNAIL_ONLY
|| photoSupport == Directory.PHOTO_SUPPORT_FULL);
addPartition(partition);
}
}<end>

//comment
int count = getPartitionCount();
for (int i = count; --i >= 0; ) {
Partition partition = getPartition(i);
if (partition instanceof DirectoryPartition) {
long id = ((DirectoryPartition)partition).getDirectoryId();
if (!directoryIds.contains(id)) {
removePartition(i);
}
}
}

invalidate();
notifyDataSetChanged();
}"
970,"    @Override
protected void onMeasure(int hspec, int vspec) {
super.onMeasure(hspec, vspec);
<start>int w = getMeasuredWidth();
//comment
if (!mUseQuickControls) {
w -= mAddTabOverlap;
}
setMeasuredDimension(w, getMeasuredHeight());<end>
}","    @Override
protected void onMeasure(int hspec, int vspec) {
super.onMeasure(hspec, vspec);
<start>int w = getMeasuredWidth();
//comment
if (!mUseQuickControls) {
w -= mAddTabOverlap;
}
setMeasuredDimension(w, getMeasuredHeight());<end>
}"
972,"    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
<start>MessagingNotification.nonBlockingUpdateSendFailedNotification(this);<end>
} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);
}
//comment
//comment
//comment
registerForServiceStateChanges();
//comment
Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}","    private void handleSmsSent(Intent intent, int error) {
Uri uri = intent.getData();
mSending = false;
boolean sendNextMsg = intent.getBooleanExtra(EXTRA_MESSAGE_SENT_SEND_NEXT, false);

if (LogTag.DEBUG_SEND) {
Log.v(TAG, ""handleSmsSent uri: "" + uri + "" sendNextMsg: "" + sendNextMsg +
"" mResultCode: "" + mResultCode +
"" = "" + translateResultCode(mResultCode) + "" error: "" + error);
}

if (mResultCode == Activity.RESULT_OK) {
if (LogTag.DEBUG_SEND || Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent move message to sent folder uri: "" + uri);
}
if (!Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_SENT, error)) {
Log.e(TAG, ""handleSmsSent: failed to move message "" + uri + "" to sent folder"");
}
if (sendNextMsg) {
sendFirstQueuedMessage();
}

//comment
<start>MessagingNotification.nonBlockingUpdateSendFailedNotification(this);<end>
} else if ((mResultCode == SmsManager.RESULT_ERROR_RADIO_OFF) ||
(mResultCode == SmsManager.RESULT_ERROR_NO_SERVICE)) {
if (Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""handleSmsSent: no service, queuing message w/ uri: "" + uri);
}
//comment
//comment
//comment
registerForServiceStateChanges();
//comment
Sms.moveMessageToFolder(this, uri, Sms.MESSAGE_TYPE_QUEUED, error);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.message_queued),
Toast.LENGTH_SHORT).show();
}
});
} else if (mResultCode == SmsManager.RESULT_ERROR_FDN_CHECK_FAILURE) {
messageFailedToSend(uri, mResultCode);
mToastHandler.post(new Runnable() {
public void run() {
Toast.makeText(SmsReceiverService.this, getString(R.string.fdn_check_failure),
Toast.LENGTH_SHORT).show();
}
});
} else {
messageFailedToSend(uri, error);
if (sendNextMsg) {
sendFirstQueuedMessage();
}
}
}"
973,"        private void setRestrictedPreferenceEnabled(RestrictedPreference preference,
String packageName, boolean serviceAllowed, boolean serviceEnabled) {
if (serviceAllowed || serviceEnabled) {
preference.setEnabled(true);
} else {
//comment
final EnforcedAdmin admin =
RestrictedLockUtilsInternal.checkIfAccessibilityServiceDisallowed(
mContext, packageName, UserHandle.myUserId());
if (admin != null) {
preference.setDisabledByAdmin(admin);
} else {
preference.setEnabled(false);
}
}
}","        private void setRestrictedPreferenceEnabled(RestrictedPreference preference,
String packageName, boolean serviceAllowed, boolean serviceEnabled) {
if (serviceAllowed || serviceEnabled) {
preference.setEnabled(true);
} else {
//comment
<start>final EnforcedAdmin admin =
RestrictedLockUtilsInternal.checkIfAccessibilityServiceDisallowed(
mContext, packageName, UserHandle.myUserId());
if (admin != null) {
preference.setDisabledByAdmin(admin);
} else {
preference.setEnabled(false);
}<end>
}
}"
974,"@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
<start>mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();<end>
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}","@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
<start>mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);<end>

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());
}"
975,"    @Override
public void onReceive(Context context, Intent intent) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""onReceive intent: "" + intent);
}
String action = intent.getAction();

//comment
//comment
//comment
//comment
if (ACTION_NOTIFY_DATASET_CHANGED.equals(action)) {
AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context,
MmsWidgetProvider.class));

//comment
appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetIds,
R.id.conversation_list);
} else {
super.onReceive(context, intent);
}
}","    @Override
public void onReceive(Context context, Intent intent) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""onReceive intent: "" + intent);
}
String action = intent.getAction();

//comment
//comment
//comment
//comment
if (ACTION_NOTIFY_DATASET_CHANGED.equals(action)) {
AppWidgetManager appWidgetManager = AppWidgetManager.getInstance(context);
int[] appWidgetIds = appWidgetManager.getAppWidgetIds(new ComponentName(context,
MmsWidgetProvider.class));

//comment
<start>appWidgetManager.notifyAppWidgetViewDataChanged(appWidgetIds,
R.id.conversation_list);<end>
} else {
super.onReceive(context, intent);
}
}"
978,"    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);
//comment
<start>setSelection(mStkMenu.defaultItem);<end>
}
}","    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);
//comment
<start>setSelection(mStkMenu.defaultItem);<end>
}
}"
980,"    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

if (mOrientation != orientation) {
//comment
//comment
<start>mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);<end>
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
<start>mHandler.sendMessageDelayed(m, delay);<end>
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}","    private void setOrientation(int orientation) {
synchronized (this) {
if (mPendingOrientation == orientation) {
//comment
return;
}

//comment
//comment
//comment
mHandler.removeMessages(ORIENTATION_CHANGED);

<start>if (mOrientation != orientation) {
//comment
//comment
mPendingOrientation = orientation;
Message m = mHandler.obtainMessage(ORIENTATION_CHANGED);
//comment
int delay = (orientation == ORIENTATION_VERTICAL ? VERTICAL_DEBOUNCE
: HORIZONTAL_DEBOUNCE);
mHandler.sendMessageDelayed(m, delay);<end>
} else {
//comment
mPendingOrientation = ORIENTATION_UNKNOWN;
}
}
}"
981,"    static boolean hangup(Call call) {
try {
CallManager cm = PhoneGlobals.getInstance().mCM;

if (call.getState() == Call.State.ACTIVE && cm.hasActiveBgCall()) {
//comment
<start>log(""- hangup(Call): hangupForegroundResumeBackground..."");
cm.hangupForegroundResumeBackground(cm.getFirstActiveBgCall());<end>
} else {
log(""- hangup(Call): regular hangup()..."");
<start>call.hangup();<end>
}
return true;
} catch (CallStateException ex) {
Log.e(LOG_TAG, ""Call hangup: caught "" + ex, ex);
}

return false;
}","    static boolean hangup(Call call) {
try {
CallManager cm = PhoneGlobals.getInstance().mCM;

<start>if (call.getState() == Call.State.ACTIVE && cm.hasActiveBgCall()) {<end>
//comment
log(""- hangup(Call): hangupForegroundResumeBackground..."");
<start>cm.hangupForegroundResumeBackground(cm.getFirstActiveBgCall());
} else {<end>
log(""- hangup(Call): regular hangup()..."");
call.hangup();
}
return true;
} catch (CallStateException ex) {
Log.e(LOG_TAG, ""Call hangup: caught "" + ex, ex);
}

return false;
}"
982,"protected void onNewRingingConnection(AsyncResult r) {
Connection c = (Connection) r.result;
log(""onNewRingingConnection(): state = "" + mCM.getState() + "", conn = { "" + c + "" }"");
Call ringing = c.getCall();
Phone phone = ringing.getPhone();

//comment
<start>if (ignoreAllIncomingCalls(phone)) {
//comment
//comment
//comment
//comment
PhoneUtils.hangupRingingCall(ringing);
return;
}<end>

if (!c.isRinging()) {
Log.i(LOG_TAG, ""CallNotifier.onNewRingingConnection(): connection not ringing!"");
//comment
//comment
//comment
//comment
//comment
return;
}

//comment
String number = c.getAddress();
if (TextUtils.isEmpty(number)) {
number = Blacklist.PRIVATE_NUMBER;
}
if (DBG) log(""Incoming number is: "" + number);
//comment
//comment
int listType = mApplication.blackList.isListed(number);
if (listType != Blacklist.MATCH_NONE) {
//comment
if (DBG) log(""Incoming call from "" + number + "" blocked."");
c.setUserData(BLACKLIST);
try {
c.hangup();
mApplication.notificationMgr.notifyBlacklistedCall(number,
c.getCreateTime(), listType);
} catch (CallStateException e) {
e.printStackTrace();
}
return;
}

//comment
stopSignalInfoTone();

Call.State state = c.getState();
//comment
if (VDBG) log(""- connection is ringing!  state = "" + state);
//comment

//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
if (VDBG) log(""Holding wake lock on new incoming connection."");
mApplication.requestWakeState(PhoneGlobals.WakeState.PARTIAL);

//comment
//comment
if (PhoneUtils.isRealIncomingCall(state)) {
startIncomingCallQuery(c);
} else {
if (PhoneUtils.PhoneSettings.vibCallWaiting(mApplication)) {
mApplication.vibrate(200,300,500);
}
if (VDBG) log(""- starting call waiting tone..."");
if (mCallWaitingTonePlayer == null) {
mCallWaitingTonePlayer = new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING);
mCallWaitingTonePlayer.start();
}
//comment
//comment
if (DBG) log(""- showing incoming call (this is a WAITING call)..."");
showIncomingCall();
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

if (VDBG) log(""- onNewRingingConnection() done."");
}","protected void onNewRingingConnection(AsyncResult r) {
Connection c = (Connection) r.result;
log(""onNewRingingConnection(): state = "" + mCM.getState() + "", conn = { "" + c + "" }"");
Call ringing = c.getCall();
Phone phone = ringing.getPhone();

//comment
<start>if (ignoreAllIncomingCalls(phone)) {<end>
//comment
//comment
//comment
//comment
PhoneUtils.hangupRingingCall(ringing);
return;
}

if (!c.isRinging()) {
Log.i(LOG_TAG, ""CallNotifier.onNewRingingConnection(): connection not ringing!"");
//comment
//comment
//comment
//comment
//comment
return;
}

//comment
String number = c.getAddress();
if (TextUtils.isEmpty(number)) {
number = Blacklist.PRIVATE_NUMBER;
}
if (DBG) log(""Incoming number is: "" + number);
//comment
//comment
int listType = mApplication.blackList.isListed(number);
if (listType != Blacklist.MATCH_NONE) {
//comment
if (DBG) log(""Incoming call from "" + number + "" blocked."");
c.setUserData(BLACKLIST);
try {
c.hangup();
mApplication.notificationMgr.notifyBlacklistedCall(number,
c.getCreateTime(), listType);
} catch (CallStateException e) {
e.printStackTrace();
}
return;
}

//comment
stopSignalInfoTone();

Call.State state = c.getState();
//comment
if (VDBG) log(""- connection is ringing!  state = "" + state);
//comment

//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
if (VDBG) log(""Holding wake lock on new incoming connection."");
mApplication.requestWakeState(PhoneGlobals.WakeState.PARTIAL);

//comment
//comment
if (PhoneUtils.isRealIncomingCall(state)) {
startIncomingCallQuery(c);
} else {
if (PhoneUtils.PhoneSettings.vibCallWaiting(mApplication)) {
mApplication.vibrate(200,300,500);
}
if (VDBG) log(""- starting call waiting tone..."");
if (mCallWaitingTonePlayer == null) {
mCallWaitingTonePlayer = new InCallTonePlayer(InCallTonePlayer.TONE_CALL_WAITING);
mCallWaitingTonePlayer.start();
}
//comment
//comment
if (DBG) log(""- showing incoming call (this is a WAITING call)..."");
showIncomingCall();
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

if (VDBG) log(""- onNewRingingConnection() done."");
}"
983,"<start>    private void displayMenu() {<end>

if (mStkMenu != null) {
<start>String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;<end>
//comment
if (mStkMenu.titleIcon != null) {
<start>mTitleIconView.setImageBitmap(mStkMenu.titleIcon);<end>
mTitleIconView.setVisibility(View.VISIBLE);
<start>mTitleTextView.setVisibility(View.INVISIBLE);<end>
if (!mStkMenu.titleIconSelfExplanatory) {
<start>mTitleTextView.setText(title);<end>
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);
//comment
setSelection(mStkMenu.defaultItem);
}
}","    private void displayMenu() {

if (mStkMenu != null) {
String title = mStkMenu.title == null ? getString(R.string.app_name) : mStkMenu.title;
//comment
<start>if (mStkMenu.titleIcon != null) {
mTitleIconView.setImageBitmap(mStkMenu.titleIcon);
mTitleIconView.setVisibility(View.VISIBLE);
mTitleTextView.setVisibility(View.INVISIBLE);
if (!mStkMenu.titleIconSelfExplanatory) {
mTitleTextView.setText(title);
mTitleTextView.setVisibility(View.VISIBLE);
}
} else {<end>
mTitleIconView.setVisibility(View.GONE);
mTitleTextView.setVisibility(View.VISIBLE);
mTitleTextView.setText(title);
}
//comment
StkMenuAdapter adapter = new StkMenuAdapter(this,
mStkMenu.items, mStkMenu.itemsIconSelfExplanatory);
//comment
setListAdapter(adapter);
//comment
setSelection(mStkMenu.defaultItem);
}
}"
985,"public void onCodeInput(final int code, final long eventTime) {
//comment
//comment
//comment
//comment
//comment
if (Character.isLetter(code)) {
if (wasLastInputTyping()
|| eventTime - mLastTypingTime < mStaticTimeThresholdAfterFastTyping) {
<start>mLastLetterTypingTime = eventTime;<end>
}
} else {
<start>if (eventTime - mLastLetterTypingTime < mStaticTimeThresholdAfterFastTyping) {
//comment
mLastLetterTypingTime = eventTime;
}<end>
}
mLastTypingTime = eventTime;
}","public void onCodeInput(final int code, final long eventTime) {
//comment
//comment
//comment
//comment
//comment
if (Character.isLetter(code)) {
if (wasLastInputTyping()
|| eventTime - mLastTypingTime < mStaticTimeThresholdAfterFastTyping) {
mLastLetterTypingTime = eventTime;
}
} else {
<start>if (eventTime - mLastLetterTypingTime < mStaticTimeThresholdAfterFastTyping) {
//comment
mLastLetterTypingTime = eventTime;
}<end>
}
mLastTypingTime = eventTime;
}"
988,"@NonNull
@Override
public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
AlertDialog.Builder builder = new AlertDialog.Builder(requireContext(), getTheme());
Context context = builder.getContext();

RoleManager roleManager = context.getSystemService(RoleManager.class);
List<String> currentPackageNames = roleManager.getRoleHolders(mRoleName);
if (currentPackageNames.contains(mPackageName)) {
Log.i(LOG_TAG, ""Application is already a role holder, role: "" + mRoleName
+ "", package: "" + mPackageName);
reportRequestResult(PermissionControllerStatsLog
.ROLE_REQUEST_RESULT_REPORTED__RESULT__IGNORED_ALREADY_GRANTED, null);
clearDeniedSetResultOkAndFinish();
return super.onCreateDialog(savedInstanceState);
}

ApplicationInfo applicationInfo = PackageUtils.getApplicationInfo(mPackageName, context);
if (applicationInfo == null) {
Log.w(LOG_TAG, ""Unknown application: "" + mPackageName);
reportRequestResult(
PermissionControllerStatsLog.ROLE_REQUEST_RESULT_REPORTED__RESULT__IGNORED,
null);
finish();
return super.onCreateDialog(savedInstanceState);
}
Drawable icon = Utils.getBadgedIcon(context, applicationInfo);
String applicationLabel = Utils.getAppLabel(applicationInfo, context);
String title = getString(mRole.getRequestTitleResource(), applicationLabel);

LayoutInflater inflater = LayoutInflater.from(context);
View titleLayout = inflater.inflate(R.layout.request_role_title, null);
ImageView iconImage = titleLayout.requireViewById(R.id.icon);
iconImage.setImageDrawable(icon);
TextView titleText = titleLayout.requireViewById(R.id.title);
titleText.setText(title);

View viewLayout = inflater.inflate(R.layout.request_role_view, null);
mListView = viewLayout.requireViewById(R.id.list);
mListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
mListView.setOnItemClickListener((parent, view, position, id) -> onItemClicked(position));
mAdapter = new Adapter(mListView, mRole);
if (savedInstanceState != null) {
mAdapter.onRestoreInstanceState(savedInstanceState);
}
mListView.setAdapter(mAdapter);

CheckBox dontAskAgainCheck = viewLayout.requireViewById(R.id.dont_ask_again);
boolean isDeniedOnce = UserDeniedManager.getInstance(context).isDeniedOnce(mRoleName,
mPackageName);
dontAskAgainCheck.setVisibility(isDeniedOnce ? View.VISIBLE : View.GONE);
if (isDeniedOnce) {
mDontAskAgainCheck = dontAskAgainCheck;
mDontAskAgainCheck.setOnClickListener(view -> updateUi());
if (savedInstanceState != null) {
boolean dontAskAgain = savedInstanceState.getBoolean(STATE_DONT_ASK_AGAIN);
mDontAskAgainCheck.setChecked(dontAskAgain);
mAdapter.setDontAskAgain(dontAskAgain);
}
}

<start>AlertDialog dialog = builder
.setCustomTitle(titleLayout)
.setView(viewLayout)
//comment
.setPositiveButton(R.string.request_role_set_as_default, null)
//comment
.setNegativeButton(android.R.string.cancel, (dialog2, which) -> dialog2.cancel())
.create();<end>
dialog.getWindow().addSystemFlags(
WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);
dialog.setOnShowListener(dialog2 -> dialog.getButton(Dialog.BUTTON_POSITIVE)
.setOnClickListener(view -> onSetAsDefault()));
return dialog;
}","@NonNull
@Override
public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {
AlertDialog.Builder builder = new AlertDialog.Builder(requireContext(), getTheme());
Context context = builder.getContext();

RoleManager roleManager = context.getSystemService(RoleManager.class);
List<String> currentPackageNames = roleManager.getRoleHolders(mRoleName);
if (currentPackageNames.contains(mPackageName)) {
Log.i(LOG_TAG, ""Application is already a role holder, role: "" + mRoleName
+ "", package: "" + mPackageName);
reportRequestResult(PermissionControllerStatsLog
.ROLE_REQUEST_RESULT_REPORTED__RESULT__IGNORED_ALREADY_GRANTED, null);
clearDeniedSetResultOkAndFinish();
return super.onCreateDialog(savedInstanceState);
}

ApplicationInfo applicationInfo = PackageUtils.getApplicationInfo(mPackageName, context);
if (applicationInfo == null) {
Log.w(LOG_TAG, ""Unknown application: "" + mPackageName);
reportRequestResult(
PermissionControllerStatsLog.ROLE_REQUEST_RESULT_REPORTED__RESULT__IGNORED,
null);
finish();
return super.onCreateDialog(savedInstanceState);
}
Drawable icon = Utils.getBadgedIcon(context, applicationInfo);
String applicationLabel = Utils.getAppLabel(applicationInfo, context);
String title = getString(mRole.getRequestTitleResource(), applicationLabel);

LayoutInflater inflater = LayoutInflater.from(context);
View titleLayout = inflater.inflate(R.layout.request_role_title, null);
ImageView iconImage = titleLayout.requireViewById(R.id.icon);
iconImage.setImageDrawable(icon);
TextView titleText = titleLayout.requireViewById(R.id.title);
titleText.setText(title);

View viewLayout = inflater.inflate(R.layout.request_role_view, null);
mListView = viewLayout.requireViewById(R.id.list);
mListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
mListView.setOnItemClickListener((parent, view, position, id) -> onItemClicked(position));
mAdapter = new Adapter(mListView, mRole);
if (savedInstanceState != null) {
mAdapter.onRestoreInstanceState(savedInstanceState);
}
mListView.setAdapter(mAdapter);

CheckBox dontAskAgainCheck = viewLayout.requireViewById(R.id.dont_ask_again);
boolean isDeniedOnce = UserDeniedManager.getInstance(context).isDeniedOnce(mRoleName,
mPackageName);
dontAskAgainCheck.setVisibility(isDeniedOnce ? View.VISIBLE : View.GONE);
if (isDeniedOnce) {
mDontAskAgainCheck = dontAskAgainCheck;
mDontAskAgainCheck.setOnClickListener(view -> updateUi());
if (savedInstanceState != null) {
boolean dontAskAgain = savedInstanceState.getBoolean(STATE_DONT_ASK_AGAIN);
mDontAskAgainCheck.setChecked(dontAskAgain);
mAdapter.setDontAskAgain(dontAskAgain);
}
}

AlertDialog dialog = builder
.setCustomTitle(titleLayout)
.setView(viewLayout)
//comment
<start>.setPositiveButton(R.string.request_role_set_as_default, null)<end>
//comment
.setNegativeButton(android.R.string.cancel, (dialog2, which) -> dialog2.cancel())
.create();
dialog.getWindow().addSystemFlags(
WindowManager.LayoutParams.SYSTEM_FLAG_HIDE_NON_SYSTEM_OVERLAY_WINDOWS);
dialog.setOnShowListener(dialog2 -> dialog.getButton(Dialog.BUTTON_POSITIVE)
.setOnClickListener(view -> onSetAsDefault()));
return dialog;
}"
989,"private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
<start>boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);<end>

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}","private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
<start>boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);<end>

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}"
990,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
<start>if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {<end>
//comment
//comment
setShiftLocked(true);
<start>} else {<end>
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
992,"@Override
public int getBaseline() {
//comment
if (getChildCount() == 0) {
return super.getBaseline();
}

//comment
<start>final int centerChildIndex = findCenterViewIndex();<end>
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();

//comment
if (centerChildBaseline == -1) {
return super.getBaseline();
}

return getCentralViewTop() + centerChildBaseline;
}","@Override
public int getBaseline() {
//comment
if (getChildCount() == 0) {
return super.getBaseline();
}

//comment
<start>final int centerChildIndex = findCenterViewIndex();
final int centerChildBaseline = getChildAt(centerChildIndex).getBaseline();<end>

//comment
if (centerChildBaseline == -1) {
return super.getBaseline();
}

return getCentralViewTop() + centerChildBaseline;
}"
995,"private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
<start>double xy = Math.sqrt(x*x + y*y);<end>
//comment
double angle = Math.atan2(xy, z);
//comment
<start>angle = angle * 180.0 / Math.PI;
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);<end>
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}","private void onSensorEvent(double x, double y, double z) {
if (VDEBUG) Log.d(TAG, ""onSensorEvent("" + x + "", "" + y + "", "" + z + "")"");

//comment
//comment
if (x == 0.0 || y == 0.0 || z == 0.0) return;

//comment
<start>double xy = Math.sqrt(x*x + y*y);<end>
//comment
double angle = Math.atan2(xy, z);
//comment
angle = angle * 180.0 / Math.PI;
int orientation = (angle >  VERTICAL_ANGLE ? ORIENTATION_VERTICAL : ORIENTATION_HORIZONTAL);
if (VDEBUG) Log.d(TAG, ""angle: "" + angle + "" orientation: "" + orientation);
setOrientation(orientation);
}"
996,"        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
<start>synchronized (EmergencyCallbackModeExitDialog.this) {<end>
try {
<start>if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}<end>
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}","        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
<start>EmergencyCallbackModeExitDialog.this.wait();<end>
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}"
998,"    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
<start>generateBinaryDictionary();<end>
loadBinaryDictionary();
} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}","    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
<start>if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {<end>
//comment
//comment
if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
<start>mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();<end>
} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}"
999,"public static double calculateContrast(@ColorInt int foreground, @ColorInt int background) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}
<start>if (Color.alpha(foreground) < 255) {
//comment
foreground = compositeColors(foreground, background);
}<end>

final double luminance1 = calculateLuminance(foreground) + 0.05;
final double luminance2 = calculateLuminance(background) + 0.05;

//comment
return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2);
}","public static double calculateContrast(@ColorInt int foreground, @ColorInt int background) {
if (Color.alpha(background) != 255) {
throw new IllegalArgumentException(""background can not be translucent: #""
+ Integer.toHexString(background));
}
<start>if (Color.alpha(foreground) < 255) {
//comment
foreground = compositeColors(foreground, background);
}<end>

final double luminance1 = calculateLuminance(foreground) + 0.05;
final double luminance2 = calculateLuminance(background) + 0.05;

//comment
return Math.max(luminance1, luminance2) / Math.min(luminance1, luminance2);
}"
1000,"private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
<start>&& !wasPermissionOrAppOpGranted) {
//comment
return false;<end>
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}","private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
<start>if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}<end>

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}"
1001,"    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
if (mAlphabetShiftState.isShiftLocked()) {
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isAutomaticShifted()) {
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {
//comment
//comment
mShiftKeyState.onPressOnShifted();
} else {
//comment
<start>setShifted(MANUAL_SHIFT);<end>
mShiftKeyState.onPress();
}
<start>mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);<end>
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}","    private void onPressShift() {
mLongPressShiftLockFired = false;
//comment
//comment
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) return;
if (mIsAlphabetMode) {
mIsInDoubleTapShiftKey = mSwitchActions.isInDoubleTapTimeout();
if (!mIsInDoubleTapShiftKey) {
//comment
mSwitchActions.startDoubleTapTimer();
}
if (mIsInDoubleTapShiftKey) {
if (mAlphabetShiftState.isManualShifted() || mIsInAlphabetUnshiftedFromShifted) {
//comment
//comment
setShiftLocked(true);
} else {
//comment
//comment
}
} else {
<start>if (mAlphabetShiftState.isShiftLocked()) {<end>
//comment
//comment
setShifted(SHIFT_LOCK_SHIFTED);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isAutomaticShifted()) {<end>
//comment
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();
<start>} else if (mAlphabetShiftState.isShiftedOrShiftLocked()) {<end>
//comment
//comment
mShiftKeyState.onPressOnShifted();
<start>} else {
//comment
setShifted(MANUAL_SHIFT);
mShiftKeyState.onPress();<end>
}
mSwitchActions.startLongPressTimer(Constants.CODE_SHIFT);
}
} else {
//comment
toggleShiftInSymbols();
mSwitchState = SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE;
mShiftKeyState.onPress();
}
}"
1004,"private @NonNull ArrayList<String> addSplitPermissions(@NonNull List<String> perms,
int targetSDK) {
List<PermissionManager.SplitPermissionInfo> splitPerms =
getSystemService(PermissionManager.class).getSplitPermissions();

//comment
<start>ArrayList<String> expandedPerms = new ArrayList<>(perms);
int numReqPerms = perms.size();<end>
for (int reqPermNum = 0; reqPermNum < numReqPerms; reqPermNum++) {
String reqPerm = perms.get(reqPermNum);

int numSplitPerms = splitPerms.size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo splitPerm = splitPerms.get(splitPermNum);

if (targetSDK < splitPerm.getTargetSdk()
&& splitPerm.getSplitPermission().equals(reqPerm)) {
expandedPerms.addAll(splitPerm.getNewPermissions());
}
}
}

return expandedPerms;
}","private @NonNull ArrayList<String> addSplitPermissions(@NonNull List<String> perms,
int targetSDK) {
List<PermissionManager.SplitPermissionInfo> splitPerms =
getSystemService(PermissionManager.class).getSplitPermissions();

//comment
<start>ArrayList<String> expandedPerms = new ArrayList<>(perms);
int numReqPerms = perms.size();
for (int reqPermNum = 0; reqPermNum < numReqPerms; reqPermNum++) {
String reqPerm = perms.get(reqPermNum);

int numSplitPerms = splitPerms.size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo splitPerm = splitPerms.get(splitPermNum);

if (targetSDK < splitPerm.getTargetSdk()
&& splitPerm.getSplitPermission().equals(reqPerm)) {
expandedPerms.addAll(splitPerm.getNewPermissions());
}
}
}<end>

return expandedPerms;
}"
1005,"    @Override
protected void updateRingingCall(CallManager cm) {
super.updateRingingCall(cm);

//comment
<start>updateSubInfo();<end>
}","    @Override
protected void updateRingingCall(CallManager cm) {
super.updateRingingCall(cm);

//comment
<start>updateSubInfo();<end>
}"
1006,"    public static void publishUpdateMetadataCompleted(final Context context,
final boolean downloadSuccessful) {
//comment
//comment
//comment
//comment
<start>for (UpdateEventListener listener : linkedCopyOfList(sUpdateEventListeners)) {
listener.downloadedMetadata(downloadSuccessful);
}<end>
publishUpdateCycleCompletedEvent(context);
}","    public static void publishUpdateMetadataCompleted(final Context context,
final boolean downloadSuccessful) {
//comment
//comment
//comment
//comment
<start>for (UpdateEventListener listener : linkedCopyOfList(sUpdateEventListeners)) {
listener.downloadedMetadata(downloadSuccessful);
}<end>
publishUpdateCycleCompletedEvent(context);
}"
1010,"public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
<start>newOriginQuota = estimatedSize;<end>
} else {
if (LOGV_ENABLED) {
<start>Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);<end>
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}","public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
<start>if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {<end>
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
<start>newOriginQuota = 0;
}<end>
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}"
1011,"private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
<start>if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}<end>

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}","private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
if (locals != null) {
<start>RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));<end>
}

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}"
1012,"public static CharSequence applyStyleToSpan(int style, CharSequence input, int start, int end,
int flags) {
//comment
<start>start = Math.max(0, start);<end>
end = Math.min(input.length(), end);
<start>SpannableString text = new SpannableString(input);<end>
text.setSpan(new StyleSpan(style), start, end, flags);
return text;
}","public static CharSequence applyStyleToSpan(int style, CharSequence input, int start, int end,
int flags) {
//comment
<start>start = Math.max(0, start);
end = Math.min(input.length(), end);<end>
SpannableString text = new SpannableString(input);
text.setSpan(new StyleSpan(style), start, end, flags);
return text;
}"
1014,"@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
<start>mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());<end>
mVideoCallManager.setCvoEventListener(new CvoListener());
}","@Override
protected void onFinishInflate() {
super.onFinishInflate();

if (DBG) log(""onFinishInflate(this = "" + this + "")..."");

//comment
int property = SystemProperties.getInt(""net.lte.VT_LOOPBACK_ENABLE"", 0);
mIsMediaLoopback = (property == 1) ? true : false;
if (DBG) log(""Is Media running in loopback mode: "" + mIsMediaLoopback);

//comment
mVideoCallPanel = (ViewGroup) findViewById(R.id.videoCallPanel);
mZoomControl = (ZoomControlBar) findViewById(R.id.zoom_control);
mFarEndView = (TextureView) findViewById(R.id.video_view);
mCameraPreview = (TextureView) findViewById(R.id.camera_view);
mCameraPicker = (ImageView) findViewById(R.id.camera_picker);

//comment
mCameraPreview.setSurfaceTextureListener(this);
mFarEndView.setSurfaceTextureListener(this);
mCameraPicker.setOnClickListener(this);

//comment
mVideoCallManager = VideoCallManager.getInstance(mContext);
mBackCameraId = mVideoCallManager.getBackCameraId();
mFrontCameraId = mVideoCallManager.getFrontCameraId();
chooseCamera(true);

//comment
mNumberOfCameras = mVideoCallManager.getNumberOfCameras();
if (mNumberOfCameras > 1) {
mCameraPicker.setVisibility(View.VISIBLE);
} else {
mCameraPicker.setVisibility(View.GONE);
}

//comment
<start>mVideoCallManager.setOnParamReadyListener(new ParamReadyListener());
mVideoCallManager.setCvoEventListener(new CvoListener());<end>
}"
1016,"    private void updateVideoCallState(Call call) {
Call.State state = call.getState();
if (DBG) log(""  - Videocall.state: "" + state);

//comment
if (mVideoCallPanel == null) {
loge(""VideocallPanel is null"");
return;
}
int callType = getVideoCallType(call);
switch (state) {
case INCOMING:
break;

case DIALING:
//comment
//comment
case ALERTING:
case ACTIVE:
initVideoCall(callType);

//comment
<start>showVideoCallWidgets(callType);<end>
break;

case DISCONNECTING:
case DISCONNECTED:
hideVideoCallWidgets();
break;

case HOLDING:
case IDLE:
case WAITING:
hideVideoCallWidgets();
break;

default:
Log.e(LOG_TAG, ""videocall: updateVideoCallState in bad state:"" + state);
hideVideoCallWidgets();
break;
}
}","    private void updateVideoCallState(Call call) {
Call.State state = call.getState();
if (DBG) log(""  - Videocall.state: "" + state);

//comment
if (mVideoCallPanel == null) {
loge(""VideocallPanel is null"");
return;
}
int callType = getVideoCallType(call);
switch (state) {
case INCOMING:
break;

case DIALING:
//comment
//comment
case ALERTING:
case ACTIVE:
initVideoCall(callType);

//comment
<start>showVideoCallWidgets(callType);<end>
break;

case DISCONNECTING:
case DISCONNECTED:
hideVideoCallWidgets();
break;

case HOLDING:
case IDLE:
case WAITING:
hideVideoCallWidgets();
break;

default:
Log.e(LOG_TAG, ""videocall: updateVideoCallState in bad state:"" + state);
hideVideoCallWidgets();
break;
}
}"
1017,"public void updateManageConferencePanel(List<Connection> connections) {
mNumCallersInConference = connections.size();
if (DBG) log(""updateManageConferencePanel()... num connections in conference = ""
+ mNumCallersInConference);

//comment
//comment
final boolean hasActiveCall = mCM.hasActiveFgCall();
final boolean hasHoldingCall = mCM.hasActiveBgCall();
boolean canSeparate = !(hasActiveCall && hasHoldingCall);

for (int i = 0; i < MAX_CALLERS_IN_CONFERENCE; i++) {
if (i < mNumCallersInConference) {
//comment
<start>Connection connection = (Connection) connections.get(i);<end>
updateManageConferenceRow(i, connection, canSeparate);
} else {
//comment
updateManageConferenceRow(i, null, false);
}
}
}","public void updateManageConferencePanel(List<Connection> connections) {
mNumCallersInConference = connections.size();
if (DBG) log(""updateManageConferencePanel()... num connections in conference = ""
+ mNumCallersInConference);

//comment
//comment
final boolean hasActiveCall = mCM.hasActiveFgCall();
final boolean hasHoldingCall = mCM.hasActiveBgCall();
boolean canSeparate = !(hasActiveCall && hasHoldingCall);

for (int i = 0; i < MAX_CALLERS_IN_CONFERENCE; i++) {
if (i < mNumCallersInConference) {
//comment
<start>Connection connection = (Connection) connections.get(i);
updateManageConferenceRow(i, connection, canSeparate);<end>
} else {
//comment
updateManageConferenceRow(i, null, false);
}
}
}"
1019,"    private static Sender findSender(Context context, int resourceId, Account account)
throws MessagingException {
Sender sender = null;
try {
XmlResourceParser xml = context.getResources().getXml(resourceId);
int xmlEventType;
<start>HostAuth sendAuth = account.getOrCreateHostAuthSend(context);<end>
//comment
while ((xmlEventType = xml.next()) != XmlResourceParser.END_DOCUMENT) {
if (xmlEventType == XmlResourceParser.START_TAG &&
<start>""sender"".equals(xml.getName())) {
String xmlScheme = xml.getAttributeValue(null, ""scheme"");<end>
if (sendAuth.mProtocol != null && sendAuth.mProtocol.startsWith(xmlScheme)) {
//comment
//comment
String className = xml.getAttributeValue(null, ""class"");
sender = instantiateSender(context, className, account);
}
}
}
} catch (XmlPullParserException e) {
//comment
} catch (IOException e) {
//comment
}
return sender;
}","    private static Sender findSender(Context context, int resourceId, Account account)
throws MessagingException {
Sender sender = null;
try {
XmlResourceParser xml = context.getResources().getXml(resourceId);
int xmlEventType;
HostAuth sendAuth = account.getOrCreateHostAuthSend(context);
//comment
<start>while ((xmlEventType = xml.next()) != XmlResourceParser.END_DOCUMENT) {<end>
if (xmlEventType == XmlResourceParser.START_TAG &&
""sender"".equals(xml.getName())) {
String xmlScheme = xml.getAttributeValue(null, ""scheme"");
if (sendAuth.mProtocol != null && sendAuth.mProtocol.startsWith(xmlScheme)) {
//comment
//comment
String className = xml.getAttributeValue(null, ""class"");
sender = instantiateSender(context, className, account);
}
}
}
} catch (XmlPullParserException e) {
//comment
} catch (IOException e) {
//comment
}
return sender;
}"
1021,"@Override
public void setListAdapter(ListAdapter adapter) {
if (mHeaders == null) {
mHeaders = new ArrayList<Header>();
//comment
//comment
//comment
<start>for (int i = 0; i < adapter.getCount(); i++) {
mHeaders.add((Header) adapter.getItem(i));
}<end>
}

//comment
//comment
super.setListAdapter(new HeaderAdapter(this, mHeaders));
}","@Override
public void setListAdapter(ListAdapter adapter) {
if (mHeaders == null) {
mHeaders = new ArrayList<Header>();
//comment
//comment
//comment
<start>for (int i = 0; i < adapter.getCount(); i++) {
mHeaders.add((Header) adapter.getItem(i));
}<end>
}

//comment
//comment
super.setListAdapter(new HeaderAdapter(this, mHeaders));
}"
1026,"private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
<start>String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}<end>
}
<start>permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);<end>
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}","private static boolean grantPermissionAndAppOp(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
boolean permissionOrAppOpChanged = grantPermissionWithoutAppOp(packageName, permission,
context);

//comment
if (!isBackgroundPermission(permission, context)) {
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return false;
}

int appOpMode;
if (!isForegroundPermission(permission, context)) {
//comment
appOpMode = AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
<start>String backgroundPermission = getBackgroundPermission(permission, context);
if (!isPermissionAndAppOpGranted(packageName, backgroundPermission, context)) {
appOpMode = AppOpsManager.MODE_FOREGROUND;
} else {
appOpMode = AppOpsManager.MODE_ALLOWED;
}<end>
}
permissionOrAppOpChanged = setAppOpUidMode(packageName, appOp, appOpMode, context);
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
permissionOrAppOpChanged |= setAppOpUidMode(packageName, foregroundAppOp,
AppOpsManager.MODE_ALLOWED, context);
}
}

return permissionOrAppOpChanged;
}"
1028,"    @Override
public void onCreate() {
super.onCreate();

if (Log.isLoggable(LogTag.STRICT_MODE_TAG, Log.DEBUG)) {
//comment
//comment
//comment
StrictMode.setThreadPolicy(
new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
}

sMmsApp = this;

//comment
PreferenceManager.setDefaultValues(this, R.xml.preferences, false);

//comment
<start>mCountryDetector = (CountryDetector) getSystemService(Context.COUNTRY_DETECTOR);<end>
mCountryListener = new CountryListener() {
@Override
public synchronized void onCountryDetected(Country country) {
mCountryIso = country.getCountryIso();
}
};
mCountryDetector.addCountryListener(mCountryListener, getMainLooper());

Context context = getApplicationContext();
mPduLoaderManager = new PduLoaderManager(context);
mThumbnailManager = new ThumbnailManager(context);

MmsConfig.init(this);
Contact.init(this);
DraftCache.init(this);
Conversation.init(this);
DownloadManager.init(this);
RateController.init(this);
LayoutManager.init(this);
MessagingNotification.init(this);

activePendingMessages();
}","    @Override
public void onCreate() {
super.onCreate();

if (Log.isLoggable(LogTag.STRICT_MODE_TAG, Log.DEBUG)) {
//comment
//comment
//comment
StrictMode.setThreadPolicy(
new StrictMode.ThreadPolicy.Builder().detectAll().penaltyLog().build());
}

sMmsApp = this;

//comment
PreferenceManager.setDefaultValues(this, R.xml.preferences, false);

//comment
<start>mCountryDetector = (CountryDetector) getSystemService(Context.COUNTRY_DETECTOR);
mCountryListener = new CountryListener() {
@Override
public synchronized void onCountryDetected(Country country) {
mCountryIso = country.getCountryIso();
}
};
mCountryDetector.addCountryListener(mCountryListener, getMainLooper());<end>

Context context = getApplicationContext();
mPduLoaderManager = new PduLoaderManager(context);
mThumbnailManager = new ThumbnailManager(context);

MmsConfig.init(this);
Contact.init(this);
DraftCache.init(this);
Conversation.init(this);
DownloadManager.init(this);
RateController.init(this);
LayoutManager.init(this);
MessagingNotification.init(this);

activePendingMessages();
}"
1029,"private static boolean shouldFilterOut(final String text, final int script) {
if (TextUtils.isEmpty(text) || text.length() <= 1) return true;

//comment
//comment
//comment
<start>final int firstCodePoint = text.codePointAt(0);<end>
//comment
if (!isLetterCheckableByLanguage(firstCodePoint, script)
&& '\'' != firstCodePoint) return true;

//comment
final int length = text.length();
int letterCount = 0;
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
//comment
//comment
//comment
if (Constants.CODE_COMMERCIAL_AT == codePoint || Constants.CODE_SLASH == codePoint) {
return true;
}
if (isLetterCheckableByLanguage(codePoint, script)) ++letterCount;
}
//comment
//comment
<start>return (letterCount * 4 < length * 3);<end>
}","private static boolean shouldFilterOut(final String text, final int script) {
if (TextUtils.isEmpty(text) || text.length() <= 1) return true;

//comment
//comment
//comment
<start>final int firstCodePoint = text.codePointAt(0);<end>
//comment
if (!isLetterCheckableByLanguage(firstCodePoint, script)
&& '\'' != firstCodePoint) return true;

//comment
final int length = text.length();
int letterCount = 0;
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
//comment
//comment
//comment
if (Constants.CODE_COMMERCIAL_AT == codePoint || Constants.CODE_SLASH == codePoint) {
return true;
}
if (isLetterCheckableByLanguage(codePoint, script)) ++letterCount;
}
//comment
//comment
return (letterCount * 4 < length * 3);
}"
1030,"private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
<start>for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}<end>

<start>if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}<end>
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}","private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

<start>if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}<end>
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}"
1031,"    @Override
public void checkFilterValidity(boolean notifyListeners) {
if (mFilter == null) {
return;
}

switch (mFilter.filterType) {
case ContactListFilter.FILTER_TYPE_SINGLE_CONTACT:
setContactListFilter(
ContactListFilter.restoreDefaultPreferences(getSharedPreferences()),
false, notifyListeners);
break;
case ContactListFilter.FILTER_TYPE_ACCOUNT:
if (!filterAccountExists()) {
//comment
//comment
setContactListFilter(ContactListFilter.createFilterWithType(
ContactListFilter.FILTER_TYPE_ALL_ACCOUNTS), true, notifyListeners);
}
break;
}
}","    @Override
public void checkFilterValidity(boolean notifyListeners) {
if (mFilter == null) {
return;
}

switch (mFilter.filterType) {
case ContactListFilter.FILTER_TYPE_SINGLE_CONTACT:
setContactListFilter(
ContactListFilter.restoreDefaultPreferences(getSharedPreferences()),
false, notifyListeners);
break;
case ContactListFilter.FILTER_TYPE_ACCOUNT:
<start>if (!filterAccountExists()) {
//comment
//comment
setContactListFilter(ContactListFilter.createFilterWithType(
ContactListFilter.FILTER_TYPE_ALL_ACCOUNTS), true, notifyListeners);
}<end>
break;
}
}"
1032,"        @Override
public void onPageStarted(WebView view, String url, Bitmap favicon) {
mInPageLoad = true;
mUpdateThumbnail = true;
mPageLoadProgress = INITIAL_PROGRESS;
mCurrentState = new PageState(mContext,
view.isPrivateBrowsingEnabled(), url, favicon);
mLoadStartTime = SystemClock.uptimeMillis();

//comment
//comment
//comment
if (mTouchIconLoader != null) {
mTouchIconLoader.mTab = null;
mTouchIconLoader = null;
}

//comment
if (mErrorConsole != null) {
<start>mErrorConsole.clearErrorMessages();
if (mWebViewController.shouldShowErrorConsole()) {
mErrorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
}<end>
}

//comment
if (mDeviceAccountLogin != null) {
mDeviceAccountLogin.cancel();
mDeviceAccountLogin = null;
mWebViewController.hideAutoLogin(Tab.this);
}

//comment
mWebViewController.onPageStarted(Tab.this, view, favicon);

updateBookmarkedStatus();
}","        @Override
public void onPageStarted(WebView view, String url, Bitmap favicon) {
mInPageLoad = true;
mUpdateThumbnail = true;
mPageLoadProgress = INITIAL_PROGRESS;
mCurrentState = new PageState(mContext,
view.isPrivateBrowsingEnabled(), url, favicon);
mLoadStartTime = SystemClock.uptimeMillis();

//comment
//comment
//comment
if (mTouchIconLoader != null) {
mTouchIconLoader.mTab = null;
mTouchIconLoader = null;
}

//comment
<start>if (mErrorConsole != null) {
mErrorConsole.clearErrorMessages();
if (mWebViewController.shouldShowErrorConsole()) {
mErrorConsole.showConsole(ErrorConsoleView.SHOW_NONE);
}
}<end>

//comment
if (mDeviceAccountLogin != null) {
mDeviceAccountLogin.cancel();
mDeviceAccountLogin = null;
mWebViewController.hideAutoLogin(Tab.this);
}

//comment
mWebViewController.onPageStarted(Tab.this, view, favicon);

updateBookmarkedStatus();
}"
1033,"private void saveToDatabase() {
if (mMailbox == null) {
//comment
<start>return;<end>
}
final int syncInterval = mSyncEnabledPref.isChecked() ? 1 : 0;
final int syncLookback = Integer.valueOf(mSyncLookbackPref.getValue());

final boolean syncIntervalChanged = syncInterval != mMailbox.mSyncInterval;
final boolean syncLookbackChanged = syncLookback != mMailbox.mSyncLookback;

//comment
if (!syncIntervalChanged && !syncLookbackChanged) {
return;
}

LogUtils.i(Logging.LOG_TAG, ""Saving mailbox settings..."");
enablePreferences(false);

final long id = mMailbox.mId;
final Context context = getActivity().getApplicationContext();

new EmailAsyncTask<Void, Void, Void> (null ) {
@Override
protected Void doInBackground(Void... params) {
final ContentValues cv = new ContentValues(2);
final Uri uri;
if (syncIntervalChanged) {
cv.put(MailboxColumns.SYNC_INTERVAL, syncInterval);
}
if (syncLookbackChanged) {
cv.put(MailboxColumns.SYNC_LOOKBACK, syncLookback);
}
uri = ContentUris.withAppendedId(Mailbox.CONTENT_URI, id);
context.getContentResolver().update(uri, cv, null, null);

LogUtils.i(Logging.LOG_TAG, ""Saved: "" + uri);
return null;
}
}.executeSerial((Void [])null);
}","private void saveToDatabase() {
<start>if (mMailbox == null) {
//comment
return;<end>
}
final int syncInterval = mSyncEnabledPref.isChecked() ? 1 : 0;
final int syncLookback = Integer.valueOf(mSyncLookbackPref.getValue());

final boolean syncIntervalChanged = syncInterval != mMailbox.mSyncInterval;
final boolean syncLookbackChanged = syncLookback != mMailbox.mSyncLookback;

//comment
if (!syncIntervalChanged && !syncLookbackChanged) {
return;
}

LogUtils.i(Logging.LOG_TAG, ""Saving mailbox settings..."");
enablePreferences(false);

final long id = mMailbox.mId;
final Context context = getActivity().getApplicationContext();

new EmailAsyncTask<Void, Void, Void> (null ) {
@Override
protected Void doInBackground(Void... params) {
final ContentValues cv = new ContentValues(2);
final Uri uri;
if (syncIntervalChanged) {
cv.put(MailboxColumns.SYNC_INTERVAL, syncInterval);
}
if (syncLookbackChanged) {
cv.put(MailboxColumns.SYNC_LOOKBACK, syncLookback);
}
uri = ContentUris.withAppendedId(Mailbox.CONTENT_URI, id);
context.getContentResolver().update(uri, cv, null, null);

LogUtils.i(Logging.LOG_TAG, ""Saved: "" + uri);
return null;
}
}.executeSerial((Void [])null);
}"
1036,"private void doGetNamespace(boolean hasNamespaceCapability) throws MessagingException {
//comment
if (hasNamespaceCapability && !mImapStore.isUserPrefixSet()) {
List<ImapResponse> responseList = Collections.emptyList();

try {
responseList = executeSimpleCommand(ImapConstants.NAMESPACE);
<start>} catch (ImapException ie) {<end>
//comment
if (DebugUtils.DEBUG) {
<start>LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");<end>
}
} catch (IOException ioe) {
//comment
}

for (ImapResponse response: responseList) {
if (response.isDataResponse(0, ImapConstants.NAMESPACE)) {
ImapList namespaceList = response.getListOrEmpty(1);
ImapList namespace = namespaceList.getListOrEmpty(0);
String namespaceString = namespace.getStringOrEmpty(0).getString();
if (!TextUtils.isEmpty(namespaceString)) {
mImapStore.setPathPrefix(ImapStore.decodeFolderName(namespaceString, null));
mImapStore.setPathSeparator(namespace.getStringOrEmpty(1).getString());
}
}
}
}
}","private void doGetNamespace(boolean hasNamespaceCapability) throws MessagingException {
//comment
if (hasNamespaceCapability && !mImapStore.isUserPrefixSet()) {
List<ImapResponse> responseList = Collections.emptyList();

try {
responseList = executeSimpleCommand(ImapConstants.NAMESPACE);
} catch (ImapException ie) {
//comment
<start>if (DebugUtils.DEBUG) {
LogUtils.d(Logging.LOG_TAG, ie, ""ImapException"");
}<end>
} catch (IOException ioe) {
//comment
}

for (ImapResponse response: responseList) {
if (response.isDataResponse(0, ImapConstants.NAMESPACE)) {
ImapList namespaceList = response.getListOrEmpty(1);
ImapList namespace = namespaceList.getListOrEmpty(0);
String namespaceString = namespace.getStringOrEmpty(0).getString();
if (!TextUtils.isEmpty(namespaceString)) {
mImapStore.setPathPrefix(ImapStore.decodeFolderName(namespaceString, null));
mImapStore.setPathSeparator(namespace.getStringOrEmpty(1).getString());
}
}
}
}
}"
1038,"private List<View> getViewsToDisplay(boolean isExpanded) {
final List<View> viewsToDisplay = new ArrayList<View>();
if (isExpanded) {
for (int i = 0; i < mEntryViews.size(); i++) {
List<View> viewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(viewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
for (View view : viewList) {
viewsToDisplay.add(view);
}
}
} else {
//comment
//comment
//comment
<start>int numInViewGroup = 0;
int extraEntries = mCollapsedEntriesCount - mEntryViews.size();<end>
for (int i = 0; i < mEntryViews.size() && numInViewGroup < mCollapsedEntriesCount;
i++) {
List<View> entryViewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(entryViewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
viewsToDisplay.add(entryViewList.get(0));
numInViewGroup++;

//comment
for (int j = 1; j < entryViewList.size() && numInViewGroup < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
viewsToDisplay.add(entryViewList.get(j));
numInViewGroup++;
extraEntries--;
}
}
}

formatEntryIfFirst(viewsToDisplay);
return viewsToDisplay;
}","private List<View> getViewsToDisplay(boolean isExpanded) {
final List<View> viewsToDisplay = new ArrayList<View>();
if (isExpanded) {
for (int i = 0; i < mEntryViews.size(); i++) {
List<View> viewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(viewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
for (View view : viewList) {
viewsToDisplay.add(view);
}
}
} else {
//comment
//comment
//comment
<start>int numInViewGroup = 0;
int extraEntries = mCollapsedEntriesCount - mEntryViews.size();
for (int i = 0; i < mEntryViews.size() && numInViewGroup < mCollapsedEntriesCount;
i++) {
List<View> entryViewList = mEntryViews.get(i);
if (i > 0) {
View separator;
if (mSeparators.size() <= i - 1) {
separator = generateSeparator(entryViewList.get(0));
mSeparators.add(separator);
} else {
separator = mSeparators.get(i - 1);
}
viewsToDisplay.add(separator);
}
viewsToDisplay.add(entryViewList.get(0));
numInViewGroup++;<end>

//comment
<start>for (int j = 1; j < entryViewList.size() && numInViewGroup < mCollapsedEntriesCount
&& extraEntries > 0; j++) {
viewsToDisplay.add(entryViewList.get(j));
numInViewGroup++;
extraEntries--;
}
}<end>
}

formatEntryIfFirst(viewsToDisplay);
return viewsToDisplay;
}"
1041,"private void handleBootCompleted() {
//comment
//comment
//comment
int numMoved = moveOutboxMessagesToFailedBox();
if (numMoved > 0) {
MessagingNotification.notifySendFailed(getApplicationContext(), true);
}

//comment
<start>sendFirstQueuedMessage();<end>

//comment
MessagingNotification.blockingUpdateNewMessageIndicator(
this, MessagingNotification.THREAD_ALL, false);
}","private void handleBootCompleted() {
//comment
//comment
//comment
int numMoved = moveOutboxMessagesToFailedBox();
if (numMoved > 0) {
MessagingNotification.notifySendFailed(getApplicationContext(), true);
}

//comment
<start>sendFirstQueuedMessage();<end>

//comment
MessagingNotification.blockingUpdateNewMessageIndicator(
this, MessagingNotification.THREAD_ALL, false);
}"
1048,"void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
<start>.stopSearch();<end>
if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
<start>|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}<end>

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
}
}","void onNewIntent(Intent intent) {
Uri uri = intent.getData();
if (uri != null && isForbiddenUri(uri)) {
Log.e(TAG, ""Aborting intent with forbidden uri, \"""" + uri + ""\"""");
return;
}

Tab current = mTabControl.getCurrentTab();
//comment
//comment
if (current == null) {
//comment
current = mTabControl.getTab(0);
if (current == null) {
//comment
return;
}
mController.setActiveTab(current);
}
final String action = intent.getAction();
final int flags = intent.getFlags();
if (Intent.ACTION_MAIN.equals(action) ||
(flags & Intent.FLAG_ACTIVITY_LAUNCHED_FROM_HISTORY) != 0) {
//comment
return;
}
if (BrowserActivity.ACTION_SHOW_BOOKMARKS.equals(action)) {
mController.bookmarksOrHistoryPicker(ComboViews.Bookmarks);
return;
}

//comment
((SearchManager) mActivity.getSystemService(Context.SEARCH_SERVICE))
.stopSearch();
<start>if (Intent.ACTION_VIEW.equals(action)
|| NfcAdapter.ACTION_NDEF_DISCOVERED.equals(action)
|| Intent.ACTION_SEARCH.equals(action)
|| MediaStore.INTENT_ACTION_MEDIA_SEARCH.equals(action)
|| Intent.ACTION_WEB_SEARCH.equals(action)) {
//comment
//comment
if (handleWebSearchIntent(mActivity, mController, intent)) {
return;
}<end>

UrlData urlData = getUrlDataFromIntent(intent);
if (urlData.isEmpty()) {
urlData = new UrlData(mSettings.getHomePage());
}

if (intent.getBooleanExtra(Browser.EXTRA_CREATE_NEW_TAB, false)
|| urlData.isPreloaded()) {
Tab t = mController.openTab(urlData);
return;
}
//comment
//comment
//comment
//comment
//comment
final String appId = intent
.getStringExtra(Browser.EXTRA_APPLICATION_ID);
if (Intent.ACTION_VIEW.equals(action)
&& (appId != null)
&& appId.startsWith(mActivity.getPackageName())) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if ((appTab != null) && (appTab == mController.getCurrentTab())) {
mController.switchToTab(appTab);
mController.loadUrlDataIn(appTab, urlData);
return;
}
}
if (Intent.ACTION_VIEW.equals(action)
&& !mActivity.getPackageName().equals(appId)) {
if (!BrowserActivity.isTablet(mActivity)
&& !mSettings.allowAppTabs()) {
Tab appTab = mTabControl.getTabFromAppId(appId);
if (appTab != null) {
mController.reuseTab(appTab, urlData);
return;
}
}
//comment
//comment
Tab appTab = mTabControl.findTabWithUrl(urlData.mUrl);
if (appTab != null) {
//comment
appTab.setAppId(appId);
if (current != appTab) {
mController.switchToTab(appTab);
}
//comment
} else {
//comment
//comment
//comment
//comment
//comment
Tab tab = mController.openTab(urlData);
if (tab != null) {
tab.setAppId(appId);
if ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != 0) {
tab.setCloseOnBack(true);
}
}
}
} else {
//comment
mController.dismissSubWindow(current);
//comment
//comment
//comment
current.setAppId(null);
mController.loadUrlDataIn(current, urlData);
}
<start>}<end>
}"
1052,"    private void createDisplayPasskeyOrPinDialog(
CachedBluetoothDeviceManager deviceManager) {
final AlertController.AlertParams p = mAlertParams;
p.mIconId = android.R.drawable.ic_dialog_info;
p.mTitle = getString(R.string.bluetooth_pairing_request);
p.mView = createView(deviceManager);
p.mNegativeButtonText = getString(android.R.string.cancel);
p.mNegativeButtonListener = this;
setupAlert();

//comment
//comment
if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY) {
mDevice.setPairingConfirmation(true);
} else if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN) {
byte[] pinBytes = BluetoothDevice.convertPinToBytes(mPairingKey);
mDevice.setPin(pinBytes);
}
}","    private void createDisplayPasskeyOrPinDialog(
CachedBluetoothDeviceManager deviceManager) {
final AlertController.AlertParams p = mAlertParams;
p.mIconId = android.R.drawable.ic_dialog_info;
p.mTitle = getString(R.string.bluetooth_pairing_request);
p.mView = createView(deviceManager);
p.mNegativeButtonText = getString(android.R.string.cancel);
p.mNegativeButtonListener = this;
setupAlert();

//comment
//comment
<start>if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY) {
mDevice.setPairingConfirmation(true);
} else if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN) {<end>
byte[] pinBytes = BluetoothDevice.convertPinToBytes(mPairingKey);
mDevice.setPin(pinBytes);
}
}"
1054,"@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
if (mDrawable != null) {
//comment
final int nativeDrawableWidth = mDrawable.getIntrinsicWidth();
<start>final int nativeDrawableHeight = mDrawable.getIntrinsicHeight();<end>
final int viewWidth = getMeasuredWidth();
final int viewHeight = getMeasuredHeight();
final float imageCirclePercentage = mImageCirclePercentage > 0
? mImageCirclePercentage : 1;

final float scaleFactor = Math.min(1f,
Math.min(
(float) nativeDrawableWidth != 0
? imageCirclePercentage * viewWidth / nativeDrawableWidth : 1,
(float) nativeDrawableHeight != 0
? imageCirclePercentage
* viewHeight / nativeDrawableHeight : 1));

//comment
final int drawableWidth = Math.round(scaleFactor * nativeDrawableWidth);
final int drawableHeight = Math.round(scaleFactor * nativeDrawableHeight);

//comment
final int drawableLeft = (viewWidth - drawableWidth) / 2
+ Math.round(mImageHorizontalOffcenterPercentage * drawableWidth);
final int drawableTop = (viewHeight - drawableHeight) / 2;

mDrawable.setBounds(drawableLeft, drawableTop, drawableLeft + drawableWidth,
drawableTop + drawableHeight);
}

super.onLayout(changed, left, top, right, bottom);
}","@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
if (mDrawable != null) {
//comment
<start>final int nativeDrawableWidth = mDrawable.getIntrinsicWidth();
final int nativeDrawableHeight = mDrawable.getIntrinsicHeight();
final int viewWidth = getMeasuredWidth();
final int viewHeight = getMeasuredHeight();<end>
final float imageCirclePercentage = mImageCirclePercentage > 0
? mImageCirclePercentage : 1;

final float scaleFactor = Math.min(1f,
Math.min(
(float) nativeDrawableWidth != 0
? imageCirclePercentage * viewWidth / nativeDrawableWidth : 1,
(float) nativeDrawableHeight != 0
? imageCirclePercentage
* viewHeight / nativeDrawableHeight : 1));

//comment
final int drawableWidth = Math.round(scaleFactor * nativeDrawableWidth);
final int drawableHeight = Math.round(scaleFactor * nativeDrawableHeight);

//comment
final int drawableLeft = (viewWidth - drawableWidth) / 2
+ Math.round(mImageHorizontalOffcenterPercentage * drawableWidth);
final int drawableTop = (viewHeight - drawableHeight) / 2;

mDrawable.setBounds(drawableLeft, drawableTop, drawableLeft + drawableWidth,
drawableTop + drawableHeight);
}

super.onLayout(changed, left, top, right, bottom);
}"
1055,"    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
mIsResponseSent = false;

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
<start>appService.getStkContext(mSlotId).setImmediateDialogInstance(this);<end>
} else {
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);
} else {
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}","    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);

CatLog.d(LOG_TAG, ""onCreate, sim id: "" + mSlotId);

//comment
//comment
if (appService == null) {
CatLog.d(LOG_TAG, ""onCreate - appService is null"");
finish();
return;
}

//comment
mIsResponseSent = false;

AlertDialog.Builder alertDialogBuilder = new AlertDialog.Builder(this);

alertDialogBuilder.setPositiveButton(R.string.button_ok, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int id) {
CatLog.d(LOG_TAG, ""OK Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, true);
}
});

alertDialogBuilder.setNegativeButton(R.string.button_cancel, new
DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog,int id) {
CatLog.d(LOG_TAG, ""Cancel Clicked!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_CONFIRM, false);
}
});

alertDialogBuilder.setOnCancelListener(new DialogInterface.OnCancelListener() {
@Override
public void onCancel(DialogInterface dialog) {
CatLog.d(LOG_TAG, ""Moving backward!, mSlotId: "" + mSlotId);
sendResponse(StkAppService.RES_ID_BACKWARD);
}
});

alertDialogBuilder.create();

initFromIntent(getIntent());
if (mTextMsg == null) {
finish();
return;
}

<start>if (!mTextMsg.responseNeeded) {
alertDialogBuilder.setNegativeButton(null, null);
//comment
//comment
//comment
appService.getStkContext(mSlotId).setImmediateDialogInstance(this);
} else {<end>
appService.getStkContext(mSlotId).setPendingDialogInstance(this);
}

alertDialogBuilder.setTitle(mTextMsg.title);

LayoutInflater inflater = this.getLayoutInflater();
View dialogView = inflater.inflate(R.layout.stk_msg_dialog, null);
alertDialogBuilder.setView(dialogView);
TextView tv = (TextView) dialogView.findViewById(R.id.message);
ImageView iv = (ImageView) dialogView.findViewById(R.id.icon);

if (mTextMsg.icon != null) {
iv.setImageBitmap(mTextMsg.icon);
} else {
iv.setVisibility(View.GONE);
}

//comment
if ((mTextMsg.icon == null || !mTextMsg.iconSelfExplanatory)
&& !TextUtils.isEmpty(mTextMsg.text)) {
tv.setText(mTextMsg.text);
} else {
tv.setVisibility(View.GONE);
}

mAlertDialog = alertDialogBuilder.create();
mAlertDialog.setCanceledOnTouchOutside(false);
mAlertDialog.show();
}"
1060,"    public void onFinishSlidingInput() {
<start>if (DEBUG_EVENT) {
Log.d(TAG, ""onFinishSlidingInput: "" + this);
}
//comment
switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
toggleAlphabetAndSymbols();<end>
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
toggleShiftInSymbols();
break;
case SWITCH_STATE_MOMENTARY_ALPHA_SHIFT:
setAlphabetKeyboard();
break;
}
}","    public void onFinishSlidingInput() {
if (DEBUG_EVENT) {
Log.d(TAG, ""onFinishSlidingInput: "" + this);
}
//comment
<start>switch (mSwitchState) {
case SWITCH_STATE_MOMENTARY_ALPHA_AND_SYMBOL:
toggleAlphabetAndSymbols();
break;
case SWITCH_STATE_MOMENTARY_SYMBOL_AND_MORE:
toggleShiftInSymbols();
break;
case SWITCH_STATE_MOMENTARY_ALPHA_SHIFT:
setAlphabetKeyboard();
break;
}<end>
}"
1061,"@Override
public void onLoadResource(WebView view, String url) {
if (url != null && url.length() > 0) {
//comment
//comment
if (mCurrentState.mSecurityState == SecurityState.SECURITY_STATE_SECURE) {
//comment
<start>if (!(URLUtil.isHttpsUrl(url) || URLUtil.isDataUrl(url)
|| URLUtil.isAboutUrl(url))) {
mCurrentState.mSecurityState = SecurityState.SECURITY_STATE_MIXED;
}<end>
}
}
}","@Override
public void onLoadResource(WebView view, String url) {
if (url != null && url.length() > 0) {
//comment
//comment
if (mCurrentState.mSecurityState == SecurityState.SECURITY_STATE_SECURE) {
//comment
<start>if (!(URLUtil.isHttpsUrl(url) || URLUtil.isDataUrl(url)
|| URLUtil.isAboutUrl(url))) {
mCurrentState.mSecurityState = SecurityState.SECURITY_STATE_MIXED;
}<end>
}
}
}"
1065,"        private void processListenerQueue(ListenerRecord record) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Processing component "" + record.componentName + "", ""
+ record.taskQueue.size() + "" queued tasks"");
}
if (record.taskQueue.isEmpty()) {
<start>return;<end>
}
if (!ensureServiceBound(record) || record.service == null) {
//comment
<start>scheduleListenerRetry(record);<end>
return;
}
//comment
while (true) {
Task task = record.taskQueue.peek();
if (task == null) {
break;
}
try {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Sending task "" + task);
}
task.send(record.service);
record.taskQueue.remove();
} catch (DeadObjectException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Remote service has died: "" + record.componentName);
}
break;
} catch (RemoteException e) {
Log.w(TAG, ""RemoteException communicating with "" + record.componentName, e);
break;
}
}
if (!record.taskQueue.isEmpty()) {
//comment
scheduleListenerRetry(record);
}
}","        private void processListenerQueue(ListenerRecord record) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Processing component "" + record.componentName + "", ""
+ record.taskQueue.size() + "" queued tasks"");
}
if (record.taskQueue.isEmpty()) {
return;
}
<start>if (!ensureServiceBound(record) || record.service == null) {
//comment
scheduleListenerRetry(record);
return;
}<end>
//comment
while (true) {
Task task = record.taskQueue.peek();
if (task == null) {
break;
}
try {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Sending task "" + task);
}
task.send(record.service);
record.taskQueue.remove();
} catch (DeadObjectException e) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Remote service has died: "" + record.componentName);
}
break;
} catch (RemoteException e) {
Log.w(TAG, ""RemoteException communicating with "" + record.componentName, e);
break;
}
}
if (!record.taskQueue.isEmpty()) {
//comment
scheduleListenerRetry(record);
}
}"
1068,"    @Override
public void onCreate(Bundle icicle) {
mPackageManager = getPackageManager();
mAppWidgetManager = AppWidgetManager.getInstance(this);
mAppWidgetLoader = new AppWidgetLoader<PickAdapter.Item>
(this, mAppWidgetManager, this);

super.onCreate(icicle);

//comment
setResultData(RESULT_CANCELED, null);

//comment
final Intent intent = getIntent();
if (intent.hasExtra(AppWidgetManager.EXTRA_APPWIDGET_ID)) {
<start>mAppWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
AppWidgetManager.INVALID_APPWIDGET_ID);<end>
} else {
finish();
}
}","    @Override
public void onCreate(Bundle icicle) {
mPackageManager = getPackageManager();
mAppWidgetManager = AppWidgetManager.getInstance(this);
mAppWidgetLoader = new AppWidgetLoader<PickAdapter.Item>
(this, mAppWidgetManager, this);

super.onCreate(icicle);

//comment
setResultData(RESULT_CANCELED, null);

//comment
<start>final Intent intent = getIntent();
if (intent.hasExtra(AppWidgetManager.EXTRA_APPWIDGET_ID)) {
mAppWidgetId = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID,
AppWidgetManager.INVALID_APPWIDGET_ID);
} else {
finish();
}<end>
}"
1069,"    private static void cancelUpdateWithDownloadManager(final Context context,
final String clientId, final DownloadManager manager) {
synchronized (sSharedIdProtector) {
final long metadataDownloadId =
MetadataDbHelper.getMetadataDownloadIdForClient(context, clientId);
if (NOT_AN_ID == metadataDownloadId) return;
manager.remove(metadataDownloadId);
<start>writeMetadataDownloadId(context,
MetadataDbHelper.getMetadataUriAsString(context, clientId), NOT_AN_ID);<end>
}
//comment
//comment
<start>for (UpdateEventListener listener : linkedCopyOfList(sUpdateEventListeners)) {
listener.downloadedMetadata(false);
}<end>
}","    private static void cancelUpdateWithDownloadManager(final Context context,
final String clientId, final DownloadManager manager) {
synchronized (sSharedIdProtector) {
final long metadataDownloadId =
MetadataDbHelper.getMetadataDownloadIdForClient(context, clientId);
if (NOT_AN_ID == metadataDownloadId) return;
manager.remove(metadataDownloadId);
writeMetadataDownloadId(context,
MetadataDbHelper.getMetadataUriAsString(context, clientId), NOT_AN_ID);
}
//comment
//comment
<start>for (UpdateEventListener listener : linkedCopyOfList(sUpdateEventListeners)) {
listener.downloadedMetadata(false);
}<end>
}"
1070,"    private void setReleasedKeyGraphics(final Key key) {
mDrawingProxy.dismissKeyPreview(this);
if (key == null) {
return;
}

//comment
<start>updateReleaseKeyGraphics(key);<end>

if (key.isShift()) {
for (final Key shiftKey : mKeyboard.mShiftKeys) {
<start>if (shiftKey != key) {
updateReleaseKeyGraphics(shiftKey);
}<end>
}
}

if (key.altCodeWhileTyping()) {
final int altCode = key.getAltCode();
final Key altKey = mKeyboard.getKey(altCode);
if (altKey != null) {
updateReleaseKeyGraphics(altKey);
}
for (final Key k : mKeyboard.mAltCodeKeysWhileTyping) {
if (k != key && k.getAltCode() == altCode) {
updateReleaseKeyGraphics(k);
}
}
}
}","    private void setReleasedKeyGraphics(final Key key) {
mDrawingProxy.dismissKeyPreview(this);
if (key == null) {
return;
}

//comment
<start>updateReleaseKeyGraphics(key);<end>

if (key.isShift()) {
for (final Key shiftKey : mKeyboard.mShiftKeys) {
if (shiftKey != key) {
updateReleaseKeyGraphics(shiftKey);
}
}
}

if (key.altCodeWhileTyping()) {
final int altCode = key.getAltCode();
final Key altKey = mKeyboard.getKey(altCode);
if (altKey != null) {
updateReleaseKeyGraphics(altKey);
}
for (final Key k : mKeyboard.mAltCodeKeysWhileTyping) {
if (k != key && k.getAltCode() == altCode) {
updateReleaseKeyGraphics(k);
}
}
}
}"
1071,"public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
<start>if (res == 0) {
//comment
return -1;
}<end>
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}","public void enableMMSConformanceMode(int textLeft, int textTop,
int imageLeft, int imageTop) {
mConformanceMode = true;
if (mScrollViewPort == null) {
mScrollViewPort = new ScrollView(mContext) {
private int mBottomY;
@Override
protected void onLayout(boolean changed, int left, int top, int right, int bottom) {
super.onLayout(changed, left, top, right, bottom);
if (getChildCount() > 0) {
int childHeight = getChildAt(0).getHeight();
int height = getHeight();
mBottomY = height < childHeight ? childHeight - height : 0;
}
}
@Override
protected void onScrollChanged(int l, int t, int oldl, int oldt) {
//comment
if (t == 0 || t >= mBottomY){
if (mMediaController != null
&& !((SlideshowActivity) mContext).isFinishing()) {
mMediaController.show();
}
}
}
};
mScrollViewPort.setScrollBarStyle(SCROLLBARS_INSIDE_OVERLAY);
mViewPort = new LinearLayout(mContext);
mViewPort.setOrientation(LinearLayout.VERTICAL);
mViewPort.setGravity(Gravity.CENTER);
mViewPort.setOnClickListener(new OnClickListener() {
public void onClick(View v) {
if (mMediaController != null) {
mMediaController.show();
}
}
});
mScrollViewPort.addView(mViewPort, new FrameLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
addView(mScrollViewPort);
}
//comment
//comment
TreeMap<Position, View> viewsByPosition = new TreeMap<Position, View>(new Comparator<Position>() {
public int compare(Position p1, Position p2) {
int l1 = p1.mLeft;
int t1 = p1.mTop;
int l2 = p2.mLeft;
int t2 = p2.mTop;
int res = t1 - t2;
if (res == 0) {
res = l1 - l2;
}
<start>if (res == 0) {
//comment
return -1;
}<end>
return res;
}
});
if (textLeft >=0 && textTop >=0) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mTextView.setTextSize(18);
mTextView.setPadding(5, 5, 5, 5);
viewsByPosition.put(new Position(textLeft, textTop), mTextView);
}

if (imageLeft >=0 && imageTop >=0) {
mImageView = new ImageView(mContext);
mImageView.setPadding(0, 5, 0, 5);
viewsByPosition.put(new Position(imageLeft, imageTop), mImageView);
//comment
//comment
mVideoView = new VideoView(mContext);
viewsByPosition.put(new Position(imageLeft + 1, imageTop), mVideoView);
}
for (View view : viewsByPosition.values()) {
if (view instanceof VideoView) {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutManager.getInstance().getLayoutParameters().getHeight()));
} else {
mViewPort.addView(view, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
LayoutParams.WRAP_CONTENT));
}
view.setVisibility(View.GONE);
}
}"
1072,"    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
<start>mApp.setBeginningCall(true);<end>
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}","    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
<start>mApp.setBeginningCall(true);<end>
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}"
1073,"        void trigger() {
boolean reportChange = false;
synchronized (mLock) {
if (mTriggerPending) {
final long nowElapsed = sElapsedRealtimeClock.millis();
if (mJobStatus.setContentTriggerConstraintSatisfied(nowElapsed, true)) {
reportChange = true;
}
unscheduleLocked();
}
}
//comment
//comment
<start>if (reportChange) {
mStateChangedListener.onControllerStateChanged();
}<end>
}","        void trigger() {
boolean reportChange = false;
synchronized (mLock) {
if (mTriggerPending) {
final long nowElapsed = sElapsedRealtimeClock.millis();
if (mJobStatus.setContentTriggerConstraintSatisfied(nowElapsed, true)) {
reportChange = true;
}
unscheduleLocked();
}
}
//comment
//comment
<start>if (reportChange) {
mStateChangedListener.onControllerStateChanged();
}<end>
}"
1075,"public void onItemCheckedStateChanged(ActionMode mode, int position, long id,
boolean checked) {
ListView lv = getListView();
int numChecked = lv.getCheckedItemCount();
mode.setTitle(String.format(mNumSelectedFormat, numChecked, mAdapter.getCount()));

//comment
<start>SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
long selectedDataSize = 0;
if (numChecked > 0) {
for (int i = 0; i < mDataCount; i++) {
if (checkedItems.get(i)) {
//comment
selectedDataSize += mAdapter.getItem(i).mSize;
}
}
}<end>
mode.setSubtitle(String.format(mNumBytesSelectedFormat,
Formatter.formatFileSize(mContext, selectedDataSize),
Formatter.formatFileSize(mContext, mAdapter.getDataSize())));
}","public void onItemCheckedStateChanged(ActionMode mode, int position, long id,
boolean checked) {
ListView lv = getListView();
int numChecked = lv.getCheckedItemCount();
mode.setTitle(String.format(mNumSelectedFormat, numChecked, mAdapter.getCount()));

//comment
<start>SparseBooleanArray checkedItems = lv.getCheckedItemPositions();
long selectedDataSize = 0;
if (numChecked > 0) {
for (int i = 0; i < mDataCount; i++) {
if (checkedItems.get(i)) {
//comment
selectedDataSize += mAdapter.getItem(i).mSize;
}
}
}<end>
mode.setSubtitle(String.format(mNumBytesSelectedFormat,
Formatter.formatFileSize(mContext, selectedDataSize),
Formatter.formatFileSize(mContext, mAdapter.getDataSize())));
}"
1076,"public int runDx(Arguments arguments) throws IOException {

//comment
errors.set(0);
//comment
//comment
<start>libraryDexBuffers.clear();<end>

args = arguments;
args.makeOptionsObjects();

OutputStream humanOutRaw = null;
if (args.humanOutName != null) {
humanOutRaw = openOutput(args.humanOutName);
humanOutWriter = new OutputStreamWriter(humanOutRaw);
}

try {
if (args.multiDex) {
return runMultiDex();
} else {
return runMonoDex();
}
} finally {
closeOutput(humanOutRaw);
}
}","public int runDx(Arguments arguments) throws IOException {

//comment
errors.set(0);
//comment
//comment
<start>libraryDexBuffers.clear();<end>

args = arguments;
args.makeOptionsObjects();

OutputStream humanOutRaw = null;
if (args.humanOutName != null) {
humanOutRaw = openOutput(args.humanOutName);
humanOutWriter = new OutputStreamWriter(humanOutRaw);
}

try {
if (args.multiDex) {
return runMultiDex();
} else {
return runMonoDex();
}
} finally {
closeOutput(humanOutRaw);
}
}"
1078,"        @Override
public String getDeviceId() {
try {
EmailAsyncTask.runAsyncSerial(new Runnable() {
@Override
public void run() {
//comment
EmailServiceUtils.startRemoteServices(mContext);
//comment
<start>DebugUtils.updateLoggingFlags(mContext);<end>
}});
return Device.getDeviceId(mContext);
} catch (IOException e) {
return null;
}
}","        @Override
public String getDeviceId() {
try {
EmailAsyncTask.runAsyncSerial(new Runnable() {
@Override
public void run() {
//comment
EmailServiceUtils.startRemoteServices(mContext);
//comment
<start>DebugUtils.updateLoggingFlags(mContext);<end>
}});
return Device.getDeviceId(mContext);
} catch (IOException e) {
return null;
}
}"
1081,"    @Override
public void changeCursor(int partitionIndex, Cursor cursor) {
if (partitionIndex >= getPartitionCount()) {
//comment
return;
}

Partition partition = getPartition(partitionIndex);
if (partition instanceof DirectoryPartition) {
((DirectoryPartition)partition).setStatus(DirectoryPartition.STATUS_LOADED);
}

if (mDisplayPhotos && mPhotoLoader != null && isPhotoSupported(partitionIndex)) {
mPhotoLoader.refreshCache();
}

super.changeCursor(partitionIndex, cursor);

if (isSectionHeaderDisplayEnabled() && partitionIndex == getIndexedPartition()) {
updateIndexer(cursor);
}

//comment
<start>mPhotoLoader.cancelPendingRequests(mFragmentRootView);<end>
}","    @Override
public void changeCursor(int partitionIndex, Cursor cursor) {
if (partitionIndex >= getPartitionCount()) {
//comment
return;
}

Partition partition = getPartition(partitionIndex);
if (partition instanceof DirectoryPartition) {
((DirectoryPartition)partition).setStatus(DirectoryPartition.STATUS_LOADED);
}

if (mDisplayPhotos && mPhotoLoader != null && isPhotoSupported(partitionIndex)) {
mPhotoLoader.refreshCache();
}

super.changeCursor(partitionIndex, cursor);

if (isSectionHeaderDisplayEnabled() && partitionIndex == getIndexedPartition()) {
updateIndexer(cursor);
}

//comment
<start>mPhotoLoader.cancelPendingRequests(mFragmentRootView);<end>
}"
1084,"    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
<start>if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}<end>

//comment
if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}","    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
<start>if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);<end>

//comment
//comment
//comment
<start>killApp = true;
}<end>

//comment
<start>if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}
}<end>
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}"
1087,"public final boolean isLongPressEnabled() {
//comment
return (mActionFlags & ACTION_FLAGS_ENABLE_LONG_PRESS) != 0
&& (mLabelFlags & LABEL_FLAGS_SHIFTED_LETTER_ACTIVATED) == 0;
}","public final boolean isLongPressEnabled() {
//comment
<start>return (mActionFlags & ACTION_FLAGS_ENABLE_LONG_PRESS) != 0
&& (mLabelFlags & LABEL_FLAGS_SHIFTED_LETTER_ACTIVATED) == 0;<end>
}"
1088,"@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
if (preference == mButtonDTMF) {
return true;
} else if (preference == mDialpadAutocomplete) {
Settings.Secure.putInt(getContentResolver(), Settings.Secure.DIALPAD_AUTOCOMPLETE,
mDialpadAutocomplete.isChecked() ? 1 : 0);
} else if (preference == mButtonTTY) {
return true;
} else if (preference == mButtonAutoRetry) {
android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
android.provider.Settings.Global.CALL_AUTO_RETRY,
mButtonAutoRetry.isChecked() ? 1 : 0);
return true;
} else if (preference == mButtonHAC) {
int hac = mButtonHAC.isChecked() ? 1 : 0;
//comment
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.HEARING_AID, hac);

//comment
<start>mAudioManager.setParameter(HAC_KEY, hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);<end>
return true;
<start>} else if (preference == mButtonXDivert) {<end>
processXDivert();
<start>return true;<end>
}
return false;
}","@Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {
if (preference == mButtonDTMF) {
return true;
} else if (preference == mDialpadAutocomplete) {
Settings.Secure.putInt(getContentResolver(), Settings.Secure.DIALPAD_AUTOCOMPLETE,
mDialpadAutocomplete.isChecked() ? 1 : 0);
} else if (preference == mButtonTTY) {
return true;
} else if (preference == mButtonAutoRetry) {
android.provider.Settings.Global.putInt(mPhone.getContext().getContentResolver(),
android.provider.Settings.Global.CALL_AUTO_RETRY,
mButtonAutoRetry.isChecked() ? 1 : 0);
return true;
} else if (preference == mButtonHAC) {
int hac = mButtonHAC.isChecked() ? 1 : 0;
//comment
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.HEARING_AID, hac);

//comment
<start>mAudioManager.setParameter(HAC_KEY, hac != 0 ? HAC_VAL_ON : HAC_VAL_OFF);<end>
return true;
} else if (preference == mButtonXDivert) {
processXDivert();
return true;
}
return false;
}"
1090,"public void changeDirectories(Cursor cursor) {
if (cursor.getCount() == 0) {
//comment
//comment
Log.e(TAG, ""Directory search loader returned an empty cursor, which implies we have "" +
""no directory entries."", new RuntimeException());
return;
}
HashSet<Long> directoryIds = new HashSet<Long>();

int idColumnIndex = cursor.getColumnIndex(Directory._ID);
int directoryTypeColumnIndex = cursor.getColumnIndex(DirectoryListLoader.DIRECTORY_TYPE);
int displayNameColumnIndex = cursor.getColumnIndex(Directory.DISPLAY_NAME);
int photoSupportColumnIndex = cursor.getColumnIndex(Directory.PHOTO_SUPPORT);

//comment
//comment
cursor.moveToPosition(-1);
while (cursor.moveToNext()) {
long id = cursor.getLong(idColumnIndex);
directoryIds.add(id);
if (getPartitionByDirectoryId(id) == -1) {
DirectoryPartition partition = new DirectoryPartition(false, true);
partition.setDirectoryId(id);
if (DirectoryCompat.isRemoteDirectoryId(id)) {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.directory_search_label_work));
} else {
partition.setLabel(mContext.getString(R.string.directory_search_label));
}
} else {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.list_filter_phones_work));
} else {
partition.setLabel(mDefaultFilterHeaderText.toString());
}
}
partition.setDirectoryType(cursor.getString(directoryTypeColumnIndex));
partition.setDisplayName(cursor.getString(displayNameColumnIndex));
int photoSupport = cursor.getInt(photoSupportColumnIndex);
partition.setPhotoSupported(photoSupport == Directory.PHOTO_SUPPORT_THUMBNAIL_ONLY
|| photoSupport == Directory.PHOTO_SUPPORT_FULL);
addPartition(partition);
}
}

//comment
int count = getPartitionCount();
for (int i = count; --i >= 0; ) {
Partition partition = getPartition(i);
if (partition instanceof DirectoryPartition) {
long id = ((DirectoryPartition)partition).getDirectoryId();
if (!directoryIds.contains(id)) {
removePartition(i);
}
}
}

invalidate();
notifyDataSetChanged();
}","public void changeDirectories(Cursor cursor) {
if (cursor.getCount() == 0) {
//comment
//comment
Log.e(TAG, ""Directory search loader returned an empty cursor, which implies we have "" +
""no directory entries."", new RuntimeException());
return;
}
HashSet<Long> directoryIds = new HashSet<Long>();

int idColumnIndex = cursor.getColumnIndex(Directory._ID);
int directoryTypeColumnIndex = cursor.getColumnIndex(DirectoryListLoader.DIRECTORY_TYPE);
int displayNameColumnIndex = cursor.getColumnIndex(Directory.DISPLAY_NAME);
int photoSupportColumnIndex = cursor.getColumnIndex(Directory.PHOTO_SUPPORT);

//comment
//comment
cursor.moveToPosition(-1);
while (cursor.moveToNext()) {
long id = cursor.getLong(idColumnIndex);
directoryIds.add(id);
if (getPartitionByDirectoryId(id) == -1) {
DirectoryPartition partition = new DirectoryPartition(false, true);
partition.setDirectoryId(id);
if (DirectoryCompat.isRemoteDirectoryId(id)) {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.directory_search_label_work));
} else {
partition.setLabel(mContext.getString(R.string.directory_search_label));
}
} else {
if (DirectoryCompat.isEnterpriseDirectoryId(id)) {
partition.setLabel(mContext.getString(R.string.list_filter_phones_work));
} else {
partition.setLabel(mDefaultFilterHeaderText.toString());
}
}
partition.setDirectoryType(cursor.getString(directoryTypeColumnIndex));
partition.setDisplayName(cursor.getString(displayNameColumnIndex));
int photoSupport = cursor.getInt(photoSupportColumnIndex);
partition.setPhotoSupported(photoSupport == Directory.PHOTO_SUPPORT_THUMBNAIL_ONLY
|| photoSupport == Directory.PHOTO_SUPPORT_FULL);
addPartition(partition);
}
}

//comment
<start>int count = getPartitionCount();
for (int i = count; --i >= 0; ) {
Partition partition = getPartition(i);
if (partition instanceof DirectoryPartition) {
long id = ((DirectoryPartition)partition).getDirectoryId();
if (!directoryIds.contains(id)) {
removePartition(i);
}
}
}<end>

invalidate();
notifyDataSetChanged();
}"
1091,"public static void hide(final View view, final int visibility) {
if (FADE_DBG) log(""Fade: HIDE view "" + view + ""..."");
if (view.getVisibility() == View.VISIBLE &&
<start>(visibility == View.INVISIBLE || visibility == View.GONE)) {<end>

//comment
//comment
<start>view.setTag(FADE_STATE_KEY, FADING_OUT);<end>

view.animate().cancel();
view.animate().setDuration(ANIMATION_DURATION);
view.animate().alpha(0f).setListener(new AnimatorListenerAdapter() {
@Override
public void onAnimationEnd(Animator animation) {
view.setAlpha(1);
view.setVisibility(visibility);
view.animate().setListener(null);
//comment
view.setTag(FADE_STATE_KEY, null);
if (FADE_DBG) log(""Fade: HIDE "" + view
+ "" DONE.  Set visibility = "" + visibility);
}
});
}
}","public static void hide(final View view, final int visibility) {
if (FADE_DBG) log(""Fade: HIDE view "" + view + ""..."");
if (view.getVisibility() == View.VISIBLE &&
(visibility == View.INVISIBLE || visibility == View.GONE)) {

//comment
//comment
<start>view.setTag(FADE_STATE_KEY, FADING_OUT);<end>

view.animate().cancel();
view.animate().setDuration(ANIMATION_DURATION);
view.animate().alpha(0f).setListener(new AnimatorListenerAdapter() {
@Override
public void onAnimationEnd(Animator animation) {
view.setAlpha(1);
view.setVisibility(visibility);
view.animate().setListener(null);
//comment
view.setTag(FADE_STATE_KEY, null);
if (FADE_DBG) log(""Fade: HIDE "" + view
+ "" DONE.  Set visibility = "" + visibility);
}
});
}
}"
1092,"private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
<start>output.add(addresses.getEnd(block));<end>

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}","private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
<start>output.add(addresses.getEnd(block));<end>

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}"
1095,"public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
<start>if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}<end>
} else {
//comment
//comment
//comment

//comment
//comment
<start>long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;<end>
newOriginQuota += quotaIncrease;

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}","public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
<start>long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;<end>

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}"
1096,"public boolean hasInstallToRuntimeSplit() {
PermissionManager permissionManager =
(PermissionManager) mContext.getSystemService(PermissionManager.class);

int numSplitPerms = permissionManager.getSplitPermissions().size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo spi =
permissionManager.getSplitPermissions().get(splitPermNum);
String splitPerm = spi.getSplitPermission();

PermissionInfo pi;
try {
pi = mPackageManager.getPermissionInfo(splitPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + splitPerm, e);
continue;
}

//comment
if (pi.getProtection() != pi.PROTECTION_NORMAL) {
continue;
}

List<String> newPerms = spi.getNewPermissions();
int numNewPerms = newPerms.size();
for (int newPermNum = 0; newPermNum < numNewPerms; newPermNum++) {
String newPerm = newPerms.get(newPermNum);

if (!hasPermission(newPerm)) {
continue;
}

try {
pi = mPackageManager.getPermissionInfo(newPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + newPerm, e);
continue;
}

//comment
<start>if (pi.getProtection() != pi.PROTECTION_DANGEROUS) {
continue;
}<end>

if (mPackageInfo.applicationInfo.targetSdkVersion < spi.getTargetSdk()) {
return true;
}
}
}
return false;
}","public boolean hasInstallToRuntimeSplit() {
PermissionManager permissionManager =
(PermissionManager) mContext.getSystemService(PermissionManager.class);

int numSplitPerms = permissionManager.getSplitPermissions().size();
for (int splitPermNum = 0; splitPermNum < numSplitPerms; splitPermNum++) {
PermissionManager.SplitPermissionInfo spi =
permissionManager.getSplitPermissions().get(splitPermNum);
String splitPerm = spi.getSplitPermission();

PermissionInfo pi;
try {
pi = mPackageManager.getPermissionInfo(splitPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + splitPerm, e);
continue;
}

//comment
if (pi.getProtection() != pi.PROTECTION_NORMAL) {
continue;
}

List<String> newPerms = spi.getNewPermissions();
int numNewPerms = newPerms.size();
for (int newPermNum = 0; newPermNum < numNewPerms; newPermNum++) {
String newPerm = newPerms.get(newPermNum);

if (!hasPermission(newPerm)) {
continue;
}

try {
pi = mPackageManager.getPermissionInfo(newPerm, 0);
} catch (NameNotFoundException e) {
Log.w(LOG_TAG, ""No such permission: "" + newPerm, e);
continue;
}

//comment
<start>if (pi.getProtection() != pi.PROTECTION_DANGEROUS) {
continue;
}<end>

if (mPackageInfo.applicationInfo.targetSdkVersion < spi.getTargetSdk()) {
return true;
}
}
}
return false;
}"
1097,"    @Override
public void onPause() {
super.onPause();
<start>CatLog.d(LOG_TAG, ""onPause, slot id: "" + mSlotId + "","" + mState);<end>
//comment
if (appService != null) {
<start>appService.indicateMenuVisibility(false, mSlotId);<end>
} else {
CatLog.d(LOG_TAG, ""onPause: null appService."");
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

}","    @Override
public void onPause() {
super.onPause();
CatLog.d(LOG_TAG, ""onPause, slot id: "" + mSlotId + "","" + mState);
//comment
<start>if (appService != null) {
appService.indicateMenuVisibility(false, mSlotId);
} else {
CatLog.d(LOG_TAG, ""onPause: null appService."");
}<end>

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

}"
1099,"    @Override
public void onCreate(Bundle icicle) {
if (LOGV_ENABLED) {
Log.v(LOGTAG, this + "" onStart, has state: ""
+ (icicle == null ? ""false"" : ""true""));
}
super.onCreate(icicle);

if (shouldIgnoreIntents()) {
finish();
return;
}

//comment
//comment
<start>if (IntentHandler.handleWebSearchIntent(this, null, getIntent())) {
finish();
return;
}<end>
mController = createController();

Intent intent = (icicle == null) ? getIntent() : null;
mController.start(intent);
}","    @Override
public void onCreate(Bundle icicle) {
if (LOGV_ENABLED) {
Log.v(LOGTAG, this + "" onStart, has state: ""
+ (icicle == null ? ""false"" : ""true""));
}
super.onCreate(icicle);

if (shouldIgnoreIntents()) {
finish();
return;
}

//comment
//comment
<start>if (IntentHandler.handleWebSearchIntent(this, null, getIntent())) {
finish();
return;
}<end>
mController = createController();

Intent intent = (icicle == null) ? getIntent() : null;
mController.start(intent);
}"
1100,"    public synchronized void sendFirstQueuedMessage() {
boolean success = true;
//comment
final Uri uri = Uri.parse(""content://sms/queued"");
ContentResolver resolver = getContentResolver();
Cursor c = SqliteWrapper.query(this, resolver, uri,
SEND_PROJECTION, null, null, ""date ASC"");
//comment
//comment
if (c != null) {
try {
if (c.moveToFirst()) {
String msgText = c.getString(SEND_COLUMN_BODY);
String address = c.getString(SEND_COLUMN_ADDRESS);
int threadId = c.getInt(SEND_COLUMN_THREAD_ID);
int status = c.getInt(SEND_COLUMN_STATUS);

int msgId = c.getInt(SEND_COLUMN_ID);
Uri msgUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);

SmsMessageSender sender = new SmsSingleRecipientSender(this,
address, msgText, threadId, status == Sms.STATUS_PENDING,
msgUri);

if (LogTag.DEBUG_SEND ||
LogTag.VERBOSE ||
Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""sendFirstQueuedMessage "" + msgUri +
"", address: "" + address +
"", threadId: "" + threadId);
}

try {
sender.sendMessage(SendingProgressTokenManager.NO_TOKEN);;
mSending = true;
} catch (MmsException e) {
Log.e(TAG, ""sendFirstQueuedMessage: failed to send message "" + msgUri
+ "", caught "", e);
mSending = false;
messageFailedToSend(msgUri, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
success = false;
//comment
//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_MESSAGE,
null,
this,
SmsReceiver.class));
}
}
} finally {
c.close();
}
}
if (success) {
//comment
//comment
unRegisterForServiceStateChanges();
}
}","    public synchronized void sendFirstQueuedMessage() {
boolean success = true;
//comment
final Uri uri = Uri.parse(""content://sms/queued"");
ContentResolver resolver = getContentResolver();
Cursor c = SqliteWrapper.query(this, resolver, uri,
SEND_PROJECTION, null, null, ""date ASC"");
//comment
//comment
if (c != null) {
try {
if (c.moveToFirst()) {
String msgText = c.getString(SEND_COLUMN_BODY);
String address = c.getString(SEND_COLUMN_ADDRESS);
int threadId = c.getInt(SEND_COLUMN_THREAD_ID);
int status = c.getInt(SEND_COLUMN_STATUS);

int msgId = c.getInt(SEND_COLUMN_ID);
Uri msgUri = ContentUris.withAppendedId(Sms.CONTENT_URI, msgId);

SmsMessageSender sender = new SmsSingleRecipientSender(this,
address, msgText, threadId, status == Sms.STATUS_PENDING,
msgUri);

if (LogTag.DEBUG_SEND ||
LogTag.VERBOSE ||
Log.isLoggable(LogTag.TRANSACTION, Log.VERBOSE)) {
Log.v(TAG, ""sendFirstQueuedMessage "" + msgUri +
"", address: "" + address +
"", threadId: "" + threadId);
}

try {
sender.sendMessage(SendingProgressTokenManager.NO_TOKEN);;
mSending = true;
} catch (MmsException e) {
Log.e(TAG, ""sendFirstQueuedMessage: failed to send message "" + msgUri
+ "", caught "", e);
mSending = false;
<start>messageFailedToSend(msgUri, SmsManager.RESULT_ERROR_GENERIC_FAILURE);
success = false;
//comment
//comment
sendBroadcast(new Intent(SmsReceiverService.ACTION_SEND_MESSAGE,
null,
this,
SmsReceiver.class));
}<end>
}
} finally {
c.close();
}
}
if (success) {
//comment
//comment
unRegisterForServiceStateChanges();
}
}"
1101,"    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
<start>if (mShowNav) {
detachTab(mActiveTab);
}<end>

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
Log.e(LOGTAG, ""active tab with no webview detected"");
return;
}
//comment
if (mUseQuickControls) {
mPieControl.forceToTop(mContentView);
view.setTitleBar(null);
mTitleBar.setShowProgressOnly(true);
} else {
view.setTitleBar(mTitleBar);
}
//comment
mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}","    @Override
public void setActiveTab(final Tab tab) {
mTitleBar.cancelTitleBarAnimation(true);
mTitleBar.setSkipTitleBarAnimations(true);
super.setActiveTab(tab);

//comment
<start>if (mShowNav) {
detachTab(mActiveTab);
}<end>

BrowserWebView view = (BrowserWebView) tab.getWebView();
//comment
//comment
if (view == null) {
Log.e(LOGTAG, ""active tab with no webview detected"");
return;
}
//comment
if (mUseQuickControls) {
mPieControl.forceToTop(mContentView);
view.setTitleBar(null);
mTitleBar.setShowProgressOnly(true);
} else {
view.setTitleBar(mTitleBar);
}
//comment
mNavigationBar.onStateChanged(StateListener.STATE_NORMAL);
updateLockIconToLatest(tab);
mTitleBar.setSkipTitleBarAnimations(false);
}"
1104,"private int runMultiDex() throws IOException {

assert !args.incremental;

if (args.mainDexListFile != null) {
classesInMainDex = new HashSet<String>();
readPathsFromFile(args.mainDexListFile, classesInMainDex);
}

dexOutPool = Executors.newFixedThreadPool(args.numThreads);

if (!processAllFiles()) {
return 1;
}

if (!libraryDexBuffers.isEmpty()) {
throw new DexException(""Library dex files are not supported in multi-dex mode"");
}

if (outputDex != null) {
//comment

dexOutputFutures.add(dexOutPool.submit(new DexWriter(outputDex)));

//comment
<start>outputDex = null;<end>
}
try {
dexOutPool.shutdown();
if (!dexOutPool.awaitTermination(600L, TimeUnit.SECONDS)) {
throw new RuntimeException(""Timed out waiting for dex writer threads."");
}

for (Future<byte[]> f : dexOutputFutures) {
dexOutputArrays.add(f.get());
}

} catch (InterruptedException ex) {
dexOutPool.shutdownNow();
throw new RuntimeException(""A dex writer thread has been interrupted."");
} catch (Exception e) {
dexOutPool.shutdownNow();
throw new RuntimeException(""Unexpected exception in dex writer thread"");
}

if (args.jarOutput) {
for (int i = 0; i < dexOutputArrays.size(); i++) {
outputResources.put(getDexFileName(i),
dexOutputArrays.get(i));
}

if (!createJar(args.outName)) {
return 3;
}
} else if (args.outName != null) {
File outDir = new File(args.outName);
assert outDir.isDirectory();
for (int i = 0; i < dexOutputArrays.size(); i++) {
OutputStream out = new FileOutputStream(new File(outDir, getDexFileName(i)));
try {
out.write(dexOutputArrays.get(i));
} finally {
closeOutput(out);
}
}
}

return 0;
}","private int runMultiDex() throws IOException {

assert !args.incremental;

if (args.mainDexListFile != null) {
classesInMainDex = new HashSet<String>();
readPathsFromFile(args.mainDexListFile, classesInMainDex);
}

dexOutPool = Executors.newFixedThreadPool(args.numThreads);

if (!processAllFiles()) {
return 1;
}

if (!libraryDexBuffers.isEmpty()) {
throw new DexException(""Library dex files are not supported in multi-dex mode"");
}

if (outputDex != null) {
//comment

dexOutputFutures.add(dexOutPool.submit(new DexWriter(outputDex)));

//comment
<start>outputDex = null;<end>
}
try {
dexOutPool.shutdown();
if (!dexOutPool.awaitTermination(600L, TimeUnit.SECONDS)) {
throw new RuntimeException(""Timed out waiting for dex writer threads."");
}

for (Future<byte[]> f : dexOutputFutures) {
dexOutputArrays.add(f.get());
}

} catch (InterruptedException ex) {
dexOutPool.shutdownNow();
throw new RuntimeException(""A dex writer thread has been interrupted."");
} catch (Exception e) {
dexOutPool.shutdownNow();
throw new RuntimeException(""Unexpected exception in dex writer thread"");
}

if (args.jarOutput) {
for (int i = 0; i < dexOutputArrays.size(); i++) {
outputResources.put(getDexFileName(i),
dexOutputArrays.get(i));
}

if (!createJar(args.outName)) {
return 3;
}
} else if (args.outName != null) {
File outDir = new File(args.outName);
assert outDir.isDirectory();
for (int i = 0; i < dexOutputArrays.size(); i++) {
OutputStream out = new FileOutputStream(new File(outDir, getDexFileName(i)));
try {
out.write(dexOutputArrays.get(i));
} finally {
closeOutput(out);
}
}
}

return 0;
}"
1105,"@Override
protected Dialog onCreateDialog(int id) {
switch (id) {
case EXIT_ECM_BLOCK_OTHERS:
case EXIT_ECM_DIALOG:
CharSequence text = getDialogText(mEcmTimeout);
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(text)
.setPositiveButton(R.string.alert_dialog_yes,
new DialogInterface.OnClickListener() {
<start>public void onClick(DialogInterface dialog,int whichButton) {
//comment
mPhone.exitEmergencyCallbackMode();<end>

//comment
showDialog(EXIT_ECM_PROGRESS_DIALOG);
mTimer.cancel();
}
})
.setNegativeButton(R.string.alert_dialog_no,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_IN_EMERGENCY_CALL_DIALOG:
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(R.string.alert_dialog_in_ecm_call)
.setNeutralButton(R.string.alert_dialog_dismiss,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_PROGRESS_DIALOG:
mProgressDialog = new ProgressDialog(EmergencyCallbackModeExitDialog.this);
mProgressDialog.setMessage(getText(R.string.progress_dialog_exiting_ecm));
mProgressDialog.setIndeterminate(true);
mProgressDialog.setCancelable(false);
return mProgressDialog;

default:
return null;
}
}","@Override
protected Dialog onCreateDialog(int id) {
switch (id) {
case EXIT_ECM_BLOCK_OTHERS:
case EXIT_ECM_DIALOG:
CharSequence text = getDialogText(mEcmTimeout);
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(text)
.setPositiveButton(R.string.alert_dialog_yes,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog,int whichButton) {
//comment
<start>mPhone.exitEmergencyCallbackMode();<end>

//comment
showDialog(EXIT_ECM_PROGRESS_DIALOG);
mTimer.cancel();
}
})
.setNegativeButton(R.string.alert_dialog_no,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_IN_EMERGENCY_CALL_DIALOG:
mAlertDialog = new AlertDialog.Builder(EmergencyCallbackModeExitDialog.this)
.setIcon(R.drawable.picture_emergency32x32)
.setTitle(R.string.phone_in_ecm_notification_title)
.setMessage(R.string.alert_dialog_in_ecm_call)
.setNeutralButton(R.string.alert_dialog_dismiss,
new DialogInterface.OnClickListener() {
public void onClick(DialogInterface dialog, int whichButton) {
//comment
setResult(RESULT_OK, (new Intent()).putExtra(
EXTRA_EXIT_ECM_RESULT, false));
finish();
}
}).create();
mAlertDialog.setOnDismissListener(this);
return mAlertDialog;

case EXIT_ECM_PROGRESS_DIALOG:
mProgressDialog = new ProgressDialog(EmergencyCallbackModeExitDialog.this);
mProgressDialog.setMessage(getText(R.string.progress_dialog_exiting_ecm));
mProgressDialog.setIndeterminate(true);
mProgressDialog.setCancelable(false);
return mProgressDialog;

default:
return null;
}
}"
1107,"public void setText(String name, String text) {
if (!mConformanceMode) {
if (null == mScrollText) {
mScrollText = new ScrollView(mContext);
mScrollText.setScrollBarStyle(SCROLLBARS_OUTSIDE_INSET);
addView(mScrollText, new LayoutParams(
LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0));
if (DEBUG) {
mScrollText.setBackgroundColor(0xFF00FF00);
}
}
if (null == mTextView) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mScrollText.addView(mTextView);
}
mScrollText.requestFocus();
}
mTextView.setVisibility(View.VISIBLE);
<start>mTextView.setText(text);<end>
//comment
mTextView.setTextIsSelectable(true);
}","public void setText(String name, String text) {
if (!mConformanceMode) {
if (null == mScrollText) {
mScrollText = new ScrollView(mContext);
mScrollText.setScrollBarStyle(SCROLLBARS_OUTSIDE_INSET);
addView(mScrollText, new LayoutParams(
LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0));
if (DEBUG) {
mScrollText.setBackgroundColor(0xFF00FF00);
}
}
if (null == mTextView) {
mTextView = new TextView(mContext);
mTextView.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
mScrollText.addView(mTextView);
}
mScrollText.requestFocus();
}
mTextView.setVisibility(View.VISIBLE);
mTextView.setText(text);
//comment
<start>mTextView.setTextIsSelectable(true);<end>
}"
1108,"    private void updateToggles(String function) {
if (UsbManager.USB_FUNCTION_MTP.equals(function)) {
mMtp.setChecked(true);
mPtp.setChecked(false);
mUms.setChecked(false);
} else if (UsbManager.USB_FUNCTION_PTP.equals(function)) {
mMtp.setChecked(false);
mUms.setChecked(false);
mPtp.setChecked(true);
} else if (UsbManager.USB_FUNCTION_MASS_STORAGE.equals(function)) {
mMtp.setChecked(false);
mPtp.setChecked(false);
mUms.setChecked(true);
} else  {
mMtp.setChecked(false);
mPtp.setChecked(false);
mUms.setChecked(false);
}
UserManager um = (UserManager) getActivity().getSystemService(Context.USER_SERVICE);
if (um.hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER)) {
Log.e(TAG, ""USB is locked down"");
mMtp.setEnabled(false);
mPtp.setEnabled(false);
} else if (!mUsbAccessoryMode) {
//comment
Log.e(TAG, ""USB Normal Mode"");
<start>mMtp.setEnabled(true);<end>
mPtp.setEnabled(true);
} else {
Log.e(TAG, ""USB Accessory Mode"");
mMtp.setEnabled(false);
mPtp.setEnabled(false);
}
}","    private void updateToggles(String function) {
if (UsbManager.USB_FUNCTION_MTP.equals(function)) {
mMtp.setChecked(true);
mPtp.setChecked(false);
mUms.setChecked(false);
} else if (UsbManager.USB_FUNCTION_PTP.equals(function)) {
mMtp.setChecked(false);
mUms.setChecked(false);
mPtp.setChecked(true);
} else if (UsbManager.USB_FUNCTION_MASS_STORAGE.equals(function)) {
mMtp.setChecked(false);
mPtp.setChecked(false);
mUms.setChecked(true);
} else  {
mMtp.setChecked(false);
mPtp.setChecked(false);
mUms.setChecked(false);
}
UserManager um = (UserManager) getActivity().getSystemService(Context.USER_SERVICE);
if (um.hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER)) {
Log.e(TAG, ""USB is locked down"");
mMtp.setEnabled(false);
mPtp.setEnabled(false);
<start>} else if (!mUsbAccessoryMode) {
//comment
Log.e(TAG, ""USB Normal Mode"");
mMtp.setEnabled(true);
mPtp.setEnabled(true);
} else {
Log.e(TAG, ""USB Accessory Mode"");
mMtp.setEnabled(false);
mPtp.setEnabled(false);
}<end>
}"
1109,"protected void onPostExecute(String result) {
//comment
if (mController.isActivityPaused()) return;
//comment
if (mController.getTabControl().getTabPosition(mTab) != -1) {
//comment
if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}
}
}","protected void onPostExecute(String result) {
//comment
<start>if (mController.isActivityPaused()) return;<end>
//comment
if (mController.getTabControl().getTabPosition(mTab) != -1) {
//comment
if (!startActivityForUrl(mTab, result)) {
if (!handleMenuClick(mTab, result)) {
mController.loadUrl(mTab, result);
}
}
}
}"
1112,"    @Override
public void onStart() {
super.onStart();

final ActionBar ab = getActivity().getActionBar();
if (ab != null) {
ab.setDisplayHomeAsUpEnabled(true);
}

//comment
if (getArguments().getString(Intent.EXTRA_PERMISSION_GROUP_NAME) == null) {
<start>getActivity().setTitle(R.string.all_permissions);<end>
} else {
getActivity().setTitle(R.string.app_permissions);
}

setHasOptionsMenu(true);
}","    @Override
public void onStart() {
super.onStart();

final ActionBar ab = getActivity().getActionBar();
if (ab != null) {
ab.setDisplayHomeAsUpEnabled(true);
}

//comment
<start>if (getArguments().getString(Intent.EXTRA_PERMISSION_GROUP_NAME) == null) {
getActivity().setTitle(R.string.all_permissions);
} else {<end>
getActivity().setTitle(R.string.app_permissions);
}

setHasOptionsMenu(true);
}"
1113,"    public final void displayCallerInfoForConferenceRow(CallerInfo ci, int presentation,
TextView nameTextView, TextView numberTypeTextView, TextView numberTextView) {
//comment
String callerName = """";
String callerNumber = """";
String callerNumberType = """";
if (ci != null) {
callerName = ci.name;
if (TextUtils.isEmpty(callerName)) {
//comment
//comment
if (TextUtils.isEmpty(ci.phoneNumber)) {
callerName = PhoneUtils.getPresentationString(mInCallScreen, presentation);
} else if (!TextUtils.isEmpty(ci.cnapName)) {
//comment
callerName = ci.cnapName;
} else {
callerName = ci.phoneNumber;
}
} else {
callerNumber = ci.phoneNumber;
callerNumberType = ci.phoneLabel;
}
}

//comment
<start>nameTextView.setText(callerName);<end>

//comment
if (TextUtils.isEmpty(callerNumber)) {
numberTextView.setVisibility(View.GONE);
numberTypeTextView.setVisibility(View.GONE);
} else {
numberTextView.setVisibility(View.VISIBLE);
numberTextView.setText(callerNumber);
numberTypeTextView.setVisibility(View.VISIBLE);
numberTypeTextView.setText(callerNumberType);
}
}","    public final void displayCallerInfoForConferenceRow(CallerInfo ci, int presentation,
TextView nameTextView, TextView numberTypeTextView, TextView numberTextView) {
//comment
String callerName = """";
String callerNumber = """";
String callerNumberType = """";
if (ci != null) {
callerName = ci.name;
if (TextUtils.isEmpty(callerName)) {
//comment
//comment
if (TextUtils.isEmpty(ci.phoneNumber)) {
callerName = PhoneUtils.getPresentationString(mInCallScreen, presentation);
} else if (!TextUtils.isEmpty(ci.cnapName)) {
//comment
callerName = ci.cnapName;
} else {
callerName = ci.phoneNumber;
}
} else {
callerNumber = ci.phoneNumber;
callerNumberType = ci.phoneLabel;
}
}

//comment
<start>nameTextView.setText(callerName);<end>

//comment
if (TextUtils.isEmpty(callerNumber)) {
numberTextView.setVisibility(View.GONE);
numberTypeTextView.setVisibility(View.GONE);
} else {
numberTextView.setVisibility(View.VISIBLE);
numberTextView.setText(callerNumber);
numberTypeTextView.setVisibility(View.VISIBLE);
numberTypeTextView.setText(callerNumberType);
}
}"
1116,"    @Override
public void onDisabled(Context context) {
//comment
<start>AlarmManager am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
PendingIntent pendingUpdate = getUpdateIntent(context);<end>
am.cancel(pendingUpdate);
}","    @Override
public void onDisabled(Context context) {
//comment
<start>AlarmManager am = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);
PendingIntent pendingUpdate = getUpdateIntent(context);
am.cancel(pendingUpdate);<end>
}"
1117,"<start>private void outputBlock(BasicBlock block, int nextLabel) {
//comment
CodeAddress startAddress = addresses.getStart(block);<end>
output.add(startAddress);

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}","private void outputBlock(BasicBlock block, int nextLabel) {
//comment
<start>CodeAddress startAddress = addresses.getStart(block);
output.add(startAddress);<end>

//comment
if (locals != null) {
RegisterSpecSet starts = locals.getStarts(block);
output.add(new LocalSnapshot(startAddress.getPosition(),
starts));
}

//comment
//comment
//comment
//comment
translationVisitor.setBlock(block, addresses.getLast(block));
block.getInsns().forEach(translationVisitor);

//comment
output.add(addresses.getEnd(block));

//comment

int succ = block.getPrimarySuccessor();
Insn lastInsn = block.getLastInsn();

//comment
//comment
//comment
//comment

if ((succ >= 0) && (succ != nextLabel)) {
//comment
//comment
//comment
//comment
Rop lastRop = lastInsn.getOpcode();
if ((lastRop.getBranchingness() == Rop.BRANCH_IF) &&
(block.getSecondarySuccessor() == nextLabel)) {
//comment
//comment
//comment
//comment
//comment
//comment
//comment
output.reverseBranch(1, addresses.getStart(succ));
} else {
//comment
//comment
//comment
//comment
TargetInsn insn =
new TargetInsn(Dops.GOTO, lastInsn.getPosition(),
RegisterSpecList.EMPTY,
addresses.getStart(succ));
output.add(insn);
}
}
}"
1120,"public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
<start>if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}<end>

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}","public boolean grantRuntimePermissions(boolean setByTheUser, boolean fixedByTheUser,
String[] filterPermissions) {
boolean killApp = false;
boolean wasAllGranted = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

if (!permission.isGrantingAllowed(mIsEphemeralApp, mAppSupportsRuntimePermissions)) {
//comment
continue;
}

boolean wasGranted = permission.isGrantedIncludingAppOp();

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isSystemFixed()) {
wasAllGranted = false;
break;
}

//comment
<start>if (permission.affectsAppOp() && !permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);
}<end>

//comment
if (!permission.isGranted()) {
permission.setGranted(true);
}

//comment
if (!fixedByTheUser) {
if (permission.isUserFixed()) {
permission.setUserFixed(false);
}
if (setByTheUser) {
if (!permission.isUserSet()) {
permission.setUserSet(true);
}
}
} else {
if (!permission.isUserFixed()) {
permission.setUserFixed(true);
}
if (permission.isUserSet()) {
permission.setUserSet(false);
}
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (!permission.isAppOpAllowed()) {
permission.setAppOpAllowed(true);

//comment
//comment
//comment
//comment
killApp = true;
}

//comment
if (permission.isRevokedCompat()) {
permission.setRevokedCompat(false);
}
}

//comment
//comment
if (permission.isReviewRequired()) {
permission.unsetReviewRequired();
}
}

//comment
//comment
if (!wasGranted && permission.isGrantedIncludingAppOp()) {
if (permission.getName().equals(ACCESS_FINE_LOCATION)) {
Permission bgPerm = permission.getBackgroundPermission();
if (bgPerm != null) {
if (bgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}
}
} else if (permission.getName().equals(ACCESS_BACKGROUND_LOCATION)) {
ArrayList<Permission> fgPerms = permission.getForegroundPermissions();
if (fgPerms != null) {
int numFgPerms = fgPerms.size();
for (int fgPermNum = 0; fgPermNum < numFgPerms; fgPermNum++) {
Permission fgPerm = fgPerms.get(fgPermNum);

if (fgPerm.getName().equals(ACCESS_FINE_LOCATION)) {
if (fgPerm.isGrantedIncludingAppOp()) {
mTriggerLocationAccessCheckOnPersist = true;
}

break;
}
}
}
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllGranted;
}"
1122,"private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
int id = (int) header.id;

//comment
if (target.get(i) == header) {
//comment
//comment
if (mFirstHeader == null &&
<start>HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
mFirstHeader = header;<end>
}
mHeaderIndexMap.put(id, i);
i++;
}
}
}","private void updateHeaderList(List<Header> target) {
int i = 0;
while (i < target.size()) {
Header header = target.get(i);
//comment
int id = (int) header.id;

//comment
if (target.get(i) == header) {
//comment
//comment
<start>if (mFirstHeader == null &&
HeaderAdapter.getHeaderType(header) != HeaderAdapter.HEADER_TYPE_CATEGORY) {
mFirstHeader = header;
}<end>
mHeaderIndexMap.put(id, i);
i++;
}
}
}"
1123,"    private void handleSendInactiveMessage() {
//comment
<start>moveOutboxMessagesToQueuedBox();
sendFirstQueuedMessage();<end>
}","    private void handleSendInactiveMessage() {
//comment
<start>moveOutboxMessagesToQueuedBox();
sendFirstQueuedMessage();<end>
}"
1125,"    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
<start>if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}<end>
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}","    public boolean revokeRuntimePermissions(boolean fixedByTheUser, String[] filterPermissions) {
boolean killApp = false;
boolean wasAllRevoked = true;

//comment
//comment
//comment
for (Permission permission : mPermissions.values()) {
if (filterPermissions != null
&& !ArrayUtils.contains(filterPermissions, permission.getName())) {
continue;
}

//comment
if (permission.isSystemFixed()) {
wasAllRevoked = false;
break;
}

if (mAppSupportsRuntimePermissions) {
//comment
if (permission.isGranted()) {
permission.setGranted(false);
}

//comment
if (fixedByTheUser) {
//comment
if (permission.isUserSet() || !permission.isUserFixed()) {
permission.setUserSet(false);
permission.setUserFixed(true);
}
} else {
if (!permission.isUserSet() || permission.isUserFixed()) {
permission.setUserSet(true);
permission.setUserFixed(false);
}
}

if (permission.affectsAppOp()) {
permission.setAppOpAllowed(false);
}
} else {
//comment
if (!permission.isGranted()) {
continue;
}

//comment
//comment
if (permission.affectsAppOp()) {
if (permission.isAppOpAllowed()) {
permission.setAppOpAllowed(false);

//comment
//comment
//comment
killApp = true;
}

//comment
<start>if (!permission.isRevokedCompat()) {
permission.setRevokedCompat(true);
}<end>
}
}
}

if (!mDelayChanges) {
persistChanges(false);

if (killApp) {
killApp(KILL_REASON_APP_OP_CHANGE);
}
}

return wasAllRevoked;
}"
1126,"    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
<start>if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;<end>

//comment
//comment
//comment
<start>final String lowerCaseText = text.toLowerCase(mLocale);
if (dict.isValidWord(lowerCaseText)) return true;
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;<end>

//comment
//comment
//comment
return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));
}","    private boolean isInDictForAnyCapitalization(final Dictionary dict, final String text,
final int capitalizeType) {
//comment
//comment
if (dict.isValidWord(text)) return true;
if (StringUtils.CAPITALIZE_NONE == capitalizeType) return false;

//comment
//comment
//comment
<start>final String lowerCaseText = text.toLowerCase(mLocale);
if (dict.isValidWord(lowerCaseText)) return true;
if (StringUtils.CAPITALIZE_FIRST == capitalizeType) return false;<end>

//comment
//comment
//comment
return dict.isValidWord(StringUtils.capitalizeFirstAndDowncaseRest(lowerCaseText, mLocale));
}"
1128,"    private void setLoading(boolean loading, boolean animate, boolean force) {
if (mIsLoading != loading || force) {
mIsLoading = loading;
<start>if (getView() == null) {
//comment
animate = false;
}
if (mPrefsView != null) {
setViewShown(mPrefsView, !loading, animate);
}<end>
if (mLoadingView != null) {
setViewShown(mLoadingView, loading, animate);
}
}
}","    private void setLoading(boolean loading, boolean animate, boolean force) {
if (mIsLoading != loading || force) {
mIsLoading = loading;
<start>if (getView() == null) {
//comment
animate = false;
}<end>
if (mPrefsView != null) {
setViewShown(mPrefsView, !loading, animate);
}
if (mLoadingView != null) {
setViewShown(mLoadingView, loading, animate);
}
}
}"
1129,"@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
<start>if (topChild != null) {
//comment
mHeader.setMinimumHeight(topChild.getMeasuredHeight());
}<end>
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
<start>int partitionStart = getPositionForPartition(mIndexedPartition);<end>
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}

//comment
int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;
listView.setFadingHeader(index, listPosition, isLastInSection);
}
}
}","@Override
public void configurePinnedHeaders(PinnedHeaderListView listView) {
super.configurePinnedHeaders(listView);

if (!isSectionHeaderDisplayEnabled()) {
return;
}

int index = getPinnedHeaderCount() - 1;
if (mIndexer == null || getCount() == 0) {
listView.setHeaderInvisible(index, false);
} else {
int listPosition = listView.getPositionAt(listView.getTotalTopPinnedHeaderHeight());
int position = listPosition - listView.getHeaderViewsCount();

int section = -1;
int partition = getPartitionForPosition(position);
if (partition == mIndexedPartition) {
int offset = getOffsetInPartition(position);
if (offset != -1) {
section = getSectionForPosition(offset);
}
}

if (section == -1) {
listView.setHeaderInvisible(index, false);
} else {
View topChild = getViewAtVisiblePosition(listView, listPosition);
if (topChild != null) {
//comment
mHeader.setMinimumHeight(topChild.getMeasuredHeight());
}
setPinnedSectionTitle(mHeader, (String)mIndexer.getSections()[section]);

//comment
<start>int partitionStart = getPositionForPartition(mIndexedPartition);
if (hasHeader(mIndexedPartition)) {
partitionStart++;
}<end>

//comment
int nextSectionPosition = partitionStart + getPositionForSection(section + 1);
boolean isLastInSection = position == nextSectionPosition - 1;
listView.setFadingHeader(index, listPosition, isLastInSection);
}
}
}"
1130,"    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
if (hasContentChanged() || !dictionaryFileExists) {
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();
} else {
//comment
//comment
<start>mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;<end>
}
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}","    private final void syncReloadDictionaryInternal() {
//comment
//comment
mSharedDictionaryController.lock();
try {
final long time = SystemClock.uptimeMillis();
final boolean dictionaryFileExists = dictionaryFileExists();
if (mSharedDictionaryController.isOutOfDate() || !dictionaryFileExists) {
//comment
//comment
<start>if (hasContentChanged() || !dictionaryFileExists) {<end>
//comment
//comment
//comment
mSharedDictionaryController.mLastUpdateTime = time;
generateBinaryDictionary();
loadBinaryDictionary();
<start>} else {
//comment
//comment
mSharedDictionaryController.mLastUpdateRequestTime =
mSharedDictionaryController.mLastUpdateTime;
}<end>
} else if (mBinaryDictionary == null || mLocalDictionaryController.mLastUpdateTime
< mSharedDictionaryController.mLastUpdateTime) {
//comment
//comment
loadBinaryDictionary();
}
mLocalDictionaryController.mLastUpdateTime = time;
} finally {
mSharedDictionaryController.unlock();
}
}"
1131,"        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
<start>mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);<end>

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}","        public void run() {
Looper.prepare();

boolean isImsEcbm = false;
//comment
bindService(new Intent(EmergencyCallbackModeExitDialog.this,
EmergencyCallbackModeService.class), mConnection, Context.BIND_AUTO_CREATE);

//comment
synchronized (EmergencyCallbackModeExitDialog.this) {
try {
if (mService == null) {
EmergencyCallbackModeExitDialog.this.wait();
}
} catch (InterruptedException e) {
Log.d(""ECM"", ""EmergencyCallbackModeExitDialog InterruptedException: ""
+ e.getMessage());
e.printStackTrace();
}
}

//comment
if (mService != null) {
mEcmTimeout = mService.getEmergencyCallbackModeTimeout();
mInEmergencyCall = mService.getEmergencyCallbackModeCallState();
isImsEcbm = mService.isEcbmOnIms();
}

if (isImsEcbm) {
mPhone = PhoneUtils.getImsPhone(PhoneGlobals.getInstance().mCM);
} else {
int subscription = getIntent().getIntExtra(SUBSCRIPTION_KEY,
PhoneGlobals.getInstance().getDefaultSubscription());
mPhone = PhoneGlobals.getInstance().getPhone(subscription);
}
//comment
<start>mPhone.registerForEcmTimerReset(mTimerResetHandler, ECM_TIMER_RESET, null);<end>

//comment
unbindService(mConnection);

//comment
mHandler.post(new Runnable() {
public void run() {
showEmergencyCallbackModeExitDialog();
}
});
}"
1133,"     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
if (app.cdmaPhoneCallState.getCurrentCallState()
<start>== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);<end>
} else {
//comment
//comment
<start>app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);<end>
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}","     static boolean answerCall(Call ringingCall, int answerCallType) {
log(""answerCall("" + ringingCall + "")..."" + ""calltype:"" + answerCallType);
final PhoneGlobals app = PhoneGlobals.getInstance();
final CallNotifier notifier = app.notifier;

//comment
//comment
notifier.silenceRinger();

final Phone phone = ringingCall.getPhone();
final boolean phoneIsCdma = (phone.getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA);
boolean answered = false;
IBluetoothHeadsetPhone btPhone = null;

//comment
turnOnNoiseSuppression(app.getApplicationContext(), true);

if (phoneIsCdma) {
//comment
if (ringingCall.getState() == Call.State.WAITING) {
notifier.stopSignalInfoTone();
}
}

if (ringingCall != null && ringingCall.isRinging()) {
if (DBG) log(""answerCall: call state = "" + ringingCall.getState());
try {
if (phoneIsCdma) {
<start>if (app.cdmaPhoneCallState.getCurrentCallState()
== CdmaPhoneCallState.PhoneCallState.IDLE) {
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.SINGLE_ACTIVE);
} else {<end>
//comment
//comment
app.cdmaPhoneCallState.setCurrentCallState(
CdmaPhoneCallState.PhoneCallState.CONF_CALL);
//comment
//comment
//comment
app.cdmaPhoneCallState.setAddCallMenuStateAfterCallWaiting(true);

//comment
//comment
//comment
btPhone = app.getBluetoothPhoneService();
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(true);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}

final boolean isRealIncomingCall = isRealIncomingCall(ringingCall.getState());

//comment
app.mCM.acceptCall(ringingCall, answerCallType);
answered = true;

//comment
setMute(false);

setAudioMode();

//comment
final boolean speakerActivated = activateSpeakerIfDocked(phone);

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
if (isRealIncomingCall && !speakerActivated && isSpeakerOn(app)
&& !app.isBluetoothHeadsetAudioOn()) {
//comment
Log.i(LOG_TAG, ""Forcing speaker off due to new incoming call..."");
turnOnSpeaker(app, false, true);
}
} catch (CallStateException ex) {
Log.w(LOG_TAG, ""answerCall: caught "" + ex, ex);

if (phoneIsCdma) {
//comment
app.cdmaPhoneCallState.setCurrentCallState(
app.cdmaPhoneCallState.getPreviousCallState());
if (btPhone != null) {
try {
btPhone.cdmaSetSecondCallState(false);
} catch (RemoteException e) {
Log.e(LOG_TAG, Log.getStackTraceString(new Throwable()));
}
}
}
}
}
return answered;
}"
1134,"    public synchronized static ResolveCache getInstance(Context context) {
if (sInstance == null) {
final Context applicationContext = context.getApplicationContext();
sInstance = new ResolveCache(applicationContext);

//comment
<start>final IntentFilter filter = new IntentFilter(Intent.ACTION_PACKAGE_ADDED);
filter.addAction(Intent.ACTION_PACKAGE_REPLACED);<end>
filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
filter.addDataScheme(""package"");
applicationContext.registerReceiver(sInstance.mPackageIntentReceiver, filter);
}
return sInstance;
}","    public synchronized static ResolveCache getInstance(Context context) {
if (sInstance == null) {
final Context applicationContext = context.getApplicationContext();
sInstance = new ResolveCache(applicationContext);

//comment
<start>final IntentFilter filter = new IntentFilter(Intent.ACTION_PACKAGE_ADDED);
filter.addAction(Intent.ACTION_PACKAGE_REPLACED);
filter.addAction(Intent.ACTION_PACKAGE_REMOVED);
filter.addAction(Intent.ACTION_PACKAGE_CHANGED);
filter.addDataScheme(""package"");
applicationContext.registerReceiver(sInstance.mPackageIntentReceiver, filter);<end>
}
return sInstance;
}"
1135,"private static boolean shouldFilterOut(final String text, final int script) {
if (TextUtils.isEmpty(text) || text.length() <= 1) return true;

//comment
//comment
//comment
<start>final int firstCodePoint = text.codePointAt(0);<end>
//comment
if (!isLetterCheckableByLanguage(firstCodePoint, script)
&& '\'' != firstCodePoint) return true;

//comment
final int length = text.length();
int letterCount = 0;
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
//comment
//comment
//comment
if (Constants.CODE_COMMERCIAL_AT == codePoint || Constants.CODE_SLASH == codePoint) {
return true;
}
if (isLetterCheckableByLanguage(codePoint, script)) ++letterCount;
}
//comment
//comment
return (letterCount * 4 < length * 3);
}","private static boolean shouldFilterOut(final String text, final int script) {
if (TextUtils.isEmpty(text) || text.length() <= 1) return true;

//comment
//comment
//comment
final int firstCodePoint = text.codePointAt(0);
//comment
<start>if (!isLetterCheckableByLanguage(firstCodePoint, script)
&& '\'' != firstCodePoint) return true;<end>

//comment
final int length = text.length();
int letterCount = 0;
for (int i = 0; i < length; i = text.offsetByCodePoints(i, 1)) {
final int codePoint = text.codePointAt(i);
//comment
//comment
//comment
if (Constants.CODE_COMMERCIAL_AT == codePoint || Constants.CODE_SLASH == codePoint) {
return true;
}
if (isLetterCheckableByLanguage(codePoint, script)) ++letterCount;
}
//comment
//comment
return (letterCount * 4 < length * 3);
}"
1136,"    @VisibleForTesting
boolean shouldWipePersistentDataBlock(PersistentDataBlockManager pdbManager) {
if (pdbManager == null) {
return false;
}
//comment
if (isDeviceStillBeingProvisioned()) {
return false;
}
//comment
//comment
if (isOemUnlockedAllowed()) {
return false;
}
<start>final DevicePolicyManager dpm = (DevicePolicyManager) getActivity()
.getSystemService(Context.DEVICE_POLICY_SERVICE);
//comment
//comment
if (!dpm.isFactoryResetProtectionPolicySupported()) {
return false;
}
//comment
//comment
//comment
FactoryResetProtectionPolicy frpPolicy = dpm.getFactoryResetProtectionPolicy(null);<end>
if (dpm.isOrganizationOwnedDeviceWithManagedProfile() && frpPolicy != null
&& frpPolicy.isNotEmpty()) {
return false;
}
return true;
}","    @VisibleForTesting
boolean shouldWipePersistentDataBlock(PersistentDataBlockManager pdbManager) {
if (pdbManager == null) {
return false;
}
//comment
if (isDeviceStillBeingProvisioned()) {
return false;
}
//comment
//comment
if (isOemUnlockedAllowed()) {
return false;
}
final DevicePolicyManager dpm = (DevicePolicyManager) getActivity()
.getSystemService(Context.DEVICE_POLICY_SERVICE);
//comment
//comment
<start>if (!dpm.isFactoryResetProtectionPolicySupported()) {
return false;
}<end>
//comment
//comment
//comment
FactoryResetProtectionPolicy frpPolicy = dpm.getFactoryResetProtectionPolicy(null);
if (dpm.isOrganizationOwnedDeviceWithManagedProfile() && frpPolicy != null
&& frpPolicy.isNotEmpty()) {
return false;
}
return true;
}"
1137,"    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
if (!(Intent.ACTION_CALL.equals(action)
<start>|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);<end>
throw new IllegalArgumentException(""Unexpected action: "" + action);
}

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}","    public void placeCall(Intent intent) {
log(""placeCall()...  intent = "" + intent);
if (VDBG) log(""                extras = "" + intent.getExtras());

final InCallUiState inCallUiState = mApp.inCallUiState;

//comment
//comment
//comment

if (intent == null) {
Log.wtf(TAG, ""placeCall: called with null intent"");
throw new IllegalArgumentException(""placeCall: called with null intent"");
}

String action = intent.getAction();
Uri uri = intent.getData();
if (uri == null) {
Log.wtf(TAG, ""placeCall: intent had no data"");
throw new IllegalArgumentException(""placeCall: intent had no data"");
}

String scheme = uri.getScheme();
String number = PhoneNumberUtils.getNumberFromIntent(intent, mApp);
if (VDBG) {
log(""- action: "" + action);
log(""- uri: "" + uri);
log(""- scheme: "" + scheme);
log(""- number: "" + number);
}

//comment
//comment
//comment
<start>if (!(Intent.ACTION_CALL.equals(action)
|| Intent.ACTION_CALL_EMERGENCY.equals(action)
|| Intent.ACTION_CALL_PRIVILEGED.equals(action))) {
Log.wtf(TAG, ""placeCall: unexpected intent action "" + action);
throw new IllegalArgumentException(""Unexpected action: "" + action);
}<end>

//comment
//comment
//comment
Phone phone = mApp.mCM.getDefaultPhone();
if (TelephonyCapabilities.supportsOtasp(phone)) {
checkForOtaspCall(intent);
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
mApp.setRestoreMuteOnInCallResume(false);

//comment
//comment
//comment
if (PhoneUtils.hasPhoneProviderExtras(intent)) {
inCallUiState.setProviderInfo(intent);
} else {
inCallUiState.clearProviderInfo();
}

CallStatusCode status = placeCallInternal(intent);

switch (status) {
//comment
case SUCCESS:
case EXITED_ECM:
if (DBG) log(""==> placeCall(): success from placeCallInternal(): "" + status);

if (status == CallStatusCode.EXITED_ECM) {
//comment
//comment
inCallUiState.setPendingCallStatusCode(CallStatusCode.EXITED_ECM);
} else {
//comment
//comment
//comment
inCallUiState.clearPendingCallStatusCode();
}

//comment
//comment
mApp.setBeginningCall(true);
break;

default:
//comment
log(""==> placeCall(): failure code from placeCallInternal(): "" + status);
//comment
//comment
//comment
//comment
handleOutgoingCallError(status);
break;
}

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment
//comment

mApp.displayCallScreen();

//comment
PhoneUtils.turnOnNoiseSuppression(mApp.getApplicationContext(), true);
}"
1139,"    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
<start>byte[] tranId = rc.getTransactionId();<end>
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);

//comment
String lineNumber = MessageUtils.getLocalNumber();
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));

//comment
if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}
}
}","    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
<start>byte[] tranId = rc.getTransactionId();
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);<end>

//comment
<start>String lineNumber = MessageUtils.getLocalNumber();
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));<end>

//comment
<start>if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}
}<end>
}"
1140,"protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

<start>if (!foundDisambig) {
//comment
return foundResolve;
}<end>

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}","protected ResolveInfo getBestResolve(Intent intent, List<ResolveInfo> matches) {
//comment
final ResolveInfo foundResolve = mPackageManager.resolveActivity(intent,
PackageManager.MATCH_DEFAULT_ONLY);
final boolean foundDisambig = (foundResolve.match &
IntentFilter.MATCH_CATEGORY_MASK) == 0;

<start>if (!foundDisambig) {
//comment
return foundResolve;
}<end>

//comment
ResolveInfo firstSystem = null;
for (ResolveInfo info : matches) {
final boolean isSystem = (info.activityInfo.applicationInfo.flags
& ApplicationInfo.FLAG_SYSTEM) != 0;
final boolean isPrefer = sPreferResolve
.contains(info.activityInfo.applicationInfo.packageName);

if (isPrefer) return info;
if (isSystem && firstSystem == null) firstSystem = info;
}

//comment
return firstSystem != null ? firstSystem : matches.get(0);
}"
1141,"public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
<start>newOriginQuota = estimatedSize;<end>
} else {
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}","public void onExceededDatabaseQuota(String url,
String databaseIdentifier, long currentQuota, long estimatedSize,
long totalUsedQuota, WebStorage.QuotaUpdater quotaUpdater) {
if(LOGV_ENABLED) {
Log.v(LOGTAG,
""Received onExceededDatabaseQuota for ""
+ url
+ "":""
+ databaseIdentifier
+ ""(current quota: ""
+ currentQuota
+ "", total used quota: ""
+ totalUsedQuota
+ "")"");
}
long totalUnusedQuota = mGlobalLimit - totalUsedQuota - mAppCacheMaxSize;

if (totalUnusedQuota <= 0) {
//comment
//comment
if (totalUsedQuota > 0) {
//comment
//comment
//comment
//comment
//comment
//comment
scheduleOutOfSpaceNotification();
}
quotaUpdater.updateQuota(currentQuota);
if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota: out of space."");
}
return;
}

//comment
long newOriginQuota = currentQuota;
<start>if (newOriginQuota == 0) {
//comment
//comment
//comment
//comment
if (totalUnusedQuota >= estimatedSize) {
newOriginQuota = estimatedSize;
} else {<end>
if (LOGV_ENABLED) {
Log.v(LOGTAG,
""onExceededDatabaseQuota: Unable to satisfy"" +
"" estimatedSize for the new database "" +
"" (estimatedSize: "" + estimatedSize +
"", unused quota: "" + totalUnusedQuota);
}
newOriginQuota = 0;
}
} else {
//comment
//comment
//comment

//comment
//comment
long quotaIncrease = estimatedSize == 0 ?
Math.min(QUOTA_INCREASE_STEP, totalUnusedQuota) :
estimatedSize;
newOriginQuota += quotaIncrease;

if (quotaIncrease > totalUnusedQuota) {
//comment
newOriginQuota = currentQuota;
}
}

quotaUpdater.updateQuota(newOriginQuota);

if(LOGV_ENABLED) {
Log.v(LOGTAG, ""onExceededDatabaseQuota set new quota to ""
+ newOriginQuota);
}
}"
1142,"    @Override
protected void deleteSelected() {
//comment
if (!mAddContact) {
Intent intent = new Intent();
intent.setClass(this, MSimDeleteFdnContactScreen.class);
intent.putExtra(INTENT_EXTRA_NAME, mName);
intent.putExtra(INTENT_EXTRA_NUMBER, mNumber);
intent.putExtra(SUBSCRIPTION_KEY, mSubscription);
startActivity(intent);
}
finish();
}","    @Override
protected void deleteSelected() {
//comment
<start>if (!mAddContact) {
Intent intent = new Intent();
intent.setClass(this, MSimDeleteFdnContactScreen.class);
intent.putExtra(INTENT_EXTRA_NAME, mName);
intent.putExtra(INTENT_EXTRA_NUMBER, mNumber);
intent.putExtra(SUBSCRIPTION_KEY, mSubscription);
startActivity(intent);
}
finish();<end>
}"
1143,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
<start>return false;<end>
}
//comment
if (dialog && mSubView != null) {
<start>new AlertDialog.Builder(mContext)<end>
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
<start>if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;<end>
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}"
1144,"    private void refreshEntry(Context context, CacheEntry entry) throws
IOException, MessagingException {
LogUtils.d(Logging.LOG_TAG, ""AuthenticationCache refreshEntry %d"", entry.mAccountId);
try {
final AuthenticationResult result = mAuthenticator.requestRefresh(context,
entry.mProviderId, entry.mRefreshToken);
//comment
//comment
entry.mAccessToken = result.mAccessToken;
entry.mExpirationTime = result.mExpiresInSeconds * DateUtils.SECOND_IN_MILLIS +
System.currentTimeMillis();
saveEntry(context, entry);
<start>} catch (AuthenticationFailedException e) {<end>
//comment
LogUtils.d(Logging.LOG_TAG, ""authentication failed, clearning"");
clearEntry(context, entry);
<start>throw e;
} catch (MessagingException e) {
LogUtils.d(Logging.LOG_TAG, ""messaging exception"");
throw e;
} catch (IOException e) {<end>
LogUtils.d(Logging.LOG_TAG, ""IO exception"");
throw e;
}
}","    private void refreshEntry(Context context, CacheEntry entry) throws
IOException, MessagingException {
LogUtils.d(Logging.LOG_TAG, ""AuthenticationCache refreshEntry %d"", entry.mAccountId);
try {
final AuthenticationResult result = mAuthenticator.requestRefresh(context,
entry.mProviderId, entry.mRefreshToken);
//comment
//comment
entry.mAccessToken = result.mAccessToken;
entry.mExpirationTime = result.mExpiresInSeconds * DateUtils.SECOND_IN_MILLIS +
System.currentTimeMillis();
saveEntry(context, entry);
<start>} catch (AuthenticationFailedException e) {<end>
//comment
LogUtils.d(Logging.LOG_TAG, ""authentication failed, clearning"");
<start>clearEntry(context, entry);
throw e;
} catch (MessagingException e) {<end>
LogUtils.d(Logging.LOG_TAG, ""messaging exception"");
throw e;
} catch (IOException e) {
LogUtils.d(Logging.LOG_TAG, ""IO exception"");
throw e;
}
}"
1150,"    @Override
public synchronized void startMonitoring() {
//comment
<start>mConnected = true;<end>
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
updateAndReportActiveLocked();
}","    @Override
public synchronized void startMonitoring() {
//comment
<start>mConnected = true;
mMonitoring = true;<end>

//comment
//comment
IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
updateAndReportActiveLocked();
}"
1151,"    @Override
public void onHolderSelectedAsUser(@NonNull Role role, @NonNull String packageName,
@NonNull UserHandle user, @NonNull Context context) {
//comment
//comment
<start>Intent intent = new Intent(Intent.ACTION_MAIN)
.addCategory(Intent.CATEGORY_HOME)
.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<end>
context.startActivity(intent);
}","    @Override
public void onHolderSelectedAsUser(@NonNull Role role, @NonNull String packageName,
@NonNull UserHandle user, @NonNull Context context) {
//comment
//comment
<start>Intent intent = new Intent(Intent.ACTION_MAIN)
.addCategory(Intent.CATEGORY_HOME)
.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
context.startActivity(intent);<end>
}"
1152,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
<start>final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};<end>

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
if (!mInForeground) {
return false;
}
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
<start>final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};<end>

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}"
1155,"    @NonNull
public static Set<String> getEnabledListenerPackages(@NonNull Context context) {
final String enabledNotificationListeners = Settings.Secure.getString(
context.getContentResolver(),
SETTING_ENABLED_NOTIFICATION_LISTENERS);
<start>synchronized (sEnabledNotificationListenersLock) {<end>
//comment
if (enabledNotificationListeners != null
&& !enabledNotificationListeners.equals(sEnabledNotificationListeners)) {
final String[] components = enabledNotificationListeners.split("":"");
Set<String> packageNames = new HashSet<String>(components.length);
for (String component : components) {
ComponentName componentName = ComponentName.unflattenFromString(component);
if (componentName != null) {
packageNames.add(componentName.getPackageName());
}
}
sEnabledNotificationListenerPackages = packageNames;
sEnabledNotificationListeners = enabledNotificationListeners;
}
return sEnabledNotificationListenerPackages;
}
}","    @NonNull
public static Set<String> getEnabledListenerPackages(@NonNull Context context) {
final String enabledNotificationListeners = Settings.Secure.getString(
context.getContentResolver(),
SETTING_ENABLED_NOTIFICATION_LISTENERS);
synchronized (sEnabledNotificationListenersLock) {
//comment
<start>if (enabledNotificationListeners != null
&& !enabledNotificationListeners.equals(sEnabledNotificationListeners)) {
final String[] components = enabledNotificationListeners.split("":"");
Set<String> packageNames = new HashSet<String>(components.length);
for (String component : components) {
ComponentName componentName = ComponentName.unflattenFromString(component);
if (componentName != null) {
packageNames.add(componentName.getPackageName());
}
}
sEnabledNotificationListenerPackages = packageNames;
sEnabledNotificationListeners = enabledNotificationListeners;
}<end>
return sEnabledNotificationListenerPackages;
}
}"
1156,"        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
<start>final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
synchronized (mWriteScheduleLock) {
mWriteScheduled = false;<end>
if (mWriteInProgress) {
//comment
maybeWriteStatusToDiskAsync();
return;
}
mWriteInProgress = true;
}
<start>synchronized (mLock) {<end>
//comment
mJobSet.forEachJob(null, (job) -> {
if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}
});
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
<start>- startElapsed) + ""ms"");<end>
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}
}","        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
<start>synchronized (mWriteScheduleLock) {
mWriteScheduled = false;
if (mWriteInProgress) {
//comment
maybeWriteStatusToDiskAsync();
return;
}
mWriteInProgress = true;
}
synchronized (mLock) {
//comment
mJobSet.forEachJob(null, (job) -> {
if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}
});
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
- startElapsed) + ""ms"");
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}<end>
}"
1157,"@Override
public void serviceProcessingStarted() {
<start>synchronized (this) {<end>
//comment
if (!mServiceProcessing) {
<start>mServiceProcessing = true;
//comment
//comment
mRunWakeLock.acquire(10 * 60 * 1000L);<end>
mLaunchWakeLock.release();
}
}
}","@Override
public void serviceProcessingStarted() {
<start>synchronized (this) {
//comment
if (!mServiceProcessing) {<end>
mServiceProcessing = true;
//comment
//comment
mRunWakeLock.acquire(10 * 60 * 1000L);
mLaunchWakeLock.release();
}
}
}"
1158,"    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
IntentFilter filter = new IntentFilter();
<start>filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);<end>
mContext.registerReceiver(mReceiver, filter);

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
updateAndReportActiveLocked();
}","    @Override
public synchronized void startMonitoring() {
//comment
mConnected = true;
mMonitoring = true;

//comment
//comment
<start>IntentFilter filter = new IntentFilter();
filter.addAction(BluetoothDevice.ACTION_ACL_DISCONNECTED);
filter.addAction(BluetoothDevice.ACTION_ACL_CONNECTED);
filter.addAction(BluetoothAdapter.ACTION_STATE_CHANGED);
mContext.registerReceiver(mReceiver, filter);<end>

//comment
mHandler.sendMessageDelayed(
Message.obtain(mHandler, mTimeoutCallback), INACTIVITY_TIMEOUT_MS);

//comment
updateAndReportActiveLocked();
}"
1159,"    @Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {

//comment
//comment
if (Utils.isMonkeyRunning()) {
return true;
}
//comment
//comment
UserManager um = (UserManager) getActivity().getSystemService(Context.USER_SERVICE);
if (um.hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER)) {
<start>return true;<end>
}

String function = ""none"";
if (preference == mMtp && mMtp.isChecked()) {
function = UsbManager.USB_FUNCTION_MTP;
} else if (preference == mPtp && mPtp.isChecked()) {
function = UsbManager.USB_FUNCTION_PTP;
}

mUsbManager.setCurrentFunction(function, true);
updateToggles(function);

return true;
}","    @Override
public boolean onPreferenceTreeClick(PreferenceScreen preferenceScreen, Preference preference) {

//comment
//comment
if (Utils.isMonkeyRunning()) {
return true;
}
//comment
//comment
<start>UserManager um = (UserManager) getActivity().getSystemService(Context.USER_SERVICE);
if (um.hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER)) {
return true;
}<end>

String function = ""none"";
if (preference == mMtp && mMtp.isChecked()) {
function = UsbManager.USB_FUNCTION_MTP;
} else if (preference == mPtp && mPtp.isChecked()) {
function = UsbManager.USB_FUNCTION_PTP;
}

mUsbManager.setCurrentFunction(function, true);
updateToggles(function);

return true;
}"
1160,"@Override
public void onReceive(Context context, Intent intent) {
String action = intent.getAction();
Log.v(LOG_TAG,""Action intent recieved:""+action);
//comment
<start>int subscription = intent.getIntExtra(SUBSCRIPTION_KEY, mApp.getDefaultSubscription());<end>
if (action.equals(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED)) {
Phone phone = mApp.getPhone(subscription);
phone.unregisterForSimRecordsLoaded(mHandler);
phone.registerForSimRecordsLoaded(mHandler, SIM_RECORDS_LOADED, subscription);
}
}","@Override
public void onReceive(Context context, Intent intent) {
String action = intent.getAction();
Log.v(LOG_TAG,""Action intent recieved:""+action);
//comment
<start>int subscription = intent.getIntExtra(SUBSCRIPTION_KEY, mApp.getDefaultSubscription());<end>
if (action.equals(TelephonyIntents.ACTION_RADIO_TECHNOLOGY_CHANGED)) {
Phone phone = mApp.getPhone(subscription);
phone.unregisterForSimRecordsLoaded(mHandler);
phone.registerForSimRecordsLoaded(mHandler, SIM_RECORDS_LOADED, subscription);
}
}"
1161,"public boolean lookup(LookupRequest req) throws IOException {
//comment
if (lookupInternal(req.key, mActiveHashStart)) {
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
if (lookupInternal(req.key, mInactiveHashStart)) {
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
<start>|| mActiveEntries * 2 >= mMaxEntries) {<end>
return true;
}
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}","public boolean lookup(LookupRequest req) throws IOException {
//comment
if (lookupInternal(req.key, mActiveHashStart)) {
if (getBlob(mActiveDataFile, mFileOffset, req)) {
return true;
}
}

//comment
//comment
//comment
int insertOffset = mSlotOffset;

//comment
<start>if (lookupInternal(req.key, mInactiveHashStart)) {<end>
if (getBlob(mInactiveDataFile, mFileOffset, req)) {
//comment
//comment
if (mActiveBytes + BLOB_HEADER_SIZE + req.length > mMaxBytes
|| mActiveEntries * 2 >= mMaxEntries) {
return true;
}
//comment
mSlotOffset = insertOffset;
try {
insertInternal(req.key, req.buffer, req.length);
mActiveEntries++;
writeInt(mIndexHeader, IH_ACTIVE_ENTRIES, mActiveEntries);
updateIndexHeader();
} catch (Throwable t) {
Log.e(TAG, ""cannot copy over"");
}
return true;
}
}

return false;
}"
1162,"private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
<start>clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);<end>
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
<start>Intent msgIntent = new Intent(Intent.ACTION_VIEW);<end>
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);
}","private static void updateWidget(Context context, int appWidgetId) {
if (Log.isLoggable(LogTag.WIDGET, Log.VERBOSE)) {
Log.v(TAG, ""updateWidget appWidgetId: "" + appWidgetId);
}
RemoteViews remoteViews = new RemoteViews(context.getPackageName(), R.layout.widget);
PendingIntent clickIntent;

//comment
final Intent intent = new Intent(context, MmsWidgetService.class);
intent.putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId);
intent.setData(Uri.parse(intent.toUri(Intent.URI_INTENT_SCHEME)));
remoteViews.setRemoteAdapter(appWidgetId, R.id.conversation_list, intent);

remoteViews.setTextViewText(R.id.widget_label, context.getString(R.string.app_label));

//comment
final Intent convIntent = new Intent(context, ConversationList.class);
clickIntent = PendingIntent.getActivity(
context, 0, convIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_header, clickIntent);

//comment
final Intent composeIntent = new Intent(context, ComposeMessageActivity.class);
composeIntent.setAction(Intent.ACTION_SENDTO);
clickIntent = PendingIntent.getActivity(
context, 0, composeIntent, PendingIntent.FLAG_UPDATE_CURRENT);
remoteViews.setOnClickPendingIntent(R.id.widget_compose, clickIntent);

//comment
<start>TaskStackBuilder taskStackBuilder = TaskStackBuilder.create(context);
taskStackBuilder.addParentStack(ComposeMessageActivity.class);
Intent msgIntent = new Intent(Intent.ACTION_VIEW);
msgIntent.setType(""vnd.android-dir/mms-sms"");
taskStackBuilder.addNextIntent(msgIntent);
remoteViews.setPendingIntentTemplate(R.id.conversation_list,
taskStackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT));

AppWidgetManager.getInstance(context).updateAppWidget(appWidgetId, remoteViews);<end>
}"
1164,"<start>    public void playPauseClicked(View v) {<end>
//comment
if (mPlayer == null) {
return;
}
if (mPlayer.isPlaying()) {
mPlayer.pause();
} else {
start();
}
updatePlayPause();
}","    public void playPauseClicked(View v) {
//comment
<start>if (mPlayer == null) {
return;
}
if (mPlayer.isPlaying()) {
mPlayer.pause();
} else {
start();
}
updatePlayPause();<end>
}"
1165,"@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");
}
//comment
if (mPreviousVMProviderKey.equals(newProviderKey)) {
if (DBG) log(""No change is made toward VM provider setting."");
return true;
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

if (newProviderSettings == null) {
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
<start>mVMProviderSettingsForced = true;<end>
simulatePreferenceClick(mVoicemailSettings);
} else {
if (DBG) log(""Saved preferences found - switching to them"");
//comment
mChangingVMorFwdDueToProviderChange = true;
saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);
}
} else if (preference == mVoicemailNotificationVibrateWhen) {
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}","@Override
public boolean onPreferenceChange(Preference preference, Object objValue) {
if (DBG) {
log(""onPreferenceChange(). preferenece: \"""" + preference + ""\""""
+ "", value: \"""" + objValue + ""\"""");
}
if (preference == mVibrateWhenRinging) {
boolean doVibrate = (Boolean) objValue;
Settings.System.putInt(mPhone.getContext().getContentResolver(),
Settings.System.VIBRATE_WHEN_RINGING, doVibrate ? 1 : 0);
} else if (preference == mVoicemailProviders) {
final String newProviderKey = (String) objValue;
if (DBG) {
log(""Voicemail Provider changes from \"""" + mPreviousVMProviderKey
+ ""\"" to \"""" + newProviderKey + ""\""."");
}
//comment
if (mPreviousVMProviderKey.equals(newProviderKey)) {
if (DBG) log(""No change is made toward VM provider setting."");
return true;
}
updateVMPreferenceWidgets(newProviderKey);

final VoiceMailProviderSettings newProviderSettings =
loadSettingsForVoiceMailProvider(newProviderKey);

//comment
//comment
//comment
//comment
//comment

<start>if (newProviderSettings == null) {<end>
//comment
Log.w(LOG_TAG, ""Saved preferences not found - invoking config"");
<start>mVMProviderSettingsForced = true;
simulatePreferenceClick(mVoicemailSettings);
} else {<end>
if (DBG) log(""Saved preferences found - switching to them"");
//comment
mChangingVMorFwdDueToProviderChange = true;
saveVoiceMailAndForwardingNumber(newProviderKey, newProviderSettings);
}
} else if (preference == mVoicemailNotificationVibrateWhen) {
mVoicemailNotificationVibrateWhen.setValue((String) objValue);
mVoicemailNotificationVibrateWhen.setSummary(
mVoicemailNotificationVibrateWhen.getEntry());
}
//comment
return true;
}"
1166,"private void startTimeOut() {
//comment
<start>if (mIsResponseSent) {
return;
}<end>

if (mAlarmTime == NO_INPUT_ALARM) {
int duration = StkApp.calculateDurationInMilis(mStkInput.duration);
if (duration <= 0) {
duration = StkApp.UI_TIMEOUT;
}
mAlarmTime = SystemClock.elapsedRealtime() + duration;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, INPUT_ALARM_TAG,
mAlarmListener, null);
}","private void startTimeOut() {
//comment
<start>if (mIsResponseSent) {
return;
}<end>

if (mAlarmTime == NO_INPUT_ALARM) {
int duration = StkApp.calculateDurationInMilis(mStkInput.duration);
if (duration <= 0) {
duration = StkApp.UI_TIMEOUT;
}
mAlarmTime = SystemClock.elapsedRealtime() + duration;
}

CatLog.d(LOG_TAG, ""startTimeOut: "" + mAlarmTime + ""ms, slot id: "" + mSlotId);
AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
am.setExact(AlarmManager.ELAPSED_REALTIME_WAKEUP, mAlarmTime, INPUT_ALARM_TAG,
mAlarmListener, null);
}"
1167,"@RestrictTo(LIBRARY_GROUP)
@SuppressWarnings(""deprecation"")
public void addToShortcutIntent(@NonNull Intent outIntent, @Nullable Drawable badge,
@NonNull Context c) {
Bitmap icon;
switch (mType) {
case TYPE_BITMAP:
icon = (Bitmap) mObj1;
if (badge != null) {
//comment
icon = icon.copy(icon.getConfig(), true);
}
break;
case TYPE_ADAPTIVE_BITMAP:
icon = createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, true);
break;
case TYPE_RESOURCE:
try {
Context context = c.createPackageContext((String) mObj1, 0);
if (badge == null) {
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
Intent.ShortcutIconResource.fromContext(context, mInt1));
return;
} else {
Drawable dr = ContextCompat.getDrawable(context, mInt1);
if (dr.getIntrinsicWidth() <= 0 || dr.getIntrinsicHeight() <= 0) {
int size = ((ActivityManager) context.getSystemService(
Context.ACTIVITY_SERVICE)).getLauncherLargeIconSize();
icon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
} else {
icon = Bitmap.createBitmap(dr.getIntrinsicWidth(),
dr.getIntrinsicHeight(),
Bitmap.Config.ARGB_8888);
}
dr.setBounds(0, 0, icon.getWidth(), icon.getHeight());
dr.draw(new Canvas(icon));
}
} catch (PackageManager.NameNotFoundException e) {
throw new IllegalArgumentException(""Can't find package "" + mObj1, e);
}
break;
default:
throw new IllegalArgumentException(""Icon type not supported for intent shortcuts"");
}
if (badge != null) {
//comment
<start>int w = icon.getWidth();<end>
int h = icon.getHeight();
<start>badge.setBounds(w / 2, h / 2, w, h);<end>
badge.draw(new Canvas(icon));
}
<start>outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, icon);<end>
}","@RestrictTo(LIBRARY_GROUP)
@SuppressWarnings(""deprecation"")
public void addToShortcutIntent(@NonNull Intent outIntent, @Nullable Drawable badge,
@NonNull Context c) {
Bitmap icon;
switch (mType) {
case TYPE_BITMAP:
icon = (Bitmap) mObj1;
if (badge != null) {
//comment
icon = icon.copy(icon.getConfig(), true);
}
break;
case TYPE_ADAPTIVE_BITMAP:
icon = createLegacyIconFromAdaptiveIcon((Bitmap) mObj1, true);
break;
case TYPE_RESOURCE:
try {
Context context = c.createPackageContext((String) mObj1, 0);
if (badge == null) {
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON_RESOURCE,
Intent.ShortcutIconResource.fromContext(context, mInt1));
return;
} else {
Drawable dr = ContextCompat.getDrawable(context, mInt1);
if (dr.getIntrinsicWidth() <= 0 || dr.getIntrinsicHeight() <= 0) {
int size = ((ActivityManager) context.getSystemService(
Context.ACTIVITY_SERVICE)).getLauncherLargeIconSize();
icon = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);
} else {
icon = Bitmap.createBitmap(dr.getIntrinsicWidth(),
dr.getIntrinsicHeight(),
Bitmap.Config.ARGB_8888);
}
dr.setBounds(0, 0, icon.getWidth(), icon.getHeight());
dr.draw(new Canvas(icon));
}
} catch (PackageManager.NameNotFoundException e) {
throw new IllegalArgumentException(""Can't find package "" + mObj1, e);
}
break;
default:
throw new IllegalArgumentException(""Icon type not supported for intent shortcuts"");
}
if (badge != null) {
//comment
<start>int w = icon.getWidth();
int h = icon.getHeight();
badge.setBounds(w / 2, h / 2, w, h);
badge.draw(new Canvas(icon));<end>
}
outIntent.putExtra(Intent.EXTRA_SHORTCUT_ICON, icon);
}"
1171,"<start>private String getLogNumber(Connection conn, CallerInfo callerInfo) {<end>
String number = null;

if (conn.isIncoming()) {
number = conn.getAddress();
} else {
//comment
//comment
//comment
//comment
//comment
if (null == callerInfo || TextUtils.isEmpty(callerInfo.phoneNumber) ||
<start>callerInfo.isEmergencyNumber() || callerInfo.isVoiceMailNumber()) {
if (conn.getCall().getPhone().getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
number = conn.getOrigDialString();
} else {
number = conn.getAddress();
}<end>
} else {
number = callerInfo.phoneNumber;
}
}

if (null == number) {
return null;
} else {
int presentation = conn.getNumberPresentation();

//comment
String newNumber = PhoneUtils.modifyForSpecialCnapCases(mApplication, callerInfo,
number, presentation);

if (!PhoneNumberUtils.isUriNumber(number)) {
number = PhoneNumberUtils.stripSeparators(number);
}
if (VDBG) log(""getLogNumber: "" + number);
return number;
}
}","private String getLogNumber(Connection conn, CallerInfo callerInfo) {
String number = null;

if (conn.isIncoming()) {
number = conn.getAddress();
} else {
//comment
//comment
//comment
//comment
//comment
<start>if (null == callerInfo || TextUtils.isEmpty(callerInfo.phoneNumber) ||
callerInfo.isEmergencyNumber() || callerInfo.isVoiceMailNumber()) {
if (conn.getCall().getPhone().getPhoneType() == PhoneConstants.PHONE_TYPE_CDMA) {
//comment
number = conn.getOrigDialString();
} else {
number = conn.getAddress();
}
} else {
number = callerInfo.phoneNumber;
}<end>
}

if (null == number) {
return null;
} else {
int presentation = conn.getNumberPresentation();

//comment
String newNumber = PhoneUtils.modifyForSpecialCnapCases(mApplication, callerInfo,
number, presentation);

if (!PhoneNumberUtils.isUriNumber(number)) {
number = PhoneNumberUtils.stripSeparators(number);
}
if (VDBG) log(""getLogNumber: "" + number);
return number;
}
}"
1177,"@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
final LayoutInflater dialogInflater = (LayoutInflater)
getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

//comment
final ArrayAdapter<AdapterEntry> adapter = new ArrayAdapter<AdapterEntry>(getActivity(),
R.layout.select_dialog_item) {

@Override
public View getView(int position, View convertView, ViewGroup parent) {
final View result = convertView != null ? convertView :
dialogInflater.inflate(R.layout.select_dialog_item, parent, false);
final TextView primaryText = (TextView) result.findViewById(R.id.primary_text);
final TextView secondaryText = (TextView) result.findViewById(R.id.secondary_text);
final AdapterEntry entry = getItem(position);
secondaryText.setVisibility(View.GONE);
if (entry.mChoiceResourceId == R.string.import_from_sim) {
final CharSequence secondary = getSimSecondaryText(entry.mSim);
if (TextUtils.isEmpty(secondary)) {
secondaryText.setVisibility(View.GONE);
} else {
secondaryText.setText(secondary);
secondaryText.setVisibility(View.VISIBLE);
}
}
primaryText.setText(entry.mLabel);
return result;
}

CharSequence getSimSecondaryText(SimCard sim) {
int count = getSimContactCount(sim);

CharSequence phone = sim.getFormattedPhone();
if (phone == null) {
phone = sim.getPhone();
}
if (phone != null) {
phone = sBidiFormatter.unicodeWrap(
PhoneNumberUtilsCompat.createTtsSpannable(phone),
TextDirectionHeuristicsCompat.LTR);
}

if (count != -1 && phone != null) {
//comment
final CharSequence template = getResources()
.getQuantityString(R.plurals.import_from_sim_secondary_template, count);
return TextUtils.expandTemplate(template, String.valueOf(count), phone);
} else if (phone != null) {
return phone;
} else if (count != -1) {
//comment
return getResources()
.getQuantityString(
R.plurals.import_from_sim_secondary_contact_count_fmt, count,
count);
} else {
return null;
}
}
};

addItems(adapter);

final DialogInterface.OnClickListener clickListener =
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
final int resId = adapter.getItem(which).mChoiceResourceId;
if (resId == R.string.import_from_sim) {
handleSimImportRequest(adapter.getItem(which).mSim);
} else if (resId == R.string.import_from_vcf_file) {
handleImportRequest(resId, SimCard.NO_SUBSCRIPTION_ID);
} else {
Log.e(TAG, ""Unexpected resource: ""
+ getActivity().getResources().getResourceEntryName(resId));
}
dialog.dismiss();
}
};

final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), getTheme())
.setTitle(R.string.dialog_import)
.setNegativeButton(android.R.string.cancel, null);
if (adapter.isEmpty()) {
//comment
builder.setMessage(R.string.nothing_to_import_message);
} else {
builder.setSingleChoiceItems(adapter, -1, clickListener);
}

return builder.create();
}","@Override
public Dialog onCreateDialog(Bundle savedInstanceState) {
final LayoutInflater dialogInflater = (LayoutInflater)
getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);

//comment
<start>final ArrayAdapter<AdapterEntry> adapter = new ArrayAdapter<AdapterEntry>(getActivity(),
R.layout.select_dialog_item) {<end>

@Override
public View getView(int position, View convertView, ViewGroup parent) {
final View result = convertView != null ? convertView :
dialogInflater.inflate(R.layout.select_dialog_item, parent, false);
final TextView primaryText = (TextView) result.findViewById(R.id.primary_text);
final TextView secondaryText = (TextView) result.findViewById(R.id.secondary_text);
final AdapterEntry entry = getItem(position);
secondaryText.setVisibility(View.GONE);
if (entry.mChoiceResourceId == R.string.import_from_sim) {
final CharSequence secondary = getSimSecondaryText(entry.mSim);
if (TextUtils.isEmpty(secondary)) {
secondaryText.setVisibility(View.GONE);
} else {
secondaryText.setText(secondary);
secondaryText.setVisibility(View.VISIBLE);
}
}
primaryText.setText(entry.mLabel);
return result;
}

CharSequence getSimSecondaryText(SimCard sim) {
int count = getSimContactCount(sim);

CharSequence phone = sim.getFormattedPhone();
if (phone == null) {
phone = sim.getPhone();
}
if (phone != null) {
phone = sBidiFormatter.unicodeWrap(
PhoneNumberUtilsCompat.createTtsSpannable(phone),
TextDirectionHeuristicsCompat.LTR);
}

if (count != -1 && phone != null) {
//comment
final CharSequence template = getResources()
.getQuantityString(R.plurals.import_from_sim_secondary_template, count);
return TextUtils.expandTemplate(template, String.valueOf(count), phone);
} else if (phone != null) {
return phone;
} else if (count != -1) {
//comment
return getResources()
.getQuantityString(
R.plurals.import_from_sim_secondary_contact_count_fmt, count,
count);
} else {
return null;
}
}
};

addItems(adapter);

final DialogInterface.OnClickListener clickListener =
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
final int resId = adapter.getItem(which).mChoiceResourceId;
if (resId == R.string.import_from_sim) {
handleSimImportRequest(adapter.getItem(which).mSim);
} else if (resId == R.string.import_from_vcf_file) {
handleImportRequest(resId, SimCard.NO_SUBSCRIPTION_ID);
} else {
Log.e(TAG, ""Unexpected resource: ""
+ getActivity().getResources().getResourceEntryName(resId));
}
dialog.dismiss();
}
};

final AlertDialog.Builder builder = new AlertDialog.Builder(getActivity(), getTheme())
.setTitle(R.string.dialog_import)
.setNegativeButton(android.R.string.cancel, null);
if (adapter.isEmpty()) {
//comment
builder.setMessage(R.string.nothing_to_import_message);
} else {
builder.setSingleChoiceItems(adapter, -1, clickListener);
}

return builder.create();
}"
1178,"        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
synchronized (mWriteScheduleLock) {
mWriteScheduled = false;
if (mWriteInProgress) {
//comment
maybeWriteStatusToDiskAsync();
return;
}
mWriteInProgress = true;
}
synchronized (mLock) {
//comment
mJobSet.forEachJob(null, (job) -> {
<start>if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}<end>
});
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
- startElapsed) + ""ms"");
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}
}","        @Override
public void run() {
final long startElapsed = sElapsedRealtimeClock.millis();
final List<JobStatus> storeCopy = new ArrayList<JobStatus>();
//comment
//comment
//comment
//comment
//comment
//comment
//comment
synchronized (mWriteScheduleLock) {
mWriteScheduled = false;
if (mWriteInProgress) {
//comment
maybeWriteStatusToDiskAsync();
return;
}
mWriteInProgress = true;
}
synchronized (mLock) {
//comment
<start>mJobSet.forEachJob(null, (job) -> {
if (job.isPersisted()) {
storeCopy.add(new JobStatus(job));
}
});<end>
}
writeJobsMapImpl(storeCopy);
if (DEBUG) {
Slog.v(TAG, ""Finished writing, took "" + (sElapsedRealtimeClock.millis()
- startElapsed) + ""ms"");
}
synchronized (mWriteScheduleLock) {
mWriteInProgress = false;
mWriteScheduleLock.notifyAll();
}
}"
1179,"    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);
<start>return;<end>
}
if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
setShifted(AUTOMATIC_SHIFT);
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}","    private void updateAlphabetShiftState(final int autoCaps, final int recapitalizeMode) {
if (!mIsAlphabetMode) return;
<start>if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != recapitalizeMode) {
//comment
updateShiftStateForRecapitalize(recapitalizeMode);<end>
return;
}
if (!mShiftKeyState.isReleasing()) {
//comment
//comment
return;
}
if (!mAlphabetShiftState.isShiftLocked() && !mShiftKeyState.isIgnoring()) {
if (mShiftKeyState.isReleasing() && autoCaps != Constants.TextUtils.CAP_MODE_OFF) {
//comment
setShifted(AUTOMATIC_SHIFT);
} else {
setShifted(mShiftKeyState.isChording() ? MANUAL_SHIFT : UNSHIFT);
}
}
}"
1181,"private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}","private static boolean grantSingle(@NonNull String packageName, @NonNull String permission,
boolean overrideUserSetAndFixed, boolean setGrantedByRole, boolean setGrantedByDefault,
boolean setSystemFixed, @NonNull Context context) {
boolean wasPermissionOrAppOpGranted = isPermissionAndAppOpGranted(packageName, permission,
context);
if (isPermissionFixed(packageName, permission, false, overrideUserSetAndFixed, context)
&& !wasPermissionOrAppOpGranted) {
//comment
return false;
}

if (isBackgroundPermission(permission, context)) {
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
boolean isAnyForegroundPermissionGranted = false;
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

if (isPermissionAndAppOpGranted(packageName, foregroundPermission, context)) {
isAnyForegroundPermissionGranted = true;
break;
}
}

if (!isAnyForegroundPermissionGranted) {
//comment
//comment
return false;
}
}

boolean permissionOrAppOpChanged = grantPermissionAndAppOp(packageName, permission,
context);

//comment
int newFlags = 0;
if (!wasPermissionOrAppOpGranted && setGrantedByRole) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_ROLE;
}
if (setGrantedByDefault) {
newFlags |= PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT;
}
if (setSystemFixed) {
newFlags |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
int newMask = newFlags;
newMask |= PackageManager.FLAG_PERMISSION_REVIEW_REQUIRED;
<start>if (!wasPermissionOrAppOpGranted) {
//comment
newMask |= PackageManager.FLAG_PERMISSION_USER_FIXED
| PackageManager.FLAG_PERMISSION_USER_SET;
}<end>
//comment
//comment
if (setGrantedByDefault && !setSystemFixed) {
int oldFlags = getPermissionFlags(packageName, permission, context);
if ((oldFlags & PackageManager.FLAG_PERMISSION_GRANTED_BY_DEFAULT) != 0
&& (oldFlags & PackageManager.FLAG_PERMISSION_SYSTEM_FIXED) != 0) {
if (DEBUG) {
Log.i(LOG_TAG, ""Granted not fixed "" + permission + "" to default handler ""
+ packageName);
}
newMask |= PackageManager.FLAG_PERMISSION_SYSTEM_FIXED;
}
}

setPermissionFlags(packageName, permission, newFlags, newMask, context);

return permissionOrAppOpChanged;
}"
1184,"private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
if (!isForegroundPermission(permission, context)) {
//comment
//comment
<start>return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;<end>
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}","private static boolean isPermissionAndAppOpGranted(@NonNull String packageName,
@NonNull String permission, @NonNull Context context) {
//comment
if (!isPermissionGrantedWithoutCheckingAppOp(packageName, permission, context)) {
return false;
}

//comment
if (isPermissionReviewRequired(packageName, permission, context)) {
return false;
}

if (!isBackgroundPermission(permission, context)) {
//comment
String appOp = getPermissionAppOp(permission);
if (appOp == null) {
return true;
}
Integer appOpMode = getAppOpMode(packageName, appOp, context);
if (appOpMode == null) {
return false;
}
<start>if (!isForegroundPermission(permission, context)) {
//comment
//comment
return appOpMode == AppOpsManager.MODE_ALLOWED;
} else {<end>
//comment
//comment
return appOpMode == AppOpsManager.MODE_FOREGROUND
|| appOpMode == AppOpsManager.MODE_ALLOWED;
}
} else {
//comment
//comment
List<String> foregroundPermissions = getForegroundPermissions(permission, context);
int foregroundPermissionsSize = foregroundPermissions.size();
for (int i = 0; i < foregroundPermissionsSize; i++) {
String foregroundPermission = foregroundPermissions.get(i);

String foregroundAppOp = getPermissionAppOp(foregroundPermission);
if (foregroundAppOp == null) {
continue;
}
Integer foregroundAppOpMode = getAppOpMode(packageName, foregroundAppOp, context);
if (foregroundAppOpMode == null) {
continue;
}
if (foregroundAppOpMode == AppOpsManager.MODE_ALLOWED) {
return true;
}
}
return false;
}
}"
1185,"    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
byte[] tranId = rc.getTransactionId();
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);

//comment
<start>String lineNumber = MessageUtils.getLocalNumber();<end>
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));

//comment
if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}
}
}","    private void sendAcknowledgeInd(RetrieveConf rc) throws MmsException, IOException {
//comment
//comment
//comment
byte[] tranId = rc.getTransactionId();
if (tranId != null) {
//comment
AcknowledgeInd acknowledgeInd = new AcknowledgeInd(
PduHeaders.CURRENT_MMS_VERSION, tranId);

//comment
<start>String lineNumber = MessageUtils.getLocalNumber();
acknowledgeInd.setFrom(new EncodedStringValue(lineNumber));<end>

//comment
if(MmsConfig.getNotifyWapMMSC()) {
sendPdu(new PduComposer(mContext, acknowledgeInd).make(), mContentLocation);
} else {
sendPdu(new PduComposer(mContext, acknowledgeInd).make());
}
}
}"
1190,"        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
<start>if (!mInForeground) {
return false;
}<end>
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}","        @Override
public boolean onCreateWindow(WebView view, final boolean dialog,
final boolean userGesture, final Message resultMsg) {
//comment
<start>if (!mInForeground) {
return false;
}<end>
//comment
if (dialog && mSubView != null) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_subwindows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_subwindows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
} else if (!mWebViewController.getTabControl().canCreateNewTab()) {
new AlertDialog.Builder(mContext)
.setTitle(R.string.too_many_windows_dialog_title)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.too_many_windows_dialog_message)
.setPositiveButton(R.string.ok, null)
.show();
return false;
}

//comment
if (userGesture) {
createWindow(dialog, resultMsg);
return true;
}

//comment
final AlertDialog.OnClickListener allowListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d,
int which) {
createWindow(dialog, resultMsg);
}
};

//comment
final AlertDialog.OnClickListener blockListener =
new AlertDialog.OnClickListener() {
public void onClick(DialogInterface d, int which) {
resultMsg.sendToTarget();
}
};

//comment
final AlertDialog d =
new AlertDialog.Builder(mContext)
.setIconAttribute(android.R.attr.alertDialogIcon)
.setMessage(R.string.popup_window_attempt)
.setPositiveButton(R.string.allow, allowListener)
.setNegativeButton(R.string.block, blockListener)
.setCancelable(false)
.create();

//comment
d.show();
return true;
}"
1191,"    private void startMonitorSubscriptionChange(SubscriptionManager mgr) {
if (mgr == null) {
return;
}
//comment
mSubscriptionsChangedListener = new OnSubscriptionsChangedListener(
Looper.getMainLooper()) {
@Override
public void onSubscriptionsChanged() {
SubscriptionManager mgr = getSubscriptionManager();
if (isSubscriptionRemainActive(mgr, mSubId)) {
return;
}
//comment
Log.w(TAG, ""subId "" + mSubId + "" no longer active."");
stopMonitorSubscriptionChange(mgr);
mActivity.finish();
}
};
mgr.addOnSubscriptionsChangedListener(
mActivity.getMainExecutor(), mSubscriptionsChangedListener);
}","    private void startMonitorSubscriptionChange(SubscriptionManager mgr) {
if (mgr == null) {
return;
}
//comment
<start>mSubscriptionsChangedListener = new OnSubscriptionsChangedListener(
Looper.getMainLooper()) {
@Override
public void onSubscriptionsChanged() {
SubscriptionManager mgr = getSubscriptionManager();
if (isSubscriptionRemainActive(mgr, mSubId)) {
return;
}
//comment
Log.w(TAG, ""subId "" + mSubId + "" no longer active."");
stopMonitorSubscriptionChange(mgr);
mActivity.finish();
}
};<end>
mgr.addOnSubscriptionsChangedListener(
mActivity.getMainExecutor(), mSubscriptionsChangedListener);
}"
1192,"    @Override
protected void onDialogClosed(boolean positiveResult) {
super.onDialogClosed(positiveResult);

if (positiveResult && (getValue() != null)) {
int buttonCdmaRoamingMode = Integer.valueOf(getValue()).intValue();
int settingsCdmaRoamingMode =
Settings.Global.getInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE, Phone.CDMA_RM_HOME);
if (buttonCdmaRoamingMode != settingsCdmaRoamingMode) {
int statusCdmaRoamingMode;
switch(buttonCdmaRoamingMode) {
case Phone.CDMA_RM_ANY:
statusCdmaRoamingMode = Phone.CDMA_RM_ANY;
break;
case Phone.CDMA_RM_HOME:
default:
statusCdmaRoamingMode = Phone.CDMA_RM_HOME;
}
//comment
Settings.Global.putInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE,
buttonCdmaRoamingMode );
//comment
<start>mPhone.setCdmaRoamingPreference(statusCdmaRoamingMode, mHandler
.obtainMessage(MyHandler.MESSAGE_SET_ROAMING_PREFERENCE));<end>
}
} else {
Log.d(LOG_TAG, String.format(""onDialogClosed: positiveResult=%b value=%s -- do nothing"",
positiveResult, getValue()));
}
}","    @Override
protected void onDialogClosed(boolean positiveResult) {
super.onDialogClosed(positiveResult);

if (positiveResult && (getValue() != null)) {
int buttonCdmaRoamingMode = Integer.valueOf(getValue()).intValue();
int settingsCdmaRoamingMode =
Settings.Global.getInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE, Phone.CDMA_RM_HOME);
if (buttonCdmaRoamingMode != settingsCdmaRoamingMode) {
int statusCdmaRoamingMode;
switch(buttonCdmaRoamingMode) {
case Phone.CDMA_RM_ANY:
statusCdmaRoamingMode = Phone.CDMA_RM_ANY;
break;
case Phone.CDMA_RM_HOME:
default:
statusCdmaRoamingMode = Phone.CDMA_RM_HOME;
}
//comment
Settings.Global.putInt(mPhone.getContext().getContentResolver(),
Settings.Global.CDMA_ROAMING_MODE,
buttonCdmaRoamingMode );
//comment
<start>mPhone.setCdmaRoamingPreference(statusCdmaRoamingMode, mHandler
.obtainMessage(MyHandler.MESSAGE_SET_ROAMING_PREFERENCE));<end>
}
} else {
Log.d(LOG_TAG, String.format(""onDialogClosed: positiveResult=%b value=%s -- do nothing"",
positiveResult, getValue()));
}
}"
1193,"    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
<start>mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);<end>
//comment
mTextIn.requestFocus();
<start>getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);<end>
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}","    private void configInputDisplay() {
TextInputLayout textInput = (TextInputLayout) findViewById(R.id.text_input_layout);

int inTypeId = R.string.alphabet;

//comment
if ((mStkInput.icon == null || !mStkInput.iconSelfExplanatory)
&& !TextUtils.isEmpty(mStkInput.text)) {
mPromptView.setText(mStkInput.text);
mPromptView.setVisibility(View.VISIBLE);
}

//comment
boolean hideHelper = false;
if (mStkInput.digitOnly) {
mTextIn.setKeyListener(StkDigitsKeyListener.getInstance());
inTypeId = R.string.digits;
hideHelper = StkAppService.getBooleanCarrierConfig(this,
CarrierConfigManager.KEY_HIDE_DIGITS_HELPER_TEXT_ON_STK_INPUT_SCREEN_BOOL,
mSlotId);
}
textInput.setHelperText(getResources().getString(inTypeId));
textInput.setHelperTextEnabled(!hideHelper);

setTitle(R.string.app_name);

if (mStkInput.icon != null) {
ImageView imageView = (ImageView) findViewById(R.id.icon);
imageView.setImageBitmap(mStkInput.icon);
imageView.setVisibility(View.VISIBLE);
}

//comment
switch (mState) {
case STATE_TEXT:
mTextIn.setFilters(new InputFilter[] {new InputFilter.LengthFilter(mStkInput.maxLen)});

textInput.setCounterMaxLength(mStkInput.maxLen);
//comment
textInput.setCounterEnabled(false);

if (!mStkInput.echo) {
mTextIn.setTransformationMethod(PasswordTransformationMethod
.getInstance());
}
mTextIn.setImeOptions(EditorInfo.IME_FLAG_NO_FULLSCREEN);
//comment
<start>mTextIn.requestFocus();
getWindow().setSoftInputMode(
WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);<end>
//comment
if (mStkInput.defaultText != null) {
mTextIn.setText(mStkInput.defaultText);
} else {
//comment
mTextIn.setText("""", BufferType.EDITABLE);
}
updateButton();

break;
case STATE_YES_NO:
//comment
mYesNoLayout.setVisibility(View.VISIBLE);
mNormalLayout.setVisibility(View.GONE);
break;
}
}"
1194,"private void setSeekBarAndTextLayout() {
mBinders.add(vh -> {
//comment
ViewGroup.MarginLayoutParams seekBarLayoutParams =
(ViewGroup.MarginLayoutParams) vh.getSeekBar().getLayoutParams();
seekBarLayoutParams.topMargin = TextUtils.isEmpty(mText)
? 0
: mContext.getResources().getDimensionPixelSize(R.dimen.car_padding_1);
vh.getSeekBar().requestLayout();

//comment
<start>setViewStartMargin(vh.getSeekBarContainer());
setViewEndMargin(vh.getSeekBarContainer());<end>

RelativeLayout.LayoutParams containerLayoutParams =
(RelativeLayout.LayoutParams) vh.getSeekBarContainer().getLayoutParams();
containerLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);
});
}","private void setSeekBarAndTextLayout() {
mBinders.add(vh -> {
//comment
ViewGroup.MarginLayoutParams seekBarLayoutParams =
(ViewGroup.MarginLayoutParams) vh.getSeekBar().getLayoutParams();
seekBarLayoutParams.topMargin = TextUtils.isEmpty(mText)
? 0
: mContext.getResources().getDimensionPixelSize(R.dimen.car_padding_1);
vh.getSeekBar().requestLayout();

//comment
<start>setViewStartMargin(vh.getSeekBarContainer());
setViewEndMargin(vh.getSeekBarContainer());<end>

RelativeLayout.LayoutParams containerLayoutParams =
(RelativeLayout.LayoutParams) vh.getSeekBarContainer().getLayoutParams();
containerLayoutParams.addRule(RelativeLayout.CENTER_VERTICAL);
});
}"
1198,"private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
if (enabledPackages.equals(mCachedEnabledPackages)) {
//comment
return;
}
mCachedEnabledPackages = enabledPackages;
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);
}
//comment
for (ComponentName componentName : enabledComponents) {
if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}
}
//comment
<start>Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();<end>
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}
}","private void updateListenerMap() {
Set<String> enabledPackages = getEnabledListenerPackages(mContext);
if (enabledPackages.equals(mCachedEnabledPackages)) {
//comment
return;
}
mCachedEnabledPackages = enabledPackages;
List<ResolveInfo> resolveInfos = mContext.getPackageManager().queryIntentServices(
new Intent().setAction(ACTION_BIND_SIDE_CHANNEL), 0);
Set<ComponentName> enabledComponents = new HashSet<ComponentName>();
for (ResolveInfo resolveInfo : resolveInfos) {
if (!enabledPackages.contains(resolveInfo.serviceInfo.packageName)) {
continue;
}
ComponentName componentName = new ComponentName(
resolveInfo.serviceInfo.packageName, resolveInfo.serviceInfo.name);
if (resolveInfo.serviceInfo.permission != null) {
Log.w(TAG, ""Permission present on component "" + componentName
+ "", not adding listener record."");
continue;
}
enabledComponents.add(componentName);
}
//comment
for (ComponentName componentName : enabledComponents) {
if (!mRecordMap.containsKey(componentName)) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Adding listener record for "" + componentName);
}
mRecordMap.put(componentName, new ListenerRecord(componentName));
}
}
//comment
<start>Iterator<Map.Entry<ComponentName, ListenerRecord>> it =
mRecordMap.entrySet().iterator();
while (it.hasNext()) {
Map.Entry<ComponentName, ListenerRecord> entry = it.next();
if (!enabledComponents.contains(entry.getKey())) {
if (Log.isLoggable(TAG, Log.DEBUG)) {
Log.d(TAG, ""Removing listener record for "" + entry.getKey());
}
ensureServiceUnbound(entry.getValue());
it.remove();
}
}<end>
}"
1203,"        public void onProgressChanged(SeekBar bar, int progress, boolean fromuser) {
if (!fromuser) {
return;
}
//comment
if (mPlayer == null) {
return;
}
mPlayer.seekTo(progress);
}","        public void onProgressChanged(SeekBar bar, int progress, boolean fromuser) {
if (!fromuser) {
return;
}
//comment
<start>if (mPlayer == null) {
return;
}
mPlayer.seekTo(progress);<end>
}"
